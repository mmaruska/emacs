2011-06-28  Paul Eggert  <eggert@cs.ucla.edu>

	* gnutls.c (Qgnutls_bootprop_verify_error): Remove unused var.

2011-06-27  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in: Redesign dependencies so they reflect more
	clearly which files are directly included by each source file,
	and not through other includes.

2011-06-27  Martin Rudalics  <rudalics@gmx.at>

	* buffer.c (Qclone_number): Declare static and DEFSYM it.
	(sort_overlays, overlay_strings): When an overlay's clone number
	matches the window's clone number process the overlay even if
	the overlay's window property doesn't match the current window.

	* window.c (Fwindow_vchild): Rename to Fwindow_top_child.
	(Fwindow_hchild): Rename to Fwindow_left_child.
	(Fwindow_next): Rename to Fwindow_next_sibling.
	(Fwindow_prev): Rename to Fwindow_prev_sibling.
	(resize_window_check): Rename to window_resize_check.
	(resize_window_apply): Rename to window_resize_apply.
	(Fresize_window_apply): Rename to Fwindow_resize_apply.
	(Fdelete_other_windows_internal, resize_frame_windows)
	(Fsplit_window_internal, Fdelete_window_internal)
	(grow_mini_window, shrink_mini_window)
	(Fresize_mini_window_internal): Fix callers accordingly.

2011-06-26  Jan Djärv  <jan.h.d@swipnet.se>

	* emacsgtkfixed.h: State that this is only used with Gtk+3.
	(emacs_fixed_set_min_size): Remove.
	(emacs_fixed_new): Take frame as argument.

	* emacsgtkfixed.c: State that this is only used with Gtk+3.
	(_EmacsFixedPrivate): Remove minwidth/height.
	Add struct frame *f.
	(emacs_fixed_init): Initialize priv->f.
	(get_parent_class, emacs_fixed_set_min_size): Remove.
	(emacs_fixed_new): Set priv->f to argument.
	(emacs_fixed_get_preferred_width)
	(emacs_fixed_get_preferred_height): Use min_width/height from
	frames size_hint to set minimum and natural (Bug#8919).
	(XSetWMSizeHints, XSetWMNormalHints): Override these functions
	and use min_width/height from frames size_hint to set
	min_width/height (Bug#8919).

	* gtkutil.c (xg_create_frame_widgets): Pass f to emacs_fixed_new.
	(x_wm_set_size_hint): Remove call to emacs_fixed_set_min_size. Fix
	indentation.

2011-06-26  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_paragraph_init): Test for ZV_BYTE before calling
	bidi_at_paragraph_end, since fast_looking_at doesn't like to be
	called at ZV.

2011-06-26  Chong Yidong  <cyd@stupidchicken.com>

	* process.c (wait_reading_process_output): Bypass select if
	waiting for a cell while ignoring keyboard input, and input is
	pending.  Suggested by Jan Djärv (Bug#8869).

2011-06-25  Paul Eggert  <eggert@cs.ucla.edu>

	Use gnulib's dup2 module instead of rolling our own.
	* sysdep.c (dup2) [!HAVE_DUP2]: Remove; gnulib now does this.

2011-06-25  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* dispnew.c (scrolling_window): Before scrolling, turn off a
	mouse-highlight in the window being scrolled.

2011-06-24  Juanma Barranquero  <lekktu@gmail.com>

	Move DEFSYM to lisp.h and use everywhere.

	* character.h (DEFSYM): Move declaration...
	* lisp.h (DEFSYM): ...here.

	* gnutls.c:
	* minibuf.c:
	* w32menu.c:
	* w32proc.c:
	* w32select.c: Don't include character.h.

	* alloc.c (syms_of_alloc):
	* buffer.c (syms_of_buffer):
	* bytecode.c (syms_of_bytecode):
	* callint.c (syms_of_callint):
	* casefiddle.c (syms_of_casefiddle):
	* casetab.c (init_casetab_once):
	* category.c (init_category_once, syms_of_category):
	* ccl.c (syms_of_ccl):
	* cmds.c (syms_of_cmds):
	* composite.c (syms_of_composite):
	* dbusbind.c (syms_of_dbusbind):
	* dired.c (syms_of_dired):
	* dispnew.c (syms_of_display):
	* doc.c (syms_of_doc):
	* editfns.c (syms_of_editfns):
	* emacs.c (syms_of_emacs):
	* eval.c (syms_of_eval):
	* fileio.c (syms_of_fileio):
	* fns.c (syms_of_fns):
	* frame.c (syms_of_frame):
	* fringe.c (syms_of_fringe):
	* insdel.c (syms_of_insdel):
	* keymap.c (syms_of_keymap):
	* lread.c (init_obarray, syms_of_lread):
	* macros.c (syms_of_macros):
	* msdos.c (syms_of_msdos):
	* print.c (syms_of_print):
	* process.c (syms_of_process):
	* search.c (syms_of_search):
	* sound.c (syms_of_sound):
	* syntax.c (init_syntax_once, syms_of_syntax):
	* terminal.c (syms_of_terminal):
	* textprop.c (syms_of_textprop):
	* undo.c (syms_of_undo):
	* w32.c (globals_of_w32):
	* window.c (syms_of_window):
	* xdisp.c (syms_of_xdisp):
	* xfaces.c (syms_of_xfaces):
	* xfns.c (syms_of_xfns):
	* xmenu.c (syms_of_xmenu):
	* xsettings.c (syms_of_xsettings):
	* xterm.c (syms_of_xterm): Use DEFSYM.

2011-06-24  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (syms_of_gnutls): Use the DEFSYM macro from character.h.

2011-06-23  Paul Eggert  <eggert@cs.ucla.edu>

	Integer and buffer overflow fixes (Bug#8873).

	* print.c (printchar, strout): Check for string overflow.
	(PRINTPREPARE, printchar, strout):
	Don't set size unless allocation succeeds.

	* minibuf.c (read_minibuf_noninteractive): Use ptrdiff_t, not int,
	for sizes.  Check for string overflow more accurately.
	Simplify newline removal at end; this suppresses a GCC 4.6.0 warning.

	* macros.c: Integer and buffer overflow fixes.
	* keyboard.h (struct keyboard.kbd_macro_bufsize):
	* macros.c (Fstart_kbd_macro, store_kbd_macro_char):
	Use ptrdiff_t, not int, for sizes.
	Don't increment bufsize until after realloc succeeds.
	Check for size-calculation overflow.
	(Fstart_kbd_macro): Use EMACS_INT, not int, for XINT result.

	* lisp.h (DEFVAR_KBOARD): Use offsetof instead of char * finagling.

	* lread.c: Integer overflow fixes.
	(read_integer): Radix is now EMACS_INT, not int,
	to improve quality of diagnostics for out-of-range radices.
	Calculate buffer size correctly for out-of-range radices.
	(read1): Check for integer overflow in radices, and in
	read-circle numbers.
	(read_escape): Avoid int overflow.
	(Fload, openp, read_buffer_size, read1)
	(substitute_object_recurse, read_vector, read_list, map_obarray):
	Use ptrdiff_t, not int, for sizes.
	(read1): Use EMACS_INT, not int, for sizes.
	Check for size overflow.

	* image.c (cache_image): Check for size arithmetic overflow.

	* lread.c: Integer overflow issues.
	(saved_doc_string_size, saved_doc_string_length)
	(prev_saved_doc_string_size, prev_saved_doc_string_length):
	Now ptrdiff_t, not int.
	(read1): Don't assume doc string length fits in int.  Check for
	out-of-range doc string lengths.
	(read_list): Don't assume file position fits in int.
	(read_escape): Check for hex character overflow.

2011-06-22  Leo Liu  <sdl.web@gmail.com>

	* minibuf.c (Fcompleting_read_default, Vcompleting_read_function):
	Move to minibuffer.el.

2011-06-22  Paul Eggert  <eggert@cs.ucla.edu>

	Fixes for GLYPH_DEBUG found by GCC 4.6.0 static checking.
	The following patches are for when GLYPH_DEBUG && !XASSERT.
	* dispextern.h (trace_redisplay_p, dump_glyph_string):
	* dispnew.c (flush_stdout):
	* xdisp.c (dump_glyph_row, dump_glyph_matrix, dump_glyph):
	Mark as externally visible.
	* dispnew.c (check_window_matrix_pointers): Now static.
	* dispnew.c (window_to_frame_vpos):
	* xfns.c (unwind_create_frame):
	* xterm.c (x_check_font): Remove unused local.
	* scroll.c (CHECK_BOUNDS):
	* xfaces.c (cache_fache): Rename local to avoid shadowing.
	* xfns.c, w32fns.c (image_cache_refcount, dpyinfo_refcount): Now static.
	* xdisp.c (check_window_end): Now a no-op if !XASSERTS.
	(debug_first_unchanged_at_end_vpos, debug_last_unchanged_at_beg_vpos)
	(debug_dvpos, debug_dy, debug_delta, debug_delta_bytes, debug_end_vpos):
	Now static.
	(debug_method_add): Use va_list and vsprintf rather than relying
	on undefined behavior with wrong number of arguments.
	(dump_glyph, dump_glyph_row, Fdump_glyph_matrix):
	Don't assume ptrdiff_t and EMACS_INT are the same width as int.
	In this code, it's OK to assume C99 behavior for ptrdiff_t formats
	since we're not interested in debugging glyphs with old libraries.
	* xfaces.c (cache_face): Move debugging code earlier; this pacifies
	GCC 4.6.0's static checking.

2011-06-22  Paul Eggert  <eggert@cs.ucla.edu>

	Integer overflow and signedness fixes (Bug#8873).
	A few related buffer overrun fixes, too.

	* font.c (font_score): Use EMACS_INT, not int, to store XINT value.

	* dispextern.h (struct face.stipple):
	* image.c (x_bitmap_height, x_bitmap_width, x_bitmap_pixmap)
	(x_bitmap_mask, x_allocate_bitmap_record)
	(x_create_bitmap_from_data, x_create_bitmap_from_file)
	(x_destroy_bitmap, x_destroy_all_bitmaps, x_create_bitmap_mask)
	(x_create_bitmap_from_xpm_data):
	* nsterm.h (struct ns_display_info.bitmaps_size, .bitmaps_last):
	* w32term.h (struct w32_display_info.icon_bitmap_id, .bitmaps_size)
	(.bitmaps_last):
	* xfaces.c (load_pixmap):
	* xterm.c (x_bitmap_icon, x_wm_set_icon_pixmap):
	* xterm.h (struct x_display_info.icon_bitmap_id, .bitmaps_size)
	(.bitmaps_last, struct x_output.icon_bitmap):
	Use ptrdiff_t, not int, for bitmap indexes.
	(x_allocate_bitmap_record): Check for size overflow.
	* dispextern.h, lisp.h: Adjust to API changes elsewhere.

	Use ptrdiff_t, not int, for overlay counts.
	* buffer.h (overlays_at, sort_overlays, GET_OVERLAYS_AT):
	* editfns.c (overlays_around, get_pos_property):
	* textprop.c (get_char_property_and_overlay):
	* xdisp.c (next_overlay_change, note_mouse_highlight):
	* xfaces.c (face_at_buffer_position):
	* buffer.c (OVERLAY_COUNT_MAX): New macro.
	(overlays_at, overlays_in, sort_overlays, Foverlays_at)
	(Fnext_overlay_change, Fprevious_overlay_change)
	(mouse_face_overlay_overlaps, Foverlays_in):
	Use ptrdiff_t, not int, for sizes.
	(overlays_at, overlays_in): Check for size-calculation overflow.

	* xterm.c (xim_initialize, same_x_server): Strlen may not fit in int.

	* xsmfns.c (smc_save_yourself_CB, x_session_initialize): Avoid strlen.
	(x_session_initialize): Do not assume string length fits in int.

	* xsettings.c (apply_xft_settings): Fix potential buffer overrun.
	This is unlikely, but can occur if DPI is outlandish.

	* xsettings.c (Ffont_get_system_normal_font, Ffont_get_system_font):
	* xselect.c (Fx_get_atom_name): Avoid need for strlen.

	* xrdb.c: Don't assume strlen fits in int; avoid some strlens.
	* xrdb.c (magic_file_p, search_magic_path):
	Omit last arg SUFFIX; it was always 0.  All callers changed.
	(magic_file_p): Use ptrdiff_t, not int.  Check for size overflow.

	* xfont.c (xfont_match): Avoid need for strlen.

	* xfns.c: Don't assume strlen fits in int.
	(xic_create_fontsetname, x_window): Use ptrdiff_t, not int.

	* xdisp.c (message_log_check_duplicate): Return intmax_t,
	not unsigned long, as we prefer signed integers.  All callers changed.
	Detect integer overflow in repeat count.
	(message_dolog): Don't assume print length fits in 39 bytes.
	(display_mode_element): Don't assume strlen fits in int.

	* termcap.c: Don't assume sizes fit in int and never overflow.
	(struct termcap_buffer, tgetent): Use ptrdiff_t, not int, for sizes.
	(gobble_line): Check for size-calculation overflow.

	* minibuf.c (Fread_buffer):
	* lread.c (intern, intern_c_string):
	* image.c (xpm_scan) [HAVE_NS && !HAVE_XPM]:
	Don't assume string length fits in int.

	* keyboard.c (parse_tool_bar_item):
	* gtkutil.c (style_changed_cb): Avoid need for strlen.

	* font.c: Don't assume string length fits in int.
	(font_parse_xlfd, font_parse_fcname, font_unparse_fcname):
	Use ptrdiff_t, not int.
	(font_intern_prop): Don't assume string length fits in int.
	Don't assume integer property fits in fixnum.
	* font.h (font_intern_prop): 2nd arg is now ptrdiff_t, not int.

	* filelock.c: Fix some buffer overrun and integer overflow issues.
	(get_boot_time): Don't assume gzip command string fits in 100 bytes.
	Reformulate so as not to need the command string.
	Invoke gzip -cd rather than gunzip, as it's more portable.
	(lock_info_type, lock_file_1, lock_file):
	Don't assume pid_t and time_t fit in unsigned long.
	(LOCK_PID_MAX): Remove; we now use more-reliable bounds.
	(current_lock_owner): Prefer signed type for sizes.
	Use memcpy, not strncpy, where memcpy is what is really wanted.
	Don't assume (via atoi) that time_t and pid_t fit in int.
	Check for time_t and/or pid_t out of range, e.g., via a network share.
	Don't alloca where an auto var works fine.

	* fileio.c: Fix some integer overflow issues.
	(file_name_as_directory, Fexpand_file_name, Fsubstitute_in_file_name):
	Don't assume string length fits in int.
	(directory_file_name): Don't assume string length fits in long.
	(make_temp_name): Don't assume pid fits in int, or that its print
	length is less than 20.

	* data.c (Fsubr_name): Rewrite to avoid a strlen call.

	* coding.c (make_subsidiaries): Don't assume string length fits in int.

	* callproc.c (child_setup): Rewrite to avoid two strlen calls.

	* process.c (Fformat_network_address): Use EMACS_INT, not EMACS_UINT.
	We prefer signed integers, even for size calculations.

	* emacs.c: Don't assume string length fits in 'int'.
	(DEFINE_DUMMY_FUNCTION, sort_args): Use ptrdiff_t, not int.
	(main): Don't invoke strlen when not needed.

	* dbusbind.c (XD_ERROR): Don't arbitrarily truncate string.
	(XD_DEBUG_MESSAGE): Don't waste a byte.

	* callproc.c (getenv_internal_1, getenv_internal)
	(Fgetenv_internal):
	* buffer.c (init_buffer): Don't assume string length fits in 'int'.

	* lread.c (invalid_syntax): Omit length argument.
	All uses changed.  This doesn't fix a bug, but it simplifies the
	code away from its former Hollerith-constant appearance, and it's
	one less 'int' to worry about when looking at integer-overflow issues.
	(string_to_number): Simplify 2011-04-26 change by invoking xsignal1.

	* lisp.h (DEFUN): Remove bogus use of sizeof (struct Lisp_Subr).
	This didn't break anything, but it didn't help either.
	It's confusing to put a bogus integer in a place where the actual
	value does not matter.
	(LIST_END_P): Remove unused macro and its bogus comment.
	(make_fixnum_or_float): Remove unnecessary cast to EMACS_INT.

	* lisp.h (union Lisp_Object.i): EMACS_INT, not EMACS_UINT.
	This is for consistency with the ordinary, non-USE_LISP_UNION_TYPE,
	implementation.
	(struct Lisp_Bool_Vector.size): EMACS_INT, not EMACS_UINT.
	We prefer signed types, and the value cannot exceed the EMACS_INT
	range anyway (because otherwise the length would not be representable).
	(XSET) [USE_LISP_UNION_TYPE]: Use uintptr_t and intptr_t,
	not EMACS_UINT and EMACS_INT, when converting pointer to integer.
	This avoids a GCC warning when WIDE_EMACS_INT.

	* indent.c (sane_tab_width): New function.
	(current_column, scan_for_column, Findent_to, position_indentation)
	(compute_motion): Use it.  This is just for clarity.
	(Fcompute_motion): Don't assume hscroll and tab offset fit in int.

	* image.c (xbm_image_p): Don't assume stated width, height fit in int.

	* lisp.h (lint_assume): New macro.
	* composite.c (composition_gstring_put_cache):
	* ftfont.c (ftfont_shape_by_flt): Use it to pacify GCC 4.6.0.

	* editfns.c, insdel.c:
	Omit unnecessary forward decls, to simplify future changes.

	* ftfont.c (ftfont_shape_by_flt): Use signed integers for lengths.

	* font.c (Ffont_shape_gstring): Don't assume glyph len fits in 'int'.

	* fns.c (Ffillarray): Don't assume bool vector size fits in 'int'.
	Use much-faster test for byte-length change.
	Don't assume string byte-length fits in 'int'.
	Check that character arg fits in 'int'.
	(mapcar1): Declare byte as byte, for clarity.

	* alloc.c (Fmake_bool_vector): Avoid unnecessary multiplication.

	* fns.c (concat): Catch string overflow earlier.
	Do not rely on integer wraparound.

	* dispextern.h (struct it.overlay_strings_charpos)
	(struct it.selective): Now EMACS_INT, not int.
	* xdisp.c (forward_to_next_line_start)
	(back_to_previous_visible_line_start)
	(reseat_at_next_visible_line_start, next_element_from_buffer):
	Don't arbitrarily truncate the value of 'selective' to int.

	* xdisp.c (init_iterator): Use XINT, not XFASTINT; it might be < 0.

	* composite.c: Don't truncate sizes to 'int'.
	(composition_gstring_p, composition_reseat_it)
	(composition_adjust_point): Use EMACS_INT, not int.
	(get_composition_id, composition_gstring_put_cache): Use EMACS_INT,
	not EMACS_UINT, for indexes.

	* category.h (CATEGORY_SET_P): Remove unnecessary cast to EMACS_INT.

	* buffer.c: Include <verify.h>.
	(struct sortvec.priority, struct sortstr.priority):
	Now EMACS_INT, not int.
	(compare_overlays, cmp_for_strings): Avoid subtraction overflow.
	(struct sortstr.size, record_overlay_string)
	(struct sortstrlist.size, struct sortlist.used):
	Don't truncate size to int.
	(record_overlay_string): Check for size-calculation overflow.
	(init_buffer_once): Check at compile-time, not run-time.

2011-06-22  Jim Meyering  <meyering@redhat.com>

	Don't leak an XBM-image-sized buffer
	* image.c (xbm_load): Free the image buffer after using it.

2011-06-21  Paul Eggert  <eggert@cs.ucla.edu>

	Port to Sun C.
	* composite.c (find_automatic_composition): Omit needless 'return 0;'
	that Sun C diagnosed.
	* fns.c (secure_hash): Fix pointer signedness issue.
	* intervals.c (static_offset_intervals): New function.
	(offset_intervals): Use it.

2011-06-21  Leo Liu  <sdl.web@gmail.com>

	* deps.mk (fns.o):
	* makefile.w32-in ($(BLD)/fns.$(O)): Include sha256.h and
	sha512.h.

	* fns.c (secure_hash): Rename from crypto_hash_function and change
	the first arg to accept symbols.
	(Fsecure_hash): New primitive.
	(syms_of_fns): New symbols.

2011-06-20  Deniz Dogan  <deniz@dogan.se>

	* process.c (Fset_process_buffer): Clarify return value in
	docstring.

2011-06-18  Chong Yidong  <cyd@stupidchicken.com>

	* dispnew.c (add_window_display_history): Use BVAR.

	* xdisp.c (debug_method_add): Use BVAR.
	(check_window_end, dump_glyph_matrix, dump_glyph)
	(dump_glyph_row, dump_glyph_string): Convert arglist to ANSI C.

	* xfaces.c (check_lface_attrs, check_lface, dump_realized_face):
	Likewise.

	* xfns.c (Fx_create_frame, x_create_tip_frame): Delay image cache
	check till after the cache is created in init_frame_faces.

2011-06-17  Stefan Monnier  <monnier@iro.umontreal.ca>

	* fns.c (Fsafe_length): Yet another int/Lisp_Object mixup.

2011-06-16  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h: Include <limits.h>, for INT_MAX, LONG_MAX, LLONG_MAX.
	Without this, prin1 mishandles Lisp_Misc_Save_Value printing on
	hosts with pre-C99 libraries, because pD is wrongly defined to "t".

	Improve buffer-overflow checking (Bug#8873).
	* fileio.c (Finsert_file_contents):
	* insdel.c (insert_from_buffer_1, replace_range, replace_range_2):
	Remove the old (too-loose) buffer overflow checks.
	They weren't needed, since make_gap checks for buffer overflow.
	* insdel.c (make_gap_larger): Catch buffer overflows that were missed.
	The old code merely checked for Emacs fixnum overflow, and relied
	on undefined (wraparound) behavior.  The new code avoids undefined
	behavior, and also checks for ptrdiff_t and/or size_t overflow.

	* editfns.c (Finsert_char): Don't dump core with very negative counts.
	Tune.  Don't use wider integers than needed.  Don't use alloca.
	Use a bigger 'string' buffer.  Rewrite to avoid 'n > 0' test.

	* insdel.c (replace_range): Fix buf overflow when insbytes < outgoing.

	* insdel.c, lisp.h (buffer_overflow): New function.
	(insert_from_buffer_1, replace_range, replace_range_2):
	* insdel.c (make_gap_larger):
	* editfns.c (Finsert_char):
	* fileio.c (Finsert_file_contents): Use it, to normalize wording.

	* buffer.h (BUF_BYTES_MAX): Cast to ptrdiff_t so that it's signed.

2011-06-15  Paul Eggert  <eggert@cs.ucla.edu>

	Integer overflow and signedness fixes (Bug#8873).

	* ccl.c (ASCENDING_ORDER): New macro, to work around GCC bug 43772.
	(GET_CCL_RANGE, IN_INT_RANGE): Use it.

	* fileio.c: Don't assume EMACS_INT fits in off_t.
	(emacs_lseek): New static function.
	(Finsert_file_contents, Fwrite_region): Use it.
	Use SEEK_SET, SEEK_CUR, SEEK_END as appropriate.

	* fns.c (Fload_average): Don't assume 100 * load average fits in int.

	* fns.c: Don't overflow int when computing a list length.
	* fns.c (QUIT_COUNT_HEURISTIC): New constant.
	(Flength, Fsafe_length): Use EMACS_INT, not int, to avoid unwanted
	truncation on 64-bit hosts.  Check for QUIT every
	QUIT_COUNT_HEURISTIC entries rather than every other entry; that's
	faster and is responsive enough.
	(Flength): Report an error instead of overflowing an integer.
	(Fsafe_length): Return a float if the value is not representable
	as a fixnum.  This shouldn't happen except in contrived situations.
	(Fnthcdr, Fsort): Don't assume list length fits in int.
	(Fcopy_sequence): Don't assume vector length fits in int.

	* alloc.c: Check that resized vectors' lengths fit in fixnums.
	(header_size, word_size): New constants.
	(allocate_vectorlike): Don't check size overflow here.
	(allocate_vector): Check it here instead, since this is the only
	caller of allocate_vectorlike that could cause overflow.
	Check that the new vector's length is representable as a fixnum.

	* fns.c (next_almost_prime): Don't return a multiple of 3 or 5.
	The previous code was bogus.  For example, next_almost_prime (32)
	returned 39, which is undesirable as it is a multiple of 3; and
	next_almost_prime (24) returned 25, which is a multiple of 5 so
	why was the code bothering to check for multiples of 7?

	* bytecode.c (exec_byte_code): Use ptrdiff_t, not int, for vector length.

	* eval.c, doprnt.c (SIZE_MAX): Remove; inttypes.h defines this now.

	Variadic C functions now count arguments with ptrdiff_t.
	This partly undoes my 2011-03-30 change, which replaced int with size_t.
	Back then I didn't know that the Emacs coding style prefers signed int.
	Also, in the meantime I found a few more instances where arguments
	were being counted with int, which may truncate counts on 64-bit
	machines, or EMACS_INT, which may be unnecessarily wide.
	* lisp.h (struct Lisp_Subr.function.aMANY)
	(DEFUN_ARGS_MANY, internal_condition_case_n, safe_call):
	Arg counts are now ptrdiff_t, not size_t.
	All variadic functions and their callers changed accordingly.
	(struct gcpro.nvars): Now size_t, not size_t.  All uses changed.
	* bytecode.c (exec_byte_code): Check maxdepth for overflow,
	to avoid potential buffer overrun.  Don't assume arg counts fit in 'int'.
	* callint.c (Fcall_interactively): Check arg count for overflow,
	to avoid potential buffer overrun.  Use signed char, not 'int',
	for 'varies' array, so that we needn't bother to check its size
	calculation for overflow.
	* editfns.c (Fformat): Use ptrdiff_t, not EMACS_INT, to count args.
	* eval.c (apply_lambda):
	* fns.c (Fmapconcat): Use XFASTINT, not XINT, to get args length.
	(struct textprop_rec.argnum): Now ptrdiff_t, not int.  All uses changed.
	(mapconcat): Use ptrdiff_t, not int and EMACS_INT, to count args.

	* callint.c (Fcall_interactively): Don't use index var as event count.

	* vm-limit.c (check_memory_limits): Fix incorrect extern function decls.
	* mem-limits.h (SIZE): Remove; no longer used.

	* xterm.c (x_alloc_nearest_color_1): Prefer int to long when int works.

	Remove unnecessary casts.
	* xterm.c (x_term_init):
	* xfns.c (x_set_border_pixel):
	* widget.c (create_frame_gcs): Remove casts to unsigned long etc.
	These aren't needed now that we assume ANSI C.

	* sound.c (Fplay_sound_internal): Remove cast to unsigned long.
	It's more likely to cause problems (due to unsigned overflow)
	than to cure them.

	* dired.c (Ffile_attributes): Don't use 32-bit hack on 64-bit hosts.

	* unexelf.c (unexec): Don't assume BSS addr fits in unsigned.

	* xterm.c (handle_one_xevent): Omit unnecessary casts to unsigned.

	* keyboard.c (modify_event_symbol): Don't limit alist len to UINT_MAX.

	* lisp.h (CHAR_TABLE_SET): Omit now-redundant test.

	* lread.c (Fload): Don't compare a possibly-garbage time_t value.

	GLYPH_CODE_FACE returns EMACS_INT, not int.
	* dispextern.h (merge_faces):
	* xfaces.c (merge_faces):
	* xdisp.c (get_next_display_element, next_element_from_display_vector):
	Don't assume EMACS_INT fits in int.

	* character.h (CHAR_VALID_P): Remove unused parameter.
	* fontset.c, lisp.h, xdisp.c: All uses changed.

	* editfns.c (Ftranslate_region_internal): Omit redundant test.

	* fns.c (concat): Minor tuning based on overflow analysis.
	This doesn't fix any bugs.  Use int to hold character, instead
	of constantly refetching from Emacs object.  Use XFASTINT, not
	XINT, for value known to be a character.  Don't bother comparing
	a single byte to 0400, as it's always less.

	* floatfns.c (Fexpt):
	* fileio.c (make_temp_name): Omit unnecessary cast to unsigned.

	* editfns.c (Ftranslate_region_internal): Use int, not EMACS_INT
	for characters.

	* doc.c (get_doc_string): Omit (unsigned)c that mishandled negatives.

	* data.c (Faset): If ARRAY is a string, check that NEWELT is a char.
	Without this fix, on a 64-bit host (aset S 0 4294967386) would
	incorrectly succeed when S was a string, because 4294967386 was
	truncated before it was used.

	* chartab.c (Fchar_table_range): Use CHARACTERP to check range.
	Otherwise, an out-of-range integer could cause undefined behavior
	on a 64-bit host.

	* composite.c: Use int, not EMACS_INT, for characters.
	(fill_gstring_body, composition_compute_stop_pos): Use int, not
	EMACS_INT, for values that are known to be in character range.
	This doesn't fix any bugs but is the usual style inside Emacs and
	may generate better code on 32-bit machines.

	Make sure a 64-bit char is never passed to ENCODE_CHAR.
	This is for reasons similar to the recent CHAR_STRING fix.
	* charset.c (Fencode_char): Check that character arg is actually
	a character.  Pass an int to ENCODE_CHAR.
	* charset.h (ENCODE_CHAR): Verify that the character argument is no
	wider than 'int', as a compile-time check to prevent future regressions
	in this area.

	* character.c (char_string): Remove unnecessary casts.

	Make sure a 64-bit char is never passed to CHAR_STRING.
	Otherwise, CHAR_STRING would do the wrong thing on a 64-bit platform,
	by silently ignoring the top 32 bits, allowing some values
	that were far too large to be valid characters.
	* character.h: Include <verify.h>.
	(CHAR_STRING, CHAR_STRING_ADVANCE): Verify that the character
	arguments are no wider than unsigned, as a compile-time check
	to prevent future regressions in this area.
	* data.c (Faset):
	* editfns.c (Fchar_to_string, general_insert_function, Finsert_char)
	(Fsubst_char_in_region):
	* fns.c (concat):
	* xdisp.c (decode_mode_spec_coding):
	Adjust to CHAR_STRING's new requirement.
	* editfns.c (Finsert_char, Fsubst_char_in_region):
	* fns.c (concat): Check that character args are actually
	characters.  Without this test, these functions did the wrong
	thing with wildly out-of-range values on 64-bit hosts.

	Remove incorrect casts to 'unsigned' that lose info on 64-bit hosts.
	These casts should not be needed on 32-bit hosts, either.
	* keyboard.c (read_char):
	* lread.c (Fload): Remove casts to unsigned.

	* lisp.h (UNSIGNED_CMP): New macro.
	This fixes comparison bugs on 64-bit hosts.
	(ASCII_CHAR_P): Use it.
	* casefiddle.c (casify_object):
	* character.h (ASCII_BYTE_P, CHAR_VALID_P)
	(SINGLE_BYTE_CHAR_P, CHAR_STRING):
	* composite.h (COMPOSITION_ENCODE_RULE_VALID):
	* dispextern.h (FACE_FROM_ID):
	* keyboard.c (read_char): Use UNSIGNED_CMP.

	* xmenu.c (dialog_selection_callback) [!USE_GTK]: Cast to intptr_t,
	not to EMACS_INT, to avoid GCC warning.

	* xfns.c (x_set_scroll_bar_default_width): Remove unused 'int' locals.

	* buffer.h (PTR_BYTE_POS, BUF_PTR_BYTE_POS): Remove harmful cast.
	The cast incorrectly truncated 64-bit byte offsets to 32 bits, and
	isn't needed on 32-bit machines.

	* buffer.c (Fgenerate_new_buffer_name):
	Use EMACS_INT for count, not int.
	(advance_to_char_boundary): Return EMACS_INT, not int.

	* data.c (Qcompiled_function): Now static.

	* window.c (window_body_lines): Now static.

	* image.c (gif_load): Rename local to avoid shadowing.

	* lisp.h (SAFE_ALLOCA_LISP): Check for integer overflow.
	(struct Lisp_Save_Value): Use ptrdiff_t, not int, for 'integer' member.
	* alloc.c (make_save_value): Integer argument is now of type
	ptrdiff_t, not int.
	(mark_object): Use ptrdiff_t, not int.
	* lisp.h (pD): New macro.
	* print.c (print_object): Use it.

	* alloc.c: Use EMACS_INT, not int, to count objects.
	(total_conses, total_markers, total_symbols, total_vector_size)
	(total_free_conses, total_free_markers, total_free_symbols)
	(total_free_floats, total_floats, total_free_intervals)
	(total_intervals, total_strings, total_free_strings):
	Now EMACS_INT, not int.  All uses changed.
	(Fgarbage_collect): Compute overall total using a double, so that
	integer overflow is less likely to be a problem.  Check for overflow
	when converting back to an integer.
	(n_interval_blocks, n_string_blocks, n_float_blocks, n_cons_blocks)
	(n_vectors, n_symbol_blocks, n_marker_blocks): Remove.
	These were 'int' variables that could overflow on 64-bit hosts;
	they were never used, so remove them instead of repairing them.
	(nzombies, ngcs, max_live, max_zombies): Now EMACS_INT, not 'int'.
	(inhibit_garbage_collection): Set gc_cons_threshold to max value.
	Previously, this ceilinged at INT_MAX, but that doesn't work on
	64-bit machines.
	(allocate_pseudovector): Don't use EMACS_INT when int would do.

	* alloc.c (Fmake_bool_vector): Don't assume vector size fits in int.
	(allocate_vectorlike): Check for ptrdiff_t overflow.
	(mark_vectorlike, mark_char_table, mark_object): Avoid EMACS_UINT
	when a (possibly-narrower) signed value would do just as well.
	We prefer using signed arithmetic, to avoid comparison confusion.

	* alloc.c: Catch some string size overflows that we were missing.
	(XMALLOC_OVERRUN_CHECK_SIZE) [!XMALLOC_OVERRUN_CHECK]: Define to 0,
	for convenience in STRING_BYTES_MAX.
	(STRING_BYTES_MAX): New macro, superseding the old one in lisp.h.
	The definition here is exact; the one in lisp.h was approximate.
	(allocate_string_data): Check for string overflow.  This catches
	some instances we weren't catching before.  Also, it catches
	size_t overflow on (unusual) hosts where SIZE_MAX <= min
	(PTRDIFF_MAX, MOST_POSITIVE_FIXNUM), e.g., when size_t is 32 bits
	and ptrdiff_t and EMACS_INT are both 64 bits.

	* character.c, coding.c, doprnt.c, editfns.c, eval.c:
	All uses of STRING_BYTES_MAX replaced by STRING_BYTES_BOUND.
	* lisp.h (STRING_BYTES_BOUND): Renamed from STRING_BYTES_MAX.

	* character.c (string_escape_byte8): Fix nbytes/nchars typo.

	* alloc.c (Fmake_string): Check for out-of-range init.

2011-06-15  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (Fdefvaralias): Also mark the target as variable-special-p.

2011-06-14  Jan Djärv  <jan.h.d@swipnet.se>

	* xfns.c (x_set_scroll_bar_default_width): Remove argument to
	xg_get_default_scrollbar_width.

	* gtkutil.c: Include emacsgtkfixed.h if HAVE_GTK3.
	(int_gtk_range_get_value): Move to the scroll bar part of the file.
	(style_changed_cb): Call update_theme_scrollbar_width and call
	x_set_scroll_bar_default_width and xg_frame_set_char_size for
	all frames (Bug#8505).
	(xg_create_frame_widgets): Call emacs_fixed_new if HAVE_GTK3 (Bug#8505).
	Call gtk_window_set_resizable if HAVE_GTK3.
	(x_wm_set_size_hint): Call emacs_fixed_set_min_size with min width
	and height if HAVE_GTK3 (Bug#8505).
	(scroll_bar_width_for_theme): New variable.
	(update_theme_scrollbar_width): New function.
	(xg_get_default_scrollbar_width): Move code to
	update_theme_scrollbar_width, just return scroll_bar_width_for_theme.
	(xg_initialize): Call update_theme_scrollbar_width.

	* gtkutil.h (xg_get_default_scrollbar_width): Remove argument.

	* emacsgtkfixed.c, emacsgtkfixed.h: New files.

2011-06-12  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (make_frame): Call other_buffer_safely instead of
	other_buffer.

	* window.c (temp_output_buffer_show): Call display_buffer with
	second argument Vtemp_buffer_show_specifiers and reset latter
	immediately after the call.
	(Vtemp_buffer_show_specifiers): New variable.
	(auto_window_vscroll_p, next_screen_context_lines)
	(Vscroll_preserve_screen_position): Remove leading asterisks from
	doc-strings.

2011-06-12  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by GCC 4.6.0 static checking.
	* buffer.c (Qclone_number): Remove for now, as it's unused.
	(record_buffer, Funrecord_buffer): Rename local to avoid shadowing.
	(record_buffer): Remove unused local.
	* frame.c (other_visible_frames, frame_buffer_list): Now static.
	(set_frame_buffer_list): Remove; unused.
	* frame.h (other_visible_frames): Remove decl.
	* keyboard.h (menu_items_inuse): Declare only if USE_GTK || USE_MOTIF.
	* lisp.h (frame_buffer_list, set_frame_buffer_list): Remove decls.
	(add_gpm_wait_descriptor, delete_gpm_wait_descriptor): Declare only
	if HAVE_GPM.
	* menu.c (menu_items_inuse): Now static unless USE_GTK || USE_MOTIF.
	* process.c (add_gpm_wait_descriptor, delete_gpm_wait_descriptor):
	Define only if HAVE_GPM.
	* widget.c (EmacsFrameResize, emacsFrameClassRec): Now static.
	(update_hints_inhibit): Remove; never set.  All uses removed.
	* widgetprv.h (emacsFrameClassRec): Remove decl.
	* window.c (delete_deletable_window): Now returns void, since it
	wasn't returning anything.
	(compare_window_configurations): Remove unused locals.
	* xfns.c (x_set_scroll_bar_default_width): Remove unused locals.
	* xmenu.c (x_menu_set_in_use): Define only if USE_GTK || USE_MOTIF.
	(dialog_selection_callback) [!USE_GTK]: Prefer intptr_t for integers
	the same widths as pointers.  This follows up on the 2011-05-06 patch.
	* xterm.c (x_alloc_lighter_color_for_widget): Define only if USE_LUCID.
	* xterm.h: Likewise.
	(x_menu_set_in_use): Declare only if USE_GTK || USE_MOTIF.

2011-06-12  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in: Update dependencies.
	(LISP_H): Add lib/intprops.h.

2011-06-11  Chong Yidong  <cyd@stupidchicken.com>

	* image.c (gif_load): Add animation frame delay to the metadata.
	(syms_of_image): Use DEFSYM.  New symbol `delay'.

2011-06-11  Martin Rudalics  <rudalics@gmx.at>

	* window.c (delete_deletable_window): Re-add.
	(Fset_window_configuration): Rewrite to handle dead buffers and
	consequently deletable windows.
	(window_tree, Fwindow_tree): Remove.  Supply functionality in
	window.el.
	(compare_window_configurations): Simplify code.

2011-06-11  Andreas Schwab  <schwab@linux-m68k.org>

	* image.c (imagemagick_load_image): Fix type mismatch.
	(Fimagemagick_types): Likewise.

	* window.h (replace_buffer_in_windows): Declare.

2011-06-11  Martin Rudalics  <rudalics@gmx.at>

	* buffer.c: New Lisp objects Qbuffer_list_update_hook and
	Qclone_number.  Remove external declaration of Qdelete_window.
	(Fbuffer_list): Rewrite doc-string.  Minor restructuring of
	code.
	(Fget_buffer_create, Fmake_indirect_buffer, Frename_buffer): Run
	Qbuffer_list_update_hook if allowed.
	(Fother_buffer): Rewrite doc-string.  Major rewrite for new
	buffer list implementation.
	(other_buffer_safely): New function.
	(Fkill_buffer): Replace call to replace_buffer_in_all_windows by
	calls to replace_buffer_in_windows and
	replace_buffer_in_windows_safely.  Run Qbuffer_list_update_hook
	if allowed.
	(record_buffer): Inhibit quitting and rewrite using quittable
	functions.  Run Qbuffer_list_update_hook if allowed.
	(Frecord_buffer, Funrecord_buffer): New functions.
	(switch_to_buffer_1, Fswitch_to_buffer): Remove.  Move
	switch-to-buffer to window.el.
	(bury-buffer): Move to window.el.
	(Vbuffer_list_update_hook): New variable.

	* lisp.h (other_buffer_safely): Add prototype in buffer.c
	section.

	* window.h (resize_frame_windows): Move up in code.
	(Fwindow_frame): Remove EXFUN.
	(replace_buffer_in_all_windows): Remove prototype.
	(replace_buffer_in_windows_safely): Add prototype.

	* window.c: Declare Qdelete_window static again.  Move down
	declaration of select_count.
	(Fnext_window, Fprevious_window): Rewrite doc-strings.
	(Fother_window): Move to window.el.
	(window_loop): Remove DELETE_BUFFER_WINDOWS and UNSHOW_BUFFER
	cases.  Add REPLACE_BUFFER_IN_WINDOWS_SAFELY case.
	(Fdelete_windows_on, Freplace_buffer_in_windows): Move to
	window.el.
	(replace_buffer_in_windows): Implement by calling
	Qreplace_buffer_in_windows.
	(replace_buffer_in_all_windows): Remove with some functionality
	moved into replace_buffer_in_windows_safely.
	(replace_buffer_in_windows_safely): New function.
	(select_window_norecord, select_frame_norecord): Move in front
	of run_window_configuration_change_hook.  Remove now obsolete
	declarations.
	(Fset_window_buffer): Rewrite doc-string.  Call
	Qrecord_window_buffer.
	(keys_of_window): Move binding for other-window to window.el.

2011-06-11  Chong Yidong  <cyd@stupidchicken.com>

	* dispextern.h (struct image): Replace data member, whose int_val
	and ptr_val fields were not used by anything, with a single
	lisp_val object.

	* image.c (Fimage_metadata, make_image, mark_image, tiff_load)
	(gif_clear_image, gif_load, imagemagick_load_image)
	(gs_clear_image, gs_load): Callers changed.

2011-06-10  Paul Eggert  <eggert@cs.ucla.edu>

	* buffer.h: Include <time.h>, for time_t.
	Needed to build on FreeBSD 8.2.  Problem reported by Herbert J. Skuhra.

	Fix minor problems found by static checking.

	* image.c (PixelGetMagickColor): Declare if ImageMagick headers don't.

	Make identifiers static if they are not used in other modules.
	* data.c (Qcompiled_function, Qframe, Qvector):
	* image.c (QimageMagick, Qsvg):
	* minibuf.c (Qmetadata):
	* window.c (resize_window_check, resize_root_window): Now static.
	* window.h (resize_window_check, resize_root_window): Remove decls.

	* window.c (window_deletion_count, delete_deletable_window):
	Remove; unused.
	(window_body_lines): Now static.
	(Fdelete_other_windows_internal): Mark vars as initialized.
	Make sure 'resize_failed' is initialized.
	(run_window_configuration_change_hook): Rename local to avoid shadowing.
	(resize_window_apply): Remove unused local.
	* window.h (delete_deletable_window): Remove decl.

	* image.c (gif_load, svg_load_image): Rename locals to avoid shadowing.
	(imagemagick_load_image): Fix pointer signedness problem by changing
	last arg from unsigned char * to char *.  All uses changed.
	Also, fix a local for similar reasons.
	Remove unused locals.  Remove locals to avoid shadowing.
	(fn_rsvg_handle_free): Remove; unused.
	(svg_load, svg_load_image): Fix pointer signedness problem.
	(imagemagick_load_image): Don't use garbage pointer image_wand.

	* ftfont.c (ftfont_get_metrics, ftfont_drive_otf): Remove unused locals.

2011-06-10  Chong Yidong  <cyd@stupidchicken.com>

	* image.c (gif_load): Fix omitted cast error introduced by
	2011-06-06 change.

2011-06-10  Martin Rudalics  <rudalics@gmx.at>

	* window.h (resize_proportionally, orig_total_lines)
	(orig_top_line): Remove from window structure.
	(set_window_height, set_window_width, change_window_heights)
	(Fdelete_window): Remove prototypes.
	(resize_frame_windows): Remove duplicate declaration.

2011-06-10  Eli Zaretskii  <eliz@gnu.org>

	* window.h (resize_frame_windows, resize_window_check)
	(delete_deletable_window, resize_root_window)
	(resize_frame_windows): Declare prototypes.

	* window.c (resize_window_apply): Make definition be "static" to
	match the prototype.

2011-06-10  Martin Rudalics  <rudalics@gmx.at>

	* window.c: Remove declarations of Qwindow_size_fixed,
	window_min_size_1, window_min_size_2, window_min_size,
	size_window, window_fixed_size_p, enlarge_window, delete_window.
	Remove static from declaration of Qdelete_window, it's
	temporarily needed by Fbury_buffer.
	(replace_window): Don't assign orig_top_line and
	orig_total_lines.
	(Fdelete_window, delete_window): Remove.  Window deletion is
	handled by window.el.
	(window_loop): Remove DELETE_OTHER_WINDOWS case.  Replace
	Fdelete_window calls with calls to Qdelete_window.
	(Fdelete_other_windows): Remove.  Deleting other windows is
	handled by window.el.
	(window_fixed_size_p): Remove.  Fixed-sizeness of windows is
	handled in window.el.
	(window_min_size_2, window_min_size_1, window_min_size): Remove.
	Window minimum sizes are handled in window.el.
	(shrink_windows, size_window, set_window_height)
	(set_window_width, change_window_heights, window_height)
	(window_width, CURBEG, CURSIZE, enlarge_window)
	(adjust_window_trailing_edge, Fadjust_window_trailing_edge)
	(Fenlarge_window, Fshrink_window): Remove.  Window resizing is
	handled in window.el.
	(make_dummy_parent): Rename to make_parent_window and give it a
	second argument horflag.
	(make_window): Don't set resize_proportionally any more.
	(Fsplit_window): Remove.  Windows are split in window.el.
	(save_restore_action, save_restore_orig_size)
	(shrink_window_lowest_first, save_restore_orig_size): Remove.
	Resize mini windows in window.el.
	(grow_mini_window, shrink_mini_window): Implement by calling
	Qresize_root_window_vertically, resize_window_check and
	resize_window_apply.
	(saved_window, Fset_window_configuration, save_window_save): Do
	not handle orig_top_line, orig_total_lines, and
	resize_proportionally.
	(window_min_height, window_min_width): Move to window.el.
	(keys_of_window): Move bindings for delete-other-windows,
	split-window, delete-window and enlarge-window to window.el.

	* buffer.c: Temporarily extern Qdelete_window.
	(Fbury_buffer): Temporarily call Qdelete_window instead of
	Fdelete_window (Fbury_buffer will move to window.el soon).

	* frame.c (set_menu_bar_lines_1): Remove code handling
	orig_top_line and orig_total_lines.

	* dispnew.c (adjust_frame_glyphs_initially): Don't use
	set_window_height but set heights directly.
	(change_frame_size_1): Use resize_frame_windows.

	* xdisp.c (init_xdisp): Don't use set_window_height but set
	heights directly.

	* xfns.c (x_set_menu_bar_lines, x_set_tool_bar_lines): Use
	resize_frame_windows instead of change_window_heights and run
	run_window_configuration_change_hook.

	* w32fns.c (x_set_tool_bar_lines): Use resize_frame_windows
	instead of change_window_heights and run
	run_window_configuration_change_hook.

2011-06-09  Martin Rudalics  <rudalics@gmx.at>

	* window.c (replace_window): Rename second argument REPLACEMENT to
	NEW.  New third argument SETFLAG.  Rewrite.
	(delete_window, make_dummy_parent): Call replace_window with
	third argument 1.
	(window_list_1): Move down in code.
	(run_window_configuration_change_hook): Move set_buffer part
	before select_frame_norecord part in order to unwind correctly.
	Rename count1 to count.
	(recombine_windows, delete_deletable_window, resize_root_window)
	(Fdelete_other_windows_internal)
	(Frun_window_configuration_change_hook, make_parent_window)
	(resize_window_check, resize_window_apply, Fresize_window_apply)
	(resize_frame_windows, Fsplit_window_internal)
	(Fdelete_window_internal, Fresize_mini_window_internal): New
	functions.
	(syms_of_window): New variables Vwindow_splits and Vwindow_nest.

2011-06-08  Martin Rudalics  <rudalics@gmx.at>

	* window.h (window): Add some new members to window structure -
	normal_lines, normal_cols, new_total, new_normal, clone_number,
	splits, nest, prev_buffers, next_buffers.
	(WINDOW_TOTAL_SIZE): Move here from window.c.
	(MIN_SAFE_WINDOW_WIDTH, MIN_SAFE_WINDOW_HEIGHT): Define here.

	* window.c (Fwindow_height, Fwindow_width, Fwindow_full_width_p):
	Remove.
	(make_dummy_parent): Set new members of windows structure.
	(make_window): Move down in code.  Handle new members of window
	structure.
	(Fwindow_clone_number, Fwindow_splits, Fset_window_splits)
	(Fwindow_nest, Fset_window_nest, Fwindow_new_total)
	(Fwindow_normal_size, Fwindow_new_normal, Fwindow_prev_buffers)
	(Fset_window_prev_buffers, Fwindow_next_buffers)
	(Fset_window_next_buffers, Fset_window_clone_number): New
	functions.
	(Fwindow_hscroll, Fwindow_at, Fwindow_point, Fwindow_start)
	(Fwindow_end, Fwindow_line_height, Fset_window_dedicated_p):
	Doc-string fixes.
	(Fwindow_parameters, Fwindow_parameter, Fset_window_parameter):
	Argument WINDOW can be now internal window too.
	(Fwindow_use_time): Move up in code.
	(Fget_buffer_window): Rename argument FRAME to ALL-FRAMES.
	Rewrite doc-string.
	(Fset_window_configuration, saved_window)
	(Fcurrent_window_configuration, save_window_save): Handle new
	members of window structure.
	(WINDOW_TOTAL_SIZE, MIN_SAFE_WINDOW_WIDTH)
	(MIN_SAFE_WINDOW_HEIGHT): Move to window.h.
	(syms_of_window): New Lisp objects Qrecord_window_buffer,
	Qwindow_deletable_p, Qdelete_window, Qreplace_buffer_in_windows,
	Qget_mru_window, Qresize_root_window,
	Qresize_root_window_vertically, Qsafe, Qabove, Qbelow,
	Qauto_buffer_name; staticpro them.

2011-06-07  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fwindow_total_size, Fwindow_left_column)
	(Fwindow_top_line, window_body_lines, Fwindow_body_size)
	(Fwindow_list_1): New functions.
	(window_box_text_cols): Replace with window_body_cols.
	(Fwindow_width, Fscroll_left, Fscroll_right): Use
	window_body_cols instead of window_box_text_cols.
	(delete_window, Fset_window_configuration): Call
	delete_all_subwindows with window as argument.
	(delete_all_subwindows): Take a window as argument and not a
	structure.  Rewrite.
	(window_loop): Remove handling of GET_LRU_WINDOW and
	GET_LARGEST_WINDOW.
	(Fget_lru_window, Fget_largest_window): Move to window.el.

	* window.h: Extern window_body_cols instead of
	window_box_text_cols.  delete_all_subwindows now takes a
	Lisp_Object as argument.

	* indent.c (compute_motion, Fcompute_motion): Use
	window_body_cols instead of window_box_text_cols.

	* frame.c (delete_frame): Call delete_all_subwindows with root
	window as argument.

2011-06-07  Daniel Colascione  <dan.colascione@gmail.com>

	* fns.c (Fputhash): Document return value.

2011-06-06  Chong Yidong  <cyd@stupidchicken.com>

	* image.c (gif_load): Implement gif89a spec "no disposal" method.

2011-06-06  Paul Eggert  <eggert@cs.ucla.edu>

	Cons<->int and similar integer overflow fixes (Bug#8794).

	Check for overflow when converting integer to cons and back.
	* charset.c (Fdefine_charset_internal, Fdecode_char):
	Use cons_to_unsigned to catch overflow.
	(Fencode_char): Use INTEGER_TO_CONS.
	* composite.h (LGLYPH_CODE): Use cons_to_unsigned.
	(LGLYPH_SET_CODE): Use INTEGER_TO_CONS.
	* data.c (long_to_cons, cons_to_long): Remove.
	(cons_to_unsigned, cons_to_signed): New functions.
	These signal an error for invalid or out-of-range values.
	* dired.c (Ffile_attributes): Use INTEGER_TO_CONS.
	* fileio.c (Fset_visited_file_modtime): Use CONS_TO_INTEGER.
	* font.c (Ffont_variation_glyphs):
	* fontset.c (Finternal_char_font): Use INTEGER_TO_CONS.
	* lisp.h: Include <intprops.h>.
	(INTEGER_TO_CONS, CONS_TO_INTEGER): New macros.
	(cons_to_signed, cons_to_unsigned): New decls.
	(long_to_cons, cons_to_long): Remove decls.
	* undo.c (record_first_change): Use INTEGER_TO_CONS.
	(Fprimitive_undo): Use CONS_TO_INTEGER.
	* xfns.c (Fx_window_property): Likewise.
	* xselect.c: Include <limits.h>.
	(x_own_selection, selection_data_to_lisp_data):
	Use INTEGER_TO_CONS.
	(x_handle_selection_request, x_handle_selection_clear)
	(x_get_foreign_selection, Fx_disown_selection_internal)
	(Fx_get_atom_name, x_send_client_event): Use CONS_TO_INTEGER.
	(lisp_data_to_selection_data): Use cons_to_unsigned.
	(x_fill_property_data): Use cons_to_signed.
	Report values out of range.

	Check for buffer and string overflow more precisely.
	* buffer.h (BUF_BYTES_MAX): New macro.
	* lisp.h (STRING_BYTES_MAX): New macro.
	* alloc.c (Fmake_string):
	* character.c (string_escape_byte8):
	* coding.c (coding_alloc_by_realloc):
	* doprnt.c (doprnt):
	* editfns.c (Fformat):
	* eval.c (verror):
	Use STRING_BYTES_MAX, not MOST_POSITIVE_FIXNUM,
	since they may not be the same number.
	* editfns.c (Finsert_char):
	* fileio.c (Finsert_file_contents):
	Likewise for BUF_BYTES_MAX.

	* image.c: Use ptrdiff_t, not int, for sizes.
	(slurp_file): Switch from int to ptrdiff_t.
	All uses changed.
	(slurp_file): Check that file size fits in both size_t (for
	malloc) and ptrdiff_t (for sanity and safety).

	* fileio.c (Fverify_visited_file_modtime): Avoid time overflow
	if b->modtime has its maximal value.

	* dired.c (Ffile_attributes): Don't assume EMACS_INT has >32 bits.

	Don't assume time_t can fit into int.
	* buffer.h (struct buffer.modtime): Now time_t, not int.
	* fileio.c (Fvisited_file_modtime): No need for time_t cast now.
	* undo.c (Fprimitive_undo): Use time_t, not int, for time_t value.

	Minor fixes for signed vs unsigned integers.
	* character.h (MAYBE_UNIFY_CHAR):
	* charset.c (maybe_unify_char):
	* keyboard.c (read_char, reorder_modifiers):
	XINT -> XFASTINT, since the integer must be nonnegative.
	* ftfont.c (ftfont_spec_pattern):
	* keymap.c (access_keymap, silly_event_symbol_error):
	XUINT -> XFASTINT, since the integer must be nonnegative.
	(Fsingle_key_description, preferred_sequence_p): XUINT -> XINT,
	since it makes no difference and we prefer signed.
	* keyboard.c (record_char): Use XUINT when all the neighbors do.
	(access_keymap): NATNUMP -> INTEGERP, since the integer must be
	nonnegative.

2011-06-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.h (Fwindow_frame): Declare.

2011-06-06  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c: Simplify handling of large-request failures (Bug#8800).
	(SPARE_MEMORY): Always define.
	(LARGE_REQUEST): Remove.
	(memory_full): Use SPARE_MEMORY rather than LARGE_REQUEST.

2011-06-06  Martin Rudalics  <rudalics@gmx.at>

	* lisp.h: Move EXFUNS for Fframe_root_window,
	Fframe_first_window and Fset_frame_selected_window to window.h.

	* window.h: Move EXFUNS for Fframe_root_window,
	Fframe_first_window and Fset_frame_selected_window here from
	lisp.h.

	* frame.c (Fwindow_frame, Fframe_first_window)
	(Fframe_root_window, Fframe_selected_window)
	(Fset_frame_selected_window): Move to window.c.
	(Factive_minibuffer_window): Move to minibuf.c.
	(Fother_visible_frames_p): New function.

	* minibuf.c (Factive_minibuffer_window): Move here from frame.c.

	* window.c (decode_window, decode_any_window): Move up in code.
	(Fwindowp, Fwindow_live_p): Rewrite doc-strings.
	(inhibit_frame_unsplittable): Remove unused variable.
	(Fwindow_buffer): Move up and rewrite doc-string.
	(Fwindow_parent, Fwindow_vchild, Fwindow_hchild, Fwindow_next)
	(Fwindow_prev): New functions.
	(Fwindow_frame): Move here from frame.c.  Accept any window as
	argument.
	(Fframe_root_window, Fframe_first_window)
	(Fframe_selected_window): Move here from frame.c.  Accept frame
	or arbitrary window as argument.  Update doc-strings.
	(Fminibuffer_window): Move up in code.
	(Fwindow_minibuffer_p): Move up in code and simplify.
	(Fset_frame_selected_window): Move here from frame.c.
	Marginal rewrite.
	(Fselected_window, select_window, Fselect_window): Move up in
	code.  Minor doc-string fixes.

2011-06-06  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (memory_full) [SYSTEM_MALLOC]: Port to MacOS (Bug#8800).
	Do not assume that spare memory exists; that assumption is valid
	only if SYSTEM_MALLOC.
	(LARGE_REQUEST): New macro, so that the issue of large requests
	is separated from the issue of spare memory.

2011-06-05  Andreas Schwab  <schwab@linux-m68k.org>

	* editfns.c (Fformat): Correctly handle zero flag with hexadecimal
	format.  (Bug#8806)

	* gtkutil.c (xg_get_default_scrollbar_width): Avoid warning.

	* xfns.c (x_set_scroll_bar_default_width): Move declarations
	before statements.

2011-06-05  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (xg_get_default_scrollbar_width): New function.

	* gtkutil.h: Declare xg_get_default_scrollbar_width.

	* xfns.c (x_set_scroll_bar_default_width): If USE_GTK, get
	min width by calling x_set_scroll_bar_default_width (Bug#8505).

2011-06-05  Juanma Barranquero  <lekktu@gmail.com>

	* xdisp.c (single_display_spec_intangible_p): Remove declaration.

2011-06-04  Chong Yidong  <cyd@stupidchicken.com>

	* xselect.c (x_clipboard_manager_save): Remove redundant arg.
	(x_clipboard_manager_save): Add return value.
	(x_clipboard_manager_error_1, x_clipboard_manager_error_2):
	New error handlers.
	(x_clipboard_manager_save_frame, x_clipboard_manager_save_all):
	Obey Vx_select_enable_clipboard_manager.  Catch errors in
	x_clipboard_manager_save (Bug#8779).
	(Vx_select_enable_clipboard_manager): New variable.
	(x_get_foreign_selection): Reduce scope of x_catch_errors (Bug#8790).

2011-06-04  Dan Nicolaescu  <dann@ics.uci.edu>

	* emacs.c (main): Warn when starting a GTK emacs in daemon mode.

2011-06-04  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* fringe.c (update_window_fringes): Don't update overlay arrow bitmap
	in the current matrix if keep_current_p is non-zero.

2011-06-04  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_level_of_next_char): Fix last change.

2011-06-03  Eli Zaretskii  <eliz@gnu.org>

	Support bidi reordering of text covered by display properties.

	* bidi.c (bidi_copy_it): Use offsetof instead of emulating it.
	(bidi_fetch_char, bidi_fetch_char_advance): New functions.
	(bidi_cache_search, bidi_cache_iterator_state)
	(bidi_paragraph_init, bidi_resolve_explicit, bidi_resolve_weak)
	(bidi_level_of_next_char, bidi_move_to_visually_next):
	Support character positions inside a run of characters covered by a
	display string.
	(bidi_paragraph_init, bidi_resolve_explicit_1)
	(bidi_level_of_next_char): Call bidi_fetch_char and
	bidi_fetch_char_advance instead of FETCH_CHAR and
	FETCH_CHAR_ADVANCE.
	(bidi_init_it): Initialize new members.
	(LRE_CHAR, RLE_CHAR, PDF_CHAR, LRO_CHAR, RLO_CHAR): Remove macro
	definitions.
	(bidi_explicit_dir_char): Lookup character type in bidi_type_table,
	instead of using explicit *_CHAR codes.
	(bidi_resolve_explicit, bidi_resolve_weak):
	Use FETCH_MULTIBYTE_CHAR instead of FETCH_CHAR, as reordering of
	bidirectional text is supported only in multibyte buffers.
	(bidi_init_it): Accept additional argument FRAME_WINDOW_P and use
	it to initialize the frame_window_p member of struct bidi_it.
	(bidi_cache_iterator_state, bidi_resolve_explicit_1)
	(bidi_resolve_explicit, bidi_resolve_weak)
	(bidi_level_of_next_char, bidi_move_to_visually_next): Abort if
	bidi_it->nchars is non-positive.
	(bidi_level_of_next_char): Don't try to lookup the cache for the
	next/previous character if nothing is cached there yet, or if we
	were just reseat()'ed to a new position.

	* xdisp.c (set_cursor_from_row): Set start and stop points
	according to the row's direction when priming the loop that looks
	for the glyph on which to display cursor.
	(single_display_spec_intangible_p): Function deleted.
	(display_prop_intangible_p): Reimplement to call
	handle_display_spec instead of single_display_spec_intangible_p.
	Accept 3 additional arguments needed by handle_display_spec.
	This fixes incorrect cursor motion across display property with complex
	values: lists, `(when COND...)' forms, etc.
	(single_display_spec_string_p): Support property values that are
	lists with the argument STRING its top-level element.
	(display_prop_string_p): Fix the condition for processing a
	property that is a list to be consistent with handle_display_spec.
	(handle_display_spec): New function, refactored from the
	last portion of handle_display_prop.
	(compute_display_string_pos): Accept additional argument
	FRAME_WINDOW_P.  Call handle_display_spec to determine whether the
	value of a `display' property is a "replacing spec".
	(handle_single_display_spec): Accept 2 additional arguments BUFPOS
	and FRAME_WINDOW_P.  If IT is NULL, don't set up the iterator from
	the display property, but just return a value indicating whether
	the display property will replace the characters it covers.
	(Fcurrent_bidi_paragraph_direction): Initialize the nchars and
	frame_window_p members of struct bidi_it.
	(compute_display_string_pos, compute_display_string_end):
	New functions.
	(push_it): Accept second argument POSITION, where pop_it should
	jump to continue iteration.
	(reseat_1): Initialize bidi_it.disp_pos.

	* keyboard.c (adjust_point_for_property): Adjust the call to
	display_prop_intangible_p to its new signature.

	* dispextern.h (struct bidi_it): New member frame_window_p.
	(bidi_init_it): Update prototypes.
	(display_prop_intangible_p): Update prototype.
	(compute_display_string_pos, compute_display_string_end):
	Declare prototypes.
	(struct bidi_it): New members nchars and disp_pos.  ch_len is now
	EMACS_INT.

2011-06-02  Paul Eggert  <eggert@cs.ucla.edu>

	Malloc failure behavior now depends on size of allocation.
	* alloc.c (buffer_memory_full, memory_full): New arg NBYTES.
	* lisp.h: Change signatures accordingly.
	* alloc.c, buffer.c, editfns.c, menu.c, minibuf.c, xterm.c:
	All callers changed.  (Bug#8762)

	* gnutls.c: Use Emacs's memory allocators.
	Without this change, the gnutls library would invoke malloc etc.
	directly, which causes problems on non-SYNC_INPUT hosts, and which
	runs afoul of improving memory_full behavior.  (Bug#8761)
	(fn_gnutls_global_set_mem_functions): New macro or function pointer.
	(emacs_gnutls_global_init): Use it to specify xmalloc, xrealloc,
	xfree instead of the default malloc, realloc, free.
	(Fgnutls_boot): No need to check for memory allocation failure,
	since xmalloc does that for us.

	Remove arbitrary limit of 2**31 entries in hash tables.  (Bug#8771)
	* category.c (hash_get_category_set):
	* ccl.c (ccl_driver):
	* charset.c (Fdefine_charset_internal):
	* charset.h (struct charset.hash_index):
	* composite.c (get_composition_id, gstring_lookup_cache)
	(composition_gstring_put_cache):
	* composite.h (struct composition.hash_index):
	* dispextern.h (struct image.hash):
	* fns.c (next_almost_prime, larger_vector, cmpfn_eql)
	(cmpfn_equal, cmpfn_user_defined, hashfn_eq, hashfn_eql)
	(hashfn_equal, hashfn_user_defined, make_hash_table)
	(maybe_resize_hash_table, hash_lookup, hash_put)
	(hash_remove_from_table, hash_clear, sweep_weak_table, SXHASH_COMBINE)
	(sxhash_string, sxhash_list, sxhash_vector, sxhash_bool_vector)
	(Fsxhash, Fgethash, Fputhash, Fmaphash):
	* image.c (make_image, search_image_cache, lookup_image)
	(xpm_put_color_table_h):
	* lisp.h (struct Lisp_Hash_Table):
	* minibuf.c (Ftry_completion, Fall_completions, Ftest_completion):
	* print.c (print):  Use 'EMACS_UINT' and 'EMACS_INT'
	for hashes and hash indexes, instead of 'unsigned' and 'int'.
	* alloc.c (allocate_vectorlike):
	Check for overflow in vector size calculations.
	* ccl.c (ccl_driver):
	Check for overflow when converting EMACS_INT to int.
	* fns.c, image.c: Remove unnecessary static decls that would otherwise
	need to be updated by these changes.
	* fns.c (make_hash_table, maybe_resize_hash_table):
	Check for integer overflow with large hash tables.
	(make_hash_table, maybe_resize_hash_table, Fmake_hash_table):
	Prefer the faster XFLOAT_DATA to XFLOATINT where either will do.
	(SXHASH_REDUCE): New macro.
	(sxhash_string, sxhash_list, sxhash_vector, sxhash_bool_vector):
	Use it instead of discarding useful hash info with large hash values.
	(sxhash_float): New function.
	(sxhash): Use it.  No more need for "& INTMASK" due to above changes.
	* lisp.h (FIXNUM_BITS): New macro, useful for SXHASH_REDUCE etc.
	(MOST_NEGATIVE_FIXNUM, MOST_POSITIVE_FIXNUM, INTMASK):
	Rewrite to use FIXNUM_BITS, as this simplifies things.
	(next_almost_prime, larger_vector, sxhash, hash_lookup, hash_put):
	Adjust signatures to match updated version of code.
	(consing_since_gc): Now EMACS_INT, since a single hash table can
	use more than INT_MAX bytes.

2011-06-01  Dan Nicolaescu  <dann@ics.uci.edu>

	Make it possible to build with GCC-4.6+ -O2 -flto.

	* emacs.c (__malloc_initialize_hook): Mark as EXTERNALLY_VISIBLE.

2011-06-01  Stefan Monnier  <monnier@iro.umontreal.ca>

	* minibuf.c (get_minibuffer, read_minibuf_unwind):
	Call minibuffer-inactive-mode.

2011-05-31  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in ($(BLD)/data.$(O), $(BLD)/editfns.$(O)):
	Update dependencies.

2011-05-31  Dan Nicolaescu  <dann@ics.uci.edu>

	* data.c (init_data): Remove code for UTS, this system is not
	supported anymore.

2011-05-31  Dan Nicolaescu  <dann@ics.uci.edu>

	Don't force ./temacs to start in terminal mode.

	* frame.c (make_initial_frame): Initialize faces in all cases, not
	only when CANNOT_DUMP is defined.
	* dispnew.c (init_display): Remove CANNOT_DUMP condition.

2011-05-31  Dan Nicolaescu  <dann@ics.uci.edu>

	* dispnew.c (add_window_display_history): Use const for the string
	pointer.  Remove declaration, not needed.

2011-05-31  Paul Eggert  <eggert@cs.ucla.edu>

	Use 'inline', not 'INLINE'.
	<http://lists.gnu.org/archive/html/emacs-devel/2011-05/msg00914.html>
	* alloc.c, fontset.c (INLINE): Remove.
	* alloc.c, bidi.c, charset.c, coding.c, dispnew.c, fns.c, image.c:
	* intervals.c, keyboard.c, process.c, syntax.c, textprop.c, w32term.c:
	* xdisp.c, xfaces.c, xterm.c: Replace all uses of INLINE with inline.
	* gmalloc.c (register_heapinfo): Use inline unconditionally.
	* lisp.h (LISP_MAKE_RVALUE): Use inline, not __inline__.

2011-05-31  Dan Nicolaescu  <dann@ics.uci.edu>

	Make it possible to run ./temacs.

	* callproc.c (set_initial_environment): Remove CANNOT_DUMP code,
	syms_of_callproc does the same thing.  Remove test for
	"initialized", do it in the caller.
	* emacs.c (main): Avoid calling set_initial_environment when dumping.

2011-05-31  Stefan Monnier  <monnier@iro.umontreal.ca>

	* minibuf.c (Finternal_complete_buffer): Return `category' metadata.
	(read_minibuf): Use get_minibuffer.
	(syms_of_minibuf): Use DEFSYM.
	(Qmetadata): New var.
	* data.c (Qbuffer): Don't make it static.
	(syms_of_data): Use DEFSYM.

2011-05-31  Paul Eggert  <eggert@cs.ucla.edu>

	* ccl.c (CCL_CODE_RANGE): Allow negative numbers.  (Bug#8751)
	(CCL_CODE_MIN): New macro.

2011-05-30  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (lisp_align_malloc): Omit unnecessary val==NULL tests.

	* eval.c (Qdebug): Now static.
	* lisp.h (Qdebug): Remove decl.  This reverts a part of the
	2011-04-26 change (bzr 104015) that inadvertently undid part of
	the 2011-04-14 change (bzr 103913).

2011-05-29  Chong Yidong  <cyd@stupidchicken.com>

	* image.c: Various fixes to ImageMagick code comments.
	(Fimagemagick_types): Doc fix.

2011-05-29  Paul Eggert  <eggert@cs.ucla.edu>

	Minor fixes prompted by GCC 4.6.0 warnings.

	* xselect.c (converted_selections, conversion_fail_tag): Now static.

	* emacs.c [HAVE_X_WINDOWS]: Include "xterm.h".
	(x_clipboard_manager_save_all): Move extern decl to ...
	* xterm.h: ... here, so that it can be checked for consistency.

2011-05-29  Chong Yidong  <cyd@stupidchicken.com>

	* xselect.c (x_clipboard_manager_save_frame)
	(x_clipboard_manager_save_all): New functions.
	(Fx_clipboard_manager_save): Lisp function deleted.

	* emacs.c (Fkill_emacs): Call x_clipboard_manager_save_all.
	* frame.c (delete_frame): Call x_clipboard_manager_save_frame.

	* xterm.h: Update prototype.

2011-05-28  William Xu  <william.xwl@gmail.com>

	* nsterm.m (ns_term_shutdown): Synchronize user defaults before
	exiting (Bug#8239).

2011-05-28  Jim Meyering  <meyering@redhat.com>

	Avoid a sign-extension bug in crypto_hash_function.
	* fns.c (to_uchar): Define.
	(crypto_hash_function): Use it to convert some newly-signed
	variables to unsigned, to avoid sign-extension bugs.  For example,
	without this change, (md5 "truc") would evaluate to
	45723a2aff78ff4fff7fff1114760e62 rather than the expected
	45723a2af3788c4ff17f8d1114760e62.  Reported by Antoine Levitt in
	https://lists.gnu.org/archive/html/emacs-devel/2011-05/msg00883.html.

2011-05-27  Paul Eggert  <eggert@cs.ucla.edu>

	Integer overflow fixes.

	* dbusbind.c: Serial number integer overflow fixes.
	(CHECK_DBUS_SERIAL_GET_SERIAL): New macro.
	(Fdbus_call_method_asynchronously, xd_read_message_1): Use a float
	to hold a serial number that is too large for a fixnum.
	(Fdbus_method_return_internal, Fdbus_method_error_internal):
	Check for serial numbers out of range.  Decode any serial number
	that was so large that it became a float.  (Bug#8722)

	* dbusbind.c: Use XFASTINT rather than XUINT, and check for nonneg.
	(Fdbus_call_method, Fdbus_call_method_asynchronously):
	Use XFASTINT rather than XUINT when numbers are nonnegative.
	(xd_append_arg, Fdbus_method_return_internal):
	(Fdbus_method_error_internal): Likewise.  Also, for unsigned
	arguments, check that Lisp number is nonnegative, rather than
	silently wrapping negative numbers around.  (Bug#8722)
	(xd_read_message_1): Don't assume dbus_uint32_t can fit in int.
	(Bug#8722)

	* data.c (arith_driver, Flsh): Avoid unnecessary casts to EMACS_UINT.

	* ccl.c (ccl_driver): Redo slightly to avoid the need for 'unsigned'.

	ccl: add integer overflow checks
	* ccl.c (CCL_CODE_MAX, GET_CCL_RANGE, GET_CCL_CODE, GET_CCL_INT):
	(IN_INT_RANGE): New macros.
	(ccl_driver): Use them to check for integer overflow when
	decoding a CCL program.  Many of the new checks are whether XINT (x)
	fits in int; it doesn't always, on 64-bit hosts.  The new version
	doesn't catch all possible integer overflows, but it's an
	improvement.  (Bug#8719)

	* alloc.c (make_event_array): Use XINT, not XUINT.
	There's no need for unsigned here.

	* mem-limits.h (EXCEEDS_LISP_PTR) [!USE_LSB_TAG]: EMACS_UINT -> uintptr_t
	This follows up to the 2011-05-06 change that substituted uintptr_t
	for EMACS_INT.  This case wasn't caught back then.

	Rework Fformat to avoid integer overflow issues.
	* editfns.c: Include <float.h> unconditionally, as it's everywhere
	now (part of C89).  Include <verify.h>.
	(MAX_10_EXP, CONVERTED_BYTE_SIZE): Remove; no longer needed.
	(pWIDE, pWIDElen, signed_wide, unsigned_wide): New defns.
	(Fformat): Avoid the prepass trying to compute sizes; it was only
	approximate and thus did not catch overflow reliably.  Instead, walk
	through the format just once, formatting and computing sizes as we go,
	checking for integer overflow at every step, and allocating a larger
	buffer as needed.  Keep track separately whether the format is
	multibyte.  Keep only the most-recently calculated precision, rather
	than them all.  Record whether each argument has been converted to
	string.  Use EMACS_INT, not int, for byte and char and arg counts.
	Support field widths and precisions larger than INT_MAX.  Avoid
	sprintf's undefined behavior with conversion specifications such as %#d
	and %.0c.  Fix bug with strchr succeeding on '\0' when looking for
	flags.  Fix bug with (format "%c" 256.0).  Avoid integer overflow when
	formatting out-of-range floating point numbers with int
	formats. (Bug#8668)

	* lisp.h (FIXNUM_OVERFLOW_P): Work even if arg is a NaN.

	* data.c: Avoid integer truncation in expressions involving floats.
	* data.c: Include <intprops.h>.
	(arith_driver): When there's an integer overflow in an expression
	involving floating point, convert the integers to floating point
	so that the resulting value does not suffer from catastrophic
	integer truncation.  For example, on a 64-bit host (* 4
	most-negative-fixnum 0.5) should yield about -4.6e+18, not zero.
	Do not rely on undefined behavior after integer overflow.

	merge count_size_as_multibyte, parse_str_to_multibyte
	* character.c, character.h (count_size_as_multibyte):
	Rename from parse_str_to_multibyte; all uses changed.
	Check for integer overflow.
	* insdel.c, lisp.h (count_size_as_multibyte): Remove,
	since it's now a duplicate of the other.  This is more of
	a character than a buffer op, so better that it's in character.c.
	* fns.c, print.c: Adjust to above changes.

2011-05-27  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xselect.c (x_convert_selection): Yet another int/Lisp_Object mixup.

2011-05-27  Paul Eggert  <eggert@cs.ucla.edu>

	* xselect.c: Fix minor problems prompted by GCC 4.6.0 warnings.
	(x_handle_selection_request, frame_for_x_selection): Remove unused vars.
	(x_clipboard_manager_save): Now static.
	(Fx_clipboard_manager_save): Rename local to avoid shadowing.

	* fns.c: Fix minor problems prompted by GCC 4.6.0 warnings.
	(crypto_hash_function): Now static.
	Fix pointer signedness problems.  Avoid unnecessary initializations.

2011-05-27  Chong Yidong  <cyd@stupidchicken.com>

	* termhooks.h (Vselection_alist): Make it terminal-local.

	* terminal.c (create_terminal): Initialize it.

	* xselect.c: Support for clipboard managers.
	(Vselection_alist): Move to termhooks.h as terminal-local var.
	(LOCAL_SELECTION): New macro.
	(x_atom_to_symbol): Handle x_display_info_for_display fail case.
	(symbol_to_x_atom): Remove gratuitous arg.
	(x_handle_selection_request, lisp_data_to_selection_data)
	(x_get_foreign_selection, Fx_register_dnd_atom): Callers changed.
	(x_own_selection, x_get_local_selection, x_convert_selection):
	New arg, specifying work frame.  Use terminal-local Vselection_alist.
	(some_frame_on_display): Delete unused function.
	(Fx_own_selection_internal, Fx_get_selection_internal)
	(Fx_disown_selection_internal, Fx_selection_owner_p)
	(Fx_selection_exists_p): New optional frame arg.
	(frame_for_x_selection, Fx_clipboard_manager_save): New functions.
	(x_handle_selection_clear): Don't treat other terminals with the
	same keyboard specially.  Use the terminal-local Vselection_alist.
	(x_clear_frame_selections): Use Frun_hook_with_args.

	* xterm.c (x_term_init): Intern ATOM and CLIPBOARD_MANAGER atoms.

	* xterm.h: Add support for those atoms.

2011-05-26  Chong Yidong  <cyd@stupidchicken.com>

	* xselect.c: ICCCM-compliant handling of MULTIPLE targets.
	(converted_selections, conversion_fail_tag): New global variables.
	(x_selection_request_lisp_error): Free the above.
	(x_get_local_selection): Remove unnecessary code.
	(x_reply_selection_request): Args changed; handle arbitrary array
	of converted selections stored in converted_selections.
	Separate the XChangeProperty and SelectionNotify steps.
	(x_handle_selection_request): Rewrite to handle MULTIPLE target.
	(x_convert_selection): New function.
	(x_handle_selection_event): Simplify.
	(x_get_foreign_selection): Don't ignore incoming requests while
	waiting for an answer; this will fail when we implement
	SAVE_TARGETS, and seems unnecessary anyway.
	(selection_data_to_lisp_data): Recognize ATOM_PAIR type.
	(Vx_sent_selection_functions): Doc fix.

2011-05-26  Leo Liu  <sdl.web@gmail.com>

	* editfns.c (Ftranspose_regions): Allow empty regions.  (Bug#8699)

2011-05-25  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* dispextern.h (struct glyph_row): New member fringe_bitmap_periodic_p.

	* dispnew.c (shift_glyph_matrix, scrolling_window): Mark scrolled row
	for fringe update if it has periodic bitmap.
	(row_equal_p): Also compare left_fringe_offset,	right_fringe_offset,
	and fringe_bitmap_periodic_p.

	* fringe.c (get_fringe_bitmap_data): New function.
	(draw_fringe_bitmap_1, update_window_fringes): Use it.
	(update_window_fringes): Record periodicity of fringe bitmap in glyph
	row.  Mark glyph row for fringe update if periodicity changed.

	* xdisp.c (try_window_reusing_current_matrix): Don't mark scrolled row
	for fringe update unless it has periodic bitmap.

2011-05-25  Kenichi Handa  <handa@m17n.org>

	* xdisp.c (get_next_display_element): Set correct it->face_id for
	a static composition.

2011-05-24  Leo Liu  <sdl.web@gmail.com>

	* deps.mk (fns.o):
	* makefile.w32-in ($(BLD)/fns.$(O)): Include sha1.h.

	* fns.c (crypto_hash_function, Fsha1): New function.
	(Fmd5): Use crypto_hash_function.
	(syms_of_fns): Add Ssha1.

2011-05-22  Paul Eggert  <eggert@cs.ucla.edu>

	* gnutls.c: Remove unused macros.
	(fn_gnutls_transport_set_lowat, fn_gnutls_transport_set_pull_function):
	(fn_gnutls_transport_set_push_function) [!WINDOWSNT]:
	Remove macros that are defined and never used.
	Caught by gcc -Wunused-macros (GCC 4.6.0, Fedora 14).

2011-05-22  Chong Yidong  <cyd@stupidchicken.com>

	* xselect.c (syms_of_xselect): Remove unused symbol SAVE_TARGETS.
	(Fx_get_selection_internal): Minor cleanup.
	(Fx_own_selection_internal): Rename arguments for consistency with
	select.el.

2011-05-22  Paul Eggert  <eggert@cs.ucla.edu>

	* xselect.c (QSAVE_TARGETS): New static var, to fix build failure.

2011-05-22  Chong Yidong  <cyd@stupidchicken.com>

	* xselect.c (syms_of_xselect): Include character.h; use DEFSYM.

2011-05-21  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* dispnew.c (scrolling_window): Don't exclude the case that the
	last enabled row in the desired matrix touches the bottom boundary.

2011-05-21  Glenn Morris  <rgm@gnu.org>

	* Makefile.in ($(etc)/DOC): Make second command line even shorter.
	(SOME_MACHINE_OBJECTS): Replace FONT_OBJ by its maximal expansion,
	and add some more files.

2011-05-20  Eli Zaretskii  <eliz@gnu.org>

	* callproc.c (Fcall_process) [MSDOS]: Fix arguments to
	report_file_error introduced by the change from 2011-05-07.

2011-05-20  Paul Eggert  <eggert@cs.ucla.edu>

	* systime.h (Time): Define only if emacs is defined.
	This is to allow ../lib-src/profile.c to be compiled on FreeBSD,
	where the include path doesn't have X11/X.h by default.  See
	<http://lists.gnu.org/archive/html/emacs-devel/2011-05/msg00561.html>.

2011-05-20 Kenichi Handa  <handa@m17n.org>

	* composite.c (find_automatic_composition): Fix previous change.

2011-05-20  Glenn Morris  <rgm@gnu.org>

	* lisp.mk: New file, split from Makefile.in.
	* Makefile.in (lisp): Move to separate file, inserted by @lisp_frag@.
	(shortlisp): Remove.
	($(etc)/DOC): Edit lisp.mk rather than using $shortlisp.

2011-05-19  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (MSDOS_SUPPORT_REAL, MSDOS_SUPPORT, NS_SUPPORT)
	(REAL_MOUSE_SUPPORT, GPM_MOUSE_SUPPORT, MOUSE_SUPPORT, TOOLTIP_SUPPORT)
	(BASE_WINDOW_SUPPORT, X_WINDOW_SUPPORT, WINDOW_SUPPORT): Remove.
	(lisp): Set the order to that of loadup.el.
	(shortlisp): Make it a copy of $lisp.
	(SOME_MACHINE_LISP): Remove.
	($(etc)/DOC): Depend just on $lisp, not $SOME_MACHINE_LISP too.
	Use just $shortlisp, not $SOME_MACHINE_LISP too.

2011-05-18  Kenichi Handa  <handa@m17n.org>

	* composite.c (CHAR_COMPOSABLE_P): Add more check for efficiency.
	(BACKWARD_CHAR): Wrap the arg STOP by parenthesis.
	(find_automatic_composition): Mostly rewrite for efficiency.

2011-05-18  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in: Update dependencies.

2011-05-18  Christoph Scholtes  <cschol2112@googlemail.com>

	* menu.c: Include limits.h (fixes the MS-Windows build broken by
	revision 104625).

2011-05-18  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some integer overflow issues, such as string length overflow.

	* insdel.c (count_size_as_multibyte): Check for string overflow.

	* character.c (lisp_string_width): Check for string overflow.
	Use EMACS_INT, not int, for string indexes and lengths; in
	particular, 2nd arg is now EMACS_INT, not int.  Do not crash if
	the resulting string length overflows an EMACS_INT; instead,
	report a string overflow if no precision given.  When checking for
	precision exhaustion, use a check that cannot possibly have
	integer overflow.  (Bug#8675)
	* character.h (lisp_string_width): Adjust to new signature.

	* alloc.c (string_overflow): New function.
	(Fmake_string): Use it.  This doesn't change behavior, but saves
	a few bytes and will simplify future changes.
	* character.c (string_escape_byte8): Likewise.
	* lisp.h (string_overflow): New decl.

	Fixups, following up to the user-interface timestamp change.
	* nsterm.m (last_mouse_movement_time, ns_mouse_position): Use Time
	for UI timestamps, instead of unsigned long.
	* msdos.c (mouse_get_pos): Likewise.
	* w32inevt.c (movement_time, w32_console_mouse_position): Likewise.
	* w32gui.h (Time): Define by including "systime.h" rather than by
	declaring it ourselves.  (Bug#8664)

	* dispextern.h (struct image): Don't assume time_t <= unsigned long.
	* image.c (clear_image_cache): Likewise.

	* term.c (term_mouse_position): Don't assume time_t wraparound.

	Be more systematic about user-interface timestamps.
	Before, the code sometimes used 'Time', sometimes 'unsigned long',
	and sometimes 'EMACS_UINT', to represent these timestamps.
	This change causes it to use 'Time' uniformly, as that's what X uses.
	This makes the code easier to follow, and makes it easier to catch
	integer overflow bugs such as Bug#8664.
	* frame.c (Fmouse_position, Fmouse_pixel_position):
	Use Time, not unsigned long, for user-interface timestamps.
	* keyboard.c (last_event_timestamp, kbd_buffer_get_event): Likewise.
	(button_down_time, make_lispy_position, make_lispy_movement): Likewise.
	* keyboard.h (last_event_timestamp): Likewise.
	* menu.c (Fx_popup_menu) [!HAVE_X_WINDOWS]: Likewise.
	* menu.h (xmenu_show): Likewise.
	* term.c (term_mouse_position): Likewise.
	* termhooks.h (struct input_event.timestamp): Likewise.
	(struct terminal.mouse_position_hook): Likewise.
	* xmenu.c (create_and_show_popup_menu, xmenu_show): Likewise.
	* xterm.c (XTmouse_position, x_scroll_bar_report_motion): Likewise.
	* systime.h (Time): New decl.  Pull it in from <X11/X.h> if
	HAVE_X_WINDOWS, otherwise define it as unsigned long, which is
	what it was before.
	* menu.h, termhooks.h: Include "systime.h", for Time.

	* keyboard.c (make_lispy_event): Fix problem in integer overflow.
	Don't assume that the difference between two unsigned long values
	can fit into an integer.  At this point, we know button_down_time
	<= event->timestamp, so the difference must be nonnegative, so
	there's no need to cast the result if double-click-time is
	nonnegative, as it should be; check that it's nonnegative, just in
	case.  This bug is triggered when events are more than 2**31 ms
	apart (about 25 days).  (Bug#8664)

	* xselect.c (last_event_timestamp): Remove duplicate decl.
	(x_own_selection): Remove needless cast to unsigned long.

	* xmenu.c (set_frame_menubar): Use int, not EMACS_UINT, for indexes
	that always fit in int.  Use a sentinel instead of a counter, to
	avoid a temp and to allay GCC's concerns about possible int overflow.
	* frame.h (struct frame): Use int for menu_bar_items_used
	instead of EMACS_INT, since it always fits in int.

	* menu.c (grow_menu_items): Check for int overflow.

	* xmenu.c (set_frame_menubar): Don't mishandle vectors with no nils.

	* xterm.c: Use EMACS_INT for Emacs modifiers, and int for X modifiers.
	Before, the code was not consistent.  These values cannot exceed
	2**31 - 1 so there's no need to make them unsigned.
	(x_x_to_emacs_modifiers): Accept int and return EMACS_INT.
	(x_emacs_to_x_modifiers): Accept EMACS_INT and return int.
	(x_x_to_emacs_modifiers, x_emacs_to_x_modifiers): Reject non-integers
	as modifiers.
	* xterm.h (x_x_to_emacs_modifiers): Adjust to signature change.

	* lisp.h (XINT) [USE_LISP_UNION_TYPE]: Cast to EMACS_INT.
	(XUINT) [USE_LISP_UNION_TYPE]: Cast to EMACS_UINT.
	Otherwise, GCC 4.6.0 warns about printf (pI, XINT (...)),
	presumably because the widths might not match.

	* window.c (size_window): Avoid needless test at loop start.

2011-05-18  Courtney Bane  <emacs-bugs-7626@cbane.org>  (tiny change)

	* term.c (Fresume_tty): Restore hooks before reinitializing (bug#8687).

2011-05-12  Drew Adams  <drew.adams@oracle.com>

	* textprop.c (Fprevious_single_char_property_change): Doc fix (bug#8655).

2011-05-12  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* w32term.c (w32_draw_fringe_bitmap): Rename local vars `left' and
	`width' to `bar_area_x' and `bar_area_width', respectively.
	(x_scroll_run): Take account of fringe background extension.

	* xterm.c (x_draw_fringe_bitmap) [USE_TOOLKIT_SCROLL_BARS]:
	Rename local vars `left' and `width' to `bar_area_x' and
	`bar_area_width', respectively.
	(x_scroll_run) [USE_TOOLKIT_SCROLL_BARS]: Take account of fringe
	background extension.

2011-05-10  Jim Meyering  <meyering@redhat.com>

	* xdisp.c (x_intersect_rectangles): Fix typo "the the -> the".

2011-05-10  Juanma Barranquero  <lekktu@gmail.com>

	* image.c (Finit_image_library): Return t for built-in image types,
	like pbm and xbm.  (Bug#8640)

2011-05-09  Andreas Schwab  <schwab@linux-m68k.org>

	* w32menu.c (set_frame_menubar): Fix submenu allocation.

2011-05-07  Eli Zaretskii  <eliz@gnu.org>

	* w32console.c (Fset_screen_color): Doc fix.
	(Fget_screen_color): New function.
	(syms_of_ntterm): Defsubr it.

	* callproc.c (call_process_cleanup) [MSDOS]: Don't close and
	unlink the temporary file if Fcall_process didn't create it in the
	first place.
	(Fcall_process) [MSDOS]: Don't create tempfile if stdout of the
	child process will be redirected to a file specified with `:file'.
	Don't try to re-open tempfile in that case, and set fd[0] to -1 as
	cue to call_process_cleanup not to close that handle.

2011-05-07  Ben Key  <bkey76@gmail.com>

	* makefile.w32-in: The bootstrap-temacs rule now makes use of
	one of two shell specific rules, either bootstrap-temacs-CMD or
	bootstrap-temacs-SH.  The bootstrap-temacs-SH rule is identical
	to the previous implementation of the bootstrap-temacs rule.
	The bootstrap-temacs-CMD rule is similar to the previous
	implementation of the bootstrap-temacs rule except that it
	makes use of the ESC_CFLAGS variable instead of the CFLAGS
	variable.

	These changes, along with some changes to nt/configure.bat,
	nt/gmake.defs, and nt/nmake.defs, are required to extend my
	earlier fix to add support for --cflags and --ldflags options
	that include quotes so that it works whether make uses cmd or
	sh as the shell.

2011-05-06  Michael Albinus  <michael.albinus@gmx.de>

	* dbusbind.c (QCdbus_type_unix_fd): Declare static.
	(xd_remove_watch): Don't check QCdbus_type_unix_fd for SYMBOLP, it
	is a constant.
	(Fdbus_init_bus, xd_read_queued_messages): Bus can be a symbol or
	a string.  Handle both cases.
	(Fdbus_call_method_asynchronously, Fdbus_register_signal)
	(Fdbus_register_method): Use Qinvalid_function.

2011-05-06  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in: Update dependencies.
	(LISP_H): Add inttypes.h and stdin.h.
	(PROCESS_H): Add unistd.h.

2011-05-06  Eli Zaretskii  <eliz@gnu.org>

	* lread.c: Include limits.h (fixes the MS-Windows build broken by
	revision 104134).

2011-05-06  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c (Finit_image_library) [!HAVE_NTGUI]: Omit unused local.

	* term.c (vfatal): Remove stray call to va_end.
	It's not needed and the C Standard doesn't allow it here anyway.

	Use C99's va_copy to avoid undefined behavior on x86-64 GNU/Linux.
	* eval.c (verror): doprnt a copy of ap, not the original.  (Bug#8545)

	* eval.c (verror): OK to create a string of up to MOST_POSITIVE_FIXNUM
	bytes.

	* term.c: Don't include <stdarg.h>, as <lisp.h> does that.

	* callproc.c (Fcall_process): Use 'volatile' to avoid vfork clobbering.

	* process.c (Fformat_network_address): Fix typo: args2 -> *args2.

	* xmenu.c (set_frame_menubar): Fix typo: int * -> int (3 times).

	* coding.c (detect_coding_charset): Fix typo: * 2 -> *4 (Bug#8601).

	* charset.h (struct charset.code_space): Now has 15 elements, not 16.
	* charset.c (Fdefine_charset_internal): Don't initialize
	charset.code_space[15].  The value was garbage, on hosts with
	32-bit int (Bug#8600).

	* lread.c (read_integer): Be more consistent with string-to-number.
	Use string_to_number to do the actual conversion; this avoids
	rounding errors and fixes some other screwups.  Without this fix,
	for example, #x1fffffffffffffff was misread as -2305843009213693952.
	(digit_to_number): Move earlier, for benefit of read_integer.
	Return -1 if the digit is out of range for the base, -2 if it is
	not a digit in any supported base.  (Bug#8602)

	* doprnt.c (doprnt): Support arbitrary pI values, such as "I64".

	* dispnew.c (scrolling_window): Return 1 if we scrolled,
	to match comment at start of function.  This also removes a
	GCC warning about overflow in a 32+64-bit port.

	* lisp.h (EMACS_INT, EMACS_UINT, BITS_PER_EMACS_INT, pI): Simplify.

	* dbusbind.c: Do not use XPNTR on a value that may be an integer.
	Reported by Stefan Monnier in
	<http://lists.gnu.org/archive/html/emacs-devel/2011-04/msg00919.html>.
	(xd_remove_watch, Fdbus_init_bus, xd_read_queued_messages):
	Use SYMBOLP-guarded XSYMBOL, not XPNTR.

	* lisp.h (EMACS_INTPTR): Remove.  All uses changed to intptr_t.
	(EMACS_UINTPTR): Likewise, with uintptr_t.

	* lisp.h: Prefer 64-bit EMACS_INT if available.
	(EMACS_INT, EMACS_UINT, BITS_PER_EMACS_INT, pI): Define to 64-bit
	on 32-bit hosts that have 64-bit int, so that they can access
	large files.
	However, temporarily disable this change unless the temporary
	symbol WIDE_EMACS_INT is defined.

	* lread.c, process.c: Do not include <inttypes.h>; lisp.h does it now.

	Prefer intptr_t/uintptr_t for integers the same widths as pointers.
	This removes an assumption that EMACS_INT and long are the same
	width as pointers.  The assumption is true for Emacs porting targets
	now, but we want to make other targets possible.
	* lisp.h: Include <inttypes.h>, for INTPTR_MAX, UINTPTR_MAX.
	(EMACS_INTPTR, EMACS_UINTPTR): New macros.
	In the rest of the code, change types of integers that hold casted
	pointers to EMACS_INTPTR and EMACS_UINTPTR, systematically
	replacing EMACS_INT, long, EMACS_UINT, and unsigned long.
	(XTYPE): Don't cast arg to EMACS_UINT; normally is not needed.
	(XSET): Cast type of XTYPE arg to EMACS_INTPTR; it is needed here.
	No need to cast type when ORing.
	(XPNTR): Return a value of type EMACS_INTPTR or EMACS_UINTPTR.
	* alloc.c (lisp_align_malloc): Remove a no-longer-needed cast.
	* doc.c (store_function_docstring): Use EMACS_INTPTR, so as not to
	assume EMACS_INT is the same width as char *.
	* gtkutil.c (xg_gtk_scroll_destroy, xg_tool_bar_button_cb):
	(xg_tool_bar_callback, xg_tool_bar_help_callback, xg_make_tool_item):
	Remove no-longer-needed casts.
	(xg_create_scroll_bar, xg_tool_bar_button_cb, xg_tool_bar_callback):
	(xg_tool_bar_help_callback, xg_make_tool_item):
	Use EMACS_INTPTR to hold an integer
	that will be cast to void *; this can avoid a GCC warning
	if EMACS_INT is not the same width as void *.
	* menu.c (find_and_call_menu_selection): Remove no-longer-needed cast.
	* xdisp.c (display_echo_area_1, resize_mini_window_1):
	(current_message_1, set_message_1):
	Use a local to convert to proper width without a cast.
	* xmenu.c (dialog_selection_callback): Likewise.

	* sysdep.c (get_random): Don't assume EMACS_INT is no wider than long.
	Also, don't assume VALBITS / RAND_BITS is less than 5,
	and don't rely on undefined behavior when shifting a 1 left into
	the sign bit.
	* lisp.h (get_random): Change signature to match.

	* lread.c (hash_string): Use size_t, not int, for hash computation.
	Normally we prefer signed values; but hashing is special, because
	it's better to use unsigned division on hash table sizes so that
	the remainder is nonnegative.  Also, size_t is the natural width
	for hashing into memory.  The previous code used 'int', which doesn't
	retain enough info to hash well into very large tables.
	(oblookup, oblookup_last_bucket_number, Funintern): Likewise.

	* dbusbind.c: Don't possibly lose pointer info when converting.
	(xd_remove_watch, Fdbus_init_bus, xd_read_queued_messages):
	Use XPNTR rather than XHASH, so that the high-order bits of
	the pointer aren't lost when converting through void *.

	* eval.c (Fautoload): Don't double-shift a pointer.

	* fns.c (Frandom): Let EMACS_UINT be wider than unsigned long.

2011-05-06  Juanma Barranquero  <lekktu@gmail.com>

	* gnutls.c (DEF_GNUTLS_FN):
	* image.c (DEF_IMGLIB_FN): Make function pointers static.

2011-05-05  Andreas Schwab  <schwab@linux-m68k.org>

	* lread.c (lisp_file_lexically_bound_p): Stop scanning at end
	marker.  (Bug#8610)

2011-05-05 Eli Zaretskii  <eliz@gnu.org>

	* w32heap.c (allocate_heap) [USE_LISP_UNION_TYPE || USE_LSB_TAG]:
	New version that can reserve upto 2GB of heap space.

2011-05-05  Chong Yidong  <cyd@stupidchicken.com>

	* nsfns.m (Fns_read_file_name): Doc fix (Bug#8534).

2011-05-05  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (fn_gnutls_certificate_set_x509_key_file): Add alias to
	`gnutls_certificate_set_x509_key_file'.

2011-05-05  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in ($(BLD)/image.$(O), $(BLD)/process.$(O)):
	Update dependencies.

2011-05-04  Juanma Barranquero  <lekktu@gmail.com>

	* gnutls.h (emacs_gnutls_write, emacs_gnutls_read):
	* gnutls.c (emacs_gnutls_write, emacs_gnutls_read):
	Remove unused parameter `fildes'.
	* process.c (read_process_output, send_process): Don't pass it.

2011-05-04  Juanma Barranquero  <lekktu@gmail.com>

	Fix previous change: the library cache is defined in w32.c.
	* image.c (CACHE_IMAGE_TYPE) [!HAVE_NTGUI]: Define to noop.
	(Finit_image_library): Wrap Vlibrary_cache on "#ifdef HAVE_NTGUI".

2011-05-04  Juanma Barranquero  <lekktu@gmail.com>

	Implement dynamic loading of GnuTLS on Windows.

	* gnutls.h (GNUTLS_EMACS_ERROR_NOT_LOADED): New macro.
	(emacs_gnutls_write, emacs_gnutls_read): Mark as extern.
	(emacs_gnutls_record_check_pending, emacs_gnutls_transport_set_errno):
	Declare.

	* gnutls.c (Qgnutls_dll): Define.
	(DEF_GNUTLS_FN, LOAD_GNUTLS_FN): New macros.
	(gnutls_*): Declare function pointers.
	(init_gnutls_functions): New function to initialize function pointers.
	(emacs_gnutls_handshake, Fgnutls_error_string, Fgnutls_deinit)
	(emacs_gnutls_global_init, Fgnutls_bye): Use function pointers.
	(emacs_gnutls_record_check_pending, emacs_gnutls_transport_set_errno):
	Wrappers for gnutls_record_check_pending and gnutls_transport_set_errno.
	(emacs_gnutls_write, emacs_gnutls_read)
	(emacs_gnutls_handle_error, Fgnutls_error_fatalp)
	(Fgnutls_available_p): New function.
	(Fgnutls_boot): Call Fgnutls_available_p.  Use function pointers.
	(syms_of_gnutls) <Qgnutls_dll>: Initialize and staticpro it.
	(syms_of_gnutls) <Sgnutls_available_p>: defsubr it.

	* image.c: Include w32.h.
	(Vimage_type_cache): Delete.
	(syms_of_image) <Vimage_type_cache>: Don't initialize and staticpro it.
	(CACHE_IMAGE_TYPE, Finit_image_library): Use Vlibrary_cache instead.
	(w32_delayed_load): Move to w32.c.

	* w32.h (VlibraryCache, QCloaded_from, w32_delayed_load): Declare.

	* w32.c (QCloaded_from, Vlibrary_cache): Define.
	(w32_delayed_load): Move from image.c.  When loading a library, record
	its filename in the :loaded-from property of the library id.
	(globals_of_w32) <QCloaded_from, Vlibrary_cache>:
	Initialize and staticpro them.
	(emacs_gnutls_pull, emacs_gnutls_push): Call emacs_gnutls_* functions.

	* process.c: Include lisp.h before w32.h, not after.
	(wait_reading_process_output): Call emacs_gnutls_record_check_pending
	instead of gnutls_record_check_pending.

	* callproc.c, emacs.c: Include lisp.h before w32.h, not after.

2011-05-04  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (Fgnutls_boot): Support :keylist and :crlfiles options
	instead of :keyfiles.  Give GnuTLS the keylist and the CRL lists
	as passed in.

2011-05-03  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (x_set_frame_alpha): Do not set property on anything
	else than FRAME_X_OUTER_WINDOW (Bug#8608).

2011-05-02  Juanma Barranquero  <lekktu@gmail.com>

	* sysdep.c (get_tty_size) [WINDOWSNT]: Implement.  (Bug#8596)

2011-05-02  Juanma Barranquero  <lekktu@gmail.com>

	* gnutls.c (Qgnutls_log_level, Qgnutls_code, Qgnutls_anon)
	(Qgnutls_x509pki, Qgnutls_e_interrupted, Qgnutls_e_again)
	(Qgnutls_e_invalid_session, Qgnutls_e_not_ready_for_handshake)
	(gnutls_global_initialized, Qgnutls_bootprop_priority)
	(Qgnutls_bootprop_trustfiles, Qgnutls_bootprop_keyfiles)
	(Qgnutls_bootprop_callbacks, Qgnutls_bootprop_loglevel)
	(Qgnutls_bootprop_hostname, Qgnutls_bootprop_verify_flags)
	(Qgnutls_bootprop_verify_error, Qgnutls_bootprop_verify_hostname_error)
	(Qgnutls_bootprop_callbacks_verify): Make static.

2011-05-01  Andreas Schwab  <schwab@linux-m68k.org>

	* callproc.c: Indentation fixup.

	* sysdep.c (wait_for_termination_1): Make static.
	(wait_for_termination, interruptible_wait_for_termination):
	Move after wait_for_termination_1.

2011-05-01  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* sysdep.c (interruptible_wait_for_termination): New function
	which is like wait_for_termination, but allows keyboard
	interruptions.

	* callproc.c (Fcall_process): Add (:file "file") as an option for
	the STDOUT buffer.
	(Fcall_process_region): Ditto.

2011-04-30  Eli Zaretskii  <eliz@gnu.org>

	* dosfns.c (Fint86, Fdos_memget, Fdos_memput): Use `ASIZE (FOO)'
	rather than `XVECTOR (FOO)->size'.

	* process.c: Remove HAVE_INTTYPES_H condition from inclusion of
	inttypes.h, as a gnulib replacement is used if it not available in
	system headers.

2011-04-21  Eli Zaretskii  <eliz@gnu.org>

	Lift the MOST_POSITIVE_FIXNUM/4 limitation on visited files.
	* fileio.c (Finsert_file_contents): Don't limit file size to 1/4
	of MOST_POSITIVE_FIXNUM.  (Bug#8528)

	* coding.c (coding_alloc_by_realloc): Error out if destination
	will grow beyond MOST_POSITIVE_FIXNUM.
	(decode_coding_emacs_mule): Abort if there isn't enough place in
	charbuf for the composition carryover bytes.  Reserve an extra
	space for up to 2 characters produced in a loop.
	(decode_coding_iso_2022): Abort if there isn't enough place in
	charbuf for the composition carryover bytes.

2011-04-21  Eli Zaretskii  <eliz@gnu.org>

	* doprnt.c (doprnt) [!HAVE_LONG_LONG_INT]: Error out instead of
	aborting when %lld or %lll format is passed.
	[!HAVE_UNSIGNED_LONG_LONG_INT]: Error out instead of aborting when
	%llo or %llx format is passed.  (Bug#8545)

	* window.c (window_scroll_line_based): Use a marker instead of
	simple variables to record original value of point.  (Bug#7952)

	* doprnt.c (doprnt): Fix the case where a multibyte sequence
	produced by %s or %c overflows available buffer space.  (Bug#8545)

2011-04-28  Paul Eggert  <eggert@cs.ucla.edu>

	* doprnt.c (doprnt): Omit useless test; int overflow check (Bug#8545).
	(SIZE_MAX): Move defn after all includes, as they might #define it.

2011-04-28  Juanma Barranquero  <lekktu@gmail.com>

	* w32.c (init_environment): Warn about defaulting HOME to C:\.

2011-04-28  Juanma Barranquero  <lekktu@gmail.com>

	* keyboard.c (Qdelayed_warnings_hook): Define.
	(command_loop_1): Run `delayed-warnings-hook'
	if Vdelayed_warnings_list is non-nil.
	(syms_of_keyboard) <delayed-warnings-hook>: DEFSYM it.
	(syms_of_keyboard) <delayed-warnings-list>: DEFVAR_LISP it.

2011-04-28  Eli Zaretskii  <eliz@gnu.org>

	* doprnt.c (doprnt): Don't return value smaller than the buffer
	size if the message was truncated.  (Bug#8545).

2011-04-28  Juanma Barranquero  <lekktu@gmail.com>

	* w32fns.c (Fx_change_window_property, Fx_delete_window_property)
	(Fx_window_property): #if-0 the whole functions, not just the bodies.

2011-04-27  Paul Eggert  <eggert@cs.ucla.edu>

	* doprnt.c (doprnt): Support "ll" length modifier, for long long.

2011-04-27  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in: Update dependencies.

2011-04-27  Eli Zaretskii  <eliz@gnu.org>

	Improve `doprnt' and its usage.  (Bug#8545)
	* doprnt.c (doprnt): Make sure `format' is never accessed beyond
	`format_end'.  Remove support for %l as a conversion specifier.
	Don't use xrealloc.  Improve diagnostics when the %l size modifier
	is used.  Update the commentary.

	* eval.c (verror): Simplify calculation of size_t.

	* coding.c (Ffind_operation_coding_system): Fix diagnostic error
	messages.

2011-04-27  Yoshiaki Kasahara  <kasahara@nc.kyushu-u.ac.jp>  (tiny change)

	* buffer.c (init_buffer) [USE_MMAP_FOR_BUFFERS]: Adjust to aliasing
	change.

2011-04-27  Paul Eggert  <eggert@cs.ucla.edu>

	* nsmenu.m: Replace all uses of XVECTOR with ASIZE and AREF.
	This makes this file independent of the recent pseudovector change.

2011-04-26  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (handle_user_signal): Fix pointer signedness problem.

	* gnutls.c (emacs_gnutls_handle_error): Remove unused local.
	(Fgnutls_boot): gnutls_certificate_verify_peers2 wants unsigned *.
	Remove unused local.
	(emacs_gnutls_write): Don't use uninitialized rtnval if nbyte <= 0.

	* lisp.h: Fix a problem with aliasing and vector headers.  (Bug#8546)
	GCC 4.6.0 optimizes based on type-based alias analysis.
	For example, if b is of type struct buffer * and v of type struct
	Lisp_Vector *, then gcc -O2 was incorrectly assuming that &b->size
	!= &v->size, and therefore "v->size = 1; b->size = 2; return
	v->size;" must therefore return 1.  This assumption is incorrect
	for Emacs, since it type-puns struct Lisp_Vector * with many other
	types.  To fix this problem, this patch adds a new type struct
	vectorlike_header that documents the constraints on layout of vectors
	and pseudovectors, and helps optimizing compilers not get fooled
	by Emacs's type punning.  It also adds the macros XSETTYPED_PVECTYPE
	XSETTYPED_PSEUDOVECTOR, TYPED_PSEUDOVECTORP, for similar reasons.
	* lisp.h (XSETTYPED_PVECTYPE): New macro, specifying the name of
	the size member.
	(XSETPVECTYPE): Rewrite in terms of new macro.
	(XSETPVECTYPESIZE): New macro, specifying both type and size.
	This is a bit clearer, and further avoids the possibility of
	undesirable aliasing.
	(XSETTYPED_PSEUDOVECTOR): New macro, specifying the size.
	(XSETPSEUDOVECTOR): Rewrite in terms of XSETTYPED_PSEUDOVECTOR.
	(XSETSUBR): Rewrite in terms of XSETTYPED_PSEUDOVECTOR and XSIZE,
	since Lisp_Subr is a special case (no "next" field).
	(ASIZE): Now uses header.size rather than size.
	All previous uses of XVECTOR (foo)->size replaced to use this macro,
	to avoid the hassle of writing XVECTOR (foo)->header.size.
	(struct vectorlike_header): New type.
	(TYPED_PSEUDOVECTORP): New macro, also specifying the C type of the
	object, to help avoid aliasing.
	(PSEUDOVECTORP): Rewrite in terms of TYPED_PSEUDOVECTORP.
	(SUBRP): Likewise, since Lisp_Subr is a special case.
	* lisp.h (struct Lisp_Vector, struct Lisp_Char_Table):
	(struct Lisp_Sub_Char_Table, struct Lisp_Bool_Vector):
	(struct Lisp_Hash_Table): Combine first two members into a single
	struct vectorlike_header member.  All uses of "size" and "next" members
	changed to be "header.size" and "header.next".
	* buffer.h (struct buffer): Likewise.
	* font.h (struct font_spec, struct font_entity, struct font): Likewise.
	* frame.h (struct frame): Likewise.
	* process.h (struct Lisp_Process): Likewise.
	* termhooks.h (struct terminal): Likewise.
	* window.c (struct save_window_data, struct saved_window): Likewise.
	* window.h (struct window): Likewise.
	* alloc.c (allocate_buffer, Fmake_bool_vector, allocate_pseudovector):
	Use XSETPVECTYPESIZE, not XSETPVECTYPE, to avoid aliasing problems.
	* buffer.c (init_buffer_once): Likewise.
	* lread.c (defsubr): Use XSETTYPED_PVECTYPE, since Lisp_Subr is a
	special case.
	* process.c (Fformat_network_address): Use local var for size,
	for brevity.

	* bytecode.c (exec_byte_code): Don't use XVECTOR before CHECK_VECTOR.

	Make the Lisp reader and string-to-float more consistent (Bug#8525)
	* data.c (atof): Remove decl; no longer used or needed.
	(digit_to_number): Move to lread.c.
	(Fstring_to_number): Use new string_to_number function, to be
	consistent with how the Lisp reader treats infinities and NaNs.
	Do not assume that floating-point numbers represent EMACS_INT
	without losing information; this is not true on most 64-bit hosts.
	Avoid double-rounding errors, by insisting on integers when
	parsing non-base-10 numbers, as the documentation specifies.
	* lisp.h (string_to_number): New decl, replacing ...
	(isfloat_string): Remove.
	* lread.c: Include <inttypes.h>, for uintmax_t and strtoumax.
	(read1): Do not accept +. and -. as integers; this
	appears to have been a coding error.  Similarly, do not accept
	strings like +-1e0 as floating point numbers.  Do not report
	overflow for integer overflows unless the base is not 10 which
	means we have no simple and reliable way to continue.
	Break out the floating-point parsing into a new
	function string_to_number, so that Fstring_to_number parses
	floating point numbers consistently with the Lisp reader.
	(digit_to_number): Move here from data.c.  Make it static inline.
	(E_CHAR, EXP_INT): Remove, replacing with ...
	(E_EXP): New macro, to solve the "1.0e+" problem mentioned below.
	(string_to_number): New function, replacing isfloat_string.
	This function checks for valid syntax and produces the resulting
	Lisp float number too.  Rework it so that string-to-number
	no longer mishandles examples like "1.0e+".  Use strtoumax,
	so that overflow for non-base-10 numbers is reported only when
	there's no portable and simple way to convert to floating point.

	* textprop.c (set_text_properties_1): Rewrite for clarity,
	and to avoid GCC warning about integer overflow.

	* intervals.h (struct interval): Use EMACS_INT for members
	where EMACS_UINT might cause problems.  See
	<http://lists.gnu.org/archive/html/emacs-devel/2011-04/msg00514.html>.
	(CHECK_TOTAL_LENGTH): Remove cast to EMACS_INT; no longer needed.
	* intervals.c (interval_deletion_adjustment): Now returns EMACS_INT.
	All uses changed.
	(offset_intervals): Tell GCC not to worry about length overflow
	when negating a negative length.

	* alloc.c (overrun_check_malloc, overrun_check_realloc): Now static.
	(overrun_check_free): Likewise.

	* alloc.c (SDATA_SIZE) [!GC_CHECK_STRING_BYTES]: Avoid runtime check
	in the common case where SDATA_DATA_OFFSET is a multiple of Emacs
	word size.

	* gnutls.c: Fix problems found by GCC 4.6.0 on Ubuntu 10.10.
	(gnutls_make_error): Rename local to avoid shadowing.
	(gnutls_emacs_global_deinit): ifdef out; not used.
	(Fgnutls_boot): Use const for pointer to readonly storage.
	Comment out unused local.  Fix pointer signedness problems.

	* lread.c (openp): Don't stuff size_t into an 'int'.
	Use <= on length, not < on length + 1, to avoid GCC 4.6.0 warning
	about possible signed overflow.

	* gtkutil.c: Fix problems found by GCC 4.6.0 on Ubuntu 10.10.
	(GDK_KEY_g): Don't define if already defined.
	(xg_prepare_tooltip): Avoid pointer signedness problem.
	(xg_set_toolkit_scroll_bar_thumb): Redo to avoid two casts.

	* process.c (Fnetwork_interface_info): Avoid left-shift undefined
	behavior with 1 << 31.  GCC 4.6.0 warns about this on 32-bit hosts.

	* xfns.c (Fx_window_property): Simplify a bit,
	to make a bit faster and to avoid GCC 4.6.0 warning.
	* xselect.c (x_get_window_property, x_handle_dnd_message): Likewise.

	* fns.c (internal_equal): Don't assume size_t fits in int.

	* alloc.c (compact_small_strings): Tighten assertion a little.

	Replace pEd with more-general pI, and fix some printf arg casts.
	* lisp.h (pI): New macro, generalizing old pEd macro to other
	conversion specifiers.  For example, use "...%"pI"d..." rather
	than "...%"pEd"...".
	(pEd): Remove.  All uses replaced with similar uses of pI.
	* src/m/amdx86-64.h, src/m/ia64.h, src/m/ibms390x.h: Likewise.
	* alloc.c (check_pure_size): Don't overflow by converting size to int.
	* bidi.c (bidi_dump_cached_states): Use pI to avoid cast.
	* data.c (Fnumber_to_string): Use pI instead of if-then-else-abort.
	* dbusbind.c (xd_append_arg): Use pI to avoid cast.
	(Fdbus_method_return_internal, Fdbus_method_error_internal): Likewise.
	* font.c (font_unparse_xlfd): Avoid potential buffer overrun on
	64-bit hosts.
	(font_unparse_xlfd, font_unparse_fcname): Use pI to avoid casts.
	* keyboard.c (record_char, modify_event_symbol): Use pI to avoid casts.
	* print.c (safe_debug_print, print_object): Likewise.
	(print_object): Don't overflow by converting EMACS_INT or EMACS_UINT
	to int.
	Use pI instead of if-then-else-abort.  Use %p to avoid casts,
	avoiding the 0 flag, which is not portable.
	* process.c (Fmake_network_process): Use pI to avoid cast.
	* region-cache.c (pp_cache): Likewise.
	* xdisp.c (decode_mode_spec): Likewise.
	* xrdb.c (x_load_resources) [USE_MOTIF]: Use pI to avoid undefined
	behavior on 64-bit hosts with printf arg.
	* xselect.c (x_queue_event): Use %p to avoid casts, avoiding 0 flag.
	(x_stop_queuing_selection_requests): Likewise.
	(x_get_window_property): Don't truncate byte count to an 'int'
	when tracing.

	* frame.c (frame_name_fnn_p): Get rid of strtol, which isn't right
	here, since it parses constructs like leading '-' and spaces,
	which are not wanted; and it overflows with large numbers.
	Instead, simply match F[0-9]+, which is what is wanted anyway.

	* alloc.c: Remove unportable assumptions about struct layout.
	(SDATA_SELECTOR, SDATA_DATA_OFFSET): New macros.
	(SDATA_OF_STRING, SDATA_SIZE, allocate_string_data):
	(allocate_vectorlike, make_pure_vector): Use the new macros,
	plus offsetof, to remove unportable assumptions about struct layout.
	These assumptions hold on all porting targets that I know of, but
	they are not guaranteed, they're easy to remove, and removing them
	makes further changes easier.

	* alloc.c (BLOCK BYTES): Fix typo by changing "ablock" to "ablocks".
	This doesn't fix a bug but makes the code clearer.
	(string_overrun_cookie): Now const.  Use initializers that
	don't formally overflow signed char, to avoid warnings.
	(allocate_string_data) [GC_CHECK_STRING_OVERRUN]: Fix typo that
	can cause Emacs to crash when string overrun checking is enabled.
	(allocate_buffer): Don't assume sizeof (struct buffer) is a
	multiple of sizeof (EMACS_INT); it need not be, if
	alignof(EMACS_INT) < sizeof (EMACS_INT).
	(check_sblock, check_string_bytes, check_string_free_list): Protoize.

2011-04-26  Juanma Barranquero  <lekktu@gmail.com>

	* keyboard.c (QCrtl): Rename from Qrtl.  All uses changed.

2011-04-26  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (emacs_gnutls_handshake): Return an error if we're not
	supposed to be handshaking.  (Bug#8556)
	Reported by Paul Eggert <eggert@cs.ucla.edu>.

2011-04-26  Daniel Colascione  <dan.colascione@gmail.com>

	* lisp.h (Qdebug): List symbol.
	* eval.c (Qdebug): Restore global linkage.
	* keyboard.c (debug-on-event): New variable.
	(handle_user_signal): Break into debugger when debug-on-event
	matches the current signal symbol.

2011-04-25  Dan Nicolaescu  <dann@ics.uci.edu>

	* alloc.c (check_sblock, check_string_bytes)
	(check_string_free_list): Convert to standard C.

2011-04-25  Teodor Zlatanov  <tzz@lifelogs.com>

	* w32.c (emacs_gnutls_push): Fix typo.

2011-04-25  Eli Zaretskii  <eliz@gnu.org>

	* gnutls.c (emacs_gnutls_handshake): Avoid compiler warnings about
	"cast to pointer from integer of different size".

	Improve doprnt and its use in verror.  (Bug#8545)
	* doprnt.c (doprnt): Document the set of format control sequences
	supported by the function.  Use SAFE_ALLOCA instead of always
	using `alloca'.

	* eval.c (verror): Don't limit the buffer size at size_max-1, that
	is one byte too soon.  Don't use xrealloc; instead xfree and
	xmalloc anew.

2011-04-24  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.h: Add GNUTLS_STAGE_CALLBACKS enum to denote we're in the
	callbacks stage.

	* gnutls.c: Renamed global_initialized to
	gnutls_global_initialized.  Added internals for the
	:verify-hostname-error, :verify-error, and :verify-flags
	parameters of `gnutls-boot' and documented those parameters in the
	docstring.  Start callback support.
	(emacs_gnutls_handshake): Add Woe32 support. Retry handshake
	unless a fatal error occured. Call gnutls_alert_send_appropriate
	on error. Return error code.
	(emacs_gnutls_write): Call emacs_gnutls_handle_error.
	(emacs_gnutls_read): Likewise.
	(Fgnutls_boot): Return handshake error code.
	(emacs_gnutls_handle_error): New function.
	(wsaerror_to_errno): Likewise.

	* w32.h (emacs_gnutls_pull): Add prototype.
	(emacs_gnutls_push): Likewise.

	* w32.c (emacs_gnutls_pull): New function for GnuTLS on Woe32.
	(emacs_gnutls_push): Likewise.

2011-04-24  Claudio Bley  <claudio.bley@gmail.com>  (tiny change)

	* process.c (wait_reading_process_output): Check if GnuTLS
	buffered some data internally if no FDs are set for TLS
	connections.

	* makefile.w32-in (OBJ2): Add gnutls.$(O).
	(LIBS): Link to USER_LIBS.
	($(BLD)/gnutls.$(0)): New target.

2011-04-24  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_single_display_spec): Rename the
	display_replaced_before_p argument into display_replaced_p, to
	make it consistent with the commentary.  Fix typos in the
	commentary.

	* textprop.c (syms_of_textprop): Remove dead code.
	(copy_text_properties): Delete obsolete commentary about an
	interface that was deleted long ago.  Fix typos in the description
	of arguments.

	* msdos.c (XMenuActivate, XMenuAddSelection): Adjust argument list
	to changes in oldXMenu/XMenu.h from 2011-04-16.
	<menu_help_message, prev_menu_help_message>: Constify.
	(IT_menu_make_room): menu->help_text is now `const char **';
	adjust.

	* msdos.h (XMenuActivate, XMenuAddSelection): Adjust prototypes
	to changes in oldXMenu/XMenu.h from 2011-04-16.
	(struct XMenu): Declare `help_text' `const char **'.

	* xfaces.c <Qunspecified>: Make extern again.

	* syntax.c: Include sys/types.h before including regex.h, as
	required by Posix.

	* doc.c (get_doc_string): Improve the format passed to `error'.

	* doprnt.c (doprnt): Improve commentary.

	* term.c (init_tty) [MSDOS]: Fix 1st argument to maybe_fatal.

	* Makefile.in (TAGS): Depend on $(M_FILE) and $(S_FILE), and scan
	them with etags.

	* makefile.w32-in (globals.h): Add a dummy recipe, to make any
	changes in globals.h immediately force recompilation.
	(TAGS): Depend on $(CURDIR)/m/intel386.h and
	$(CURDIR)/s/ms-w32.h.
	(TAGS-gmake): Scan $(CURDIR)/m/intel386.h and $(CURDIR)/s/ms-w32.h.

	* character.c (Fchar_direction): Function deleted.
	(syms_of_character): Don't defsubr it.
	<char-direction-table>: Deleted.

2011-04-23  Eli Zaretskii  <eliz@gnu.org>

	Fix doprnt so it could be used again safely in `verror'.  (Bug#8435)
	* doprnt.c: Include limits.h.
	(SIZE_MAX): New macro.
	(doprnt): Return a size_t value.  2nd arg is now size_t.
	Many local variables are now size_t instead of int or unsigned.
	Improve overflow protection.  Support `l' modifier for integer
	conversions.  Support %l conversion.  Don't assume an EMACS_INT
	argument for integer conversions and for %c.

	* lisp.h (doprnt): Restore prototype.

	* makefile.w32-in ($(BLD)/callint.$(O)): Depend on
	$(SRC)/character.h.

	* Makefile.in (base_obj): Add back doprnt.o.

	* deps.mk (doprnt.o): Add back prerequisites.
	(callint.o): Depend on character.h.

	* eval.c (internal_lisp_condition_case): Include the handler
	representation in the error message.
	(verror): Call doprnt instead of vsnprintf.  Fix an off-by-one bug
	when breaking from the loop.

	* xdisp.c (vmessage): Call doprnt instead of vsnprintf.

	* callint.c (Fcall_interactively): When displaying error message
	about invalid control letter, pass the character's codepoint, not
	a pointer to its multibyte form.  Improve display of the character
	in octal and display also its hex code.

	* character.c (char_string): Use %x to display the (unsigned)
	codepoint of an invalid character, to avoid displaying a bogus
	negative value.

	* font.c (check_otf_features): Pass SDATA of SYMBOL_NAME to
	`error', not SYMBOL_NAME itself.

	* coding.c (Fencode_sjis_char, Fencode_big5_char): Use %c for
	character arguments to `error'.

	* charset.c (check_iso_charset_parameter): Fix incorrect argument
	to `error' in error message about FINAL_CHAR argument.  Make sure
	FINAL_CHAR is a character, and use %c when it is passed as
	argument to `error'.

2011-04-23  Eli Zaretskii  <eliz@gnu.org>

	* s/ms-w32.h (localtime): Redirect to sys_localtime.

	* w32.c: Include <time.h>.
	(sys_localtime): New function.

2011-04-23  Chong Yidong  <cyd@stupidchicken.com>

	* xdisp.c (init_xdisp): Initialize echo_area_window (Bug#6451).

	* buffer.c (syms_of_buffer): Doc fix (Bug#6902).

2011-04-23  Samuel Thibault  <sthibault@debian.org>  (tiny change)

	* sysdep.c (wait_for_termination): On GNU Hurd, kill returns -1 on
	zombies (Bug#8467).

2011-04-19  Eli Zaretskii  <eliz@gnu.org>

	* syntax.h (SETUP_SYNTAX_TABLE_FOR_OBJECT): Fix setting of
	gl_state.e_property when gl_state.object is Qt.

	* insdel.c (make_gap_larger): Remove limitation of buffer size
	to <= INT_MAX.

2011-04-18  Chong Yidong  <cyd@stupidchicken.com>

	* xdisp.c (lookup_glyphless_char_display)
	(produce_glyphless_glyph): Handle cons cell entry in
	glyphless-char-display.
	(Vglyphless_char_display): Document it.

	* term.c (produce_glyphless_glyph): Handle cons cell entry in
	glyphless-char-display.

2011-04-17  Chong Yidong  <cyd@stupidchicken.com>

	* xdisp.c (get_next_display_element): Remove unnecessary ifdefs.

	* termhooks.h (FRAME_WINDOW_P): Remove duplicated definitions.

	* dispextern.h (FACE_SUITABLE_FOR_ASCII_CHAR_P): Add missing
	definition for no-X builds.

2011-04-16  Paul Eggert  <eggert@cs.ucla.edu>

	Static checks with GCC 4.6.0 and non-default toolkits.

	* s/sol2-6.h, s/unixware.h (PTY_TTY_NAME_SPRINTF): Protoize decl.

	* process.c (keyboard_bit_set): Define only if SIGIO.
	(send_process_trap): Mark it with NO_RETURN if it doesn't return.
	(send_process): Repair possible setjmp clobbering.

	* s/usg5-4-common.h (SETUP_SLAVE_PTY): Don't pass extra arg to 'fatal'.

	* eval.c: Include <stdio.h>, for vsnprintf on non-GNU/Linux hosts.

	* data.c (arith_error): Mark with NO_RETURN if it doesn't return.

	* alloc.c (bytes_used_when_full, SPARE_MEMORY, BYTES_USED):
	Define only if needed.

	* sysdep.c (_FILE_OFFSET_BITS): Make this hack even uglier
	by pacifying GCC about it.  Maybe it's time to retire it?
	* xfaces.c (USG, __TIMEVAL__): Likewise.

	* dispextern.h (struct redisplay_interface): Rename param
	to avoid shadowing.
	* termhooks.h (struct terminal): Likewise.
	* xterm.c (xembed_send_message): Likewise.

	* insdel.c (make_gap_smaller): Define only if
	USE_MMAP_FOR_BUFFERS || REL_ALLOC || DOUG_LEA_MALLOC.

	* keyboard.c (read_char): Make a var volatile so longjmp won't clobber
	it.

	* emacs.c (MAX_HEAP_BSS_DIFF, my_edata): Move to where they're used,
	so that we aren't warned about unused symbols.

	* xfns.c (Fx_file_dialog): Rename local to avoid shadowing.

	* xdisp.c (x_produce_glyphs): Mark var as initialized (Bug#8512).

	* xfns.c (x_real_positions): Mark locals as initialized.

	* xmenu.c (xmenu_show): Don't use uninitialized vars.

	* xterm.c: Fix problems found by static analysis with other toolkits.
	(toolkit_scroll_bar_interaction): Define and use only if USE_X_TOOLKIT.
	(x_dispatch_event): Declare static if USE_GTK, and
	define if USE_GTK || USE_X_TOOLKIT.
	(SET_SAVED_BUTTON_EVENT): Define only if USE_X_TOOLKIT || USE_GTK.
	* xterm.h (x_dispatch_event): Extern only if USE_X_TOOLKIT.
	* xterm.c, xterm.h (x_mouse_leave): Bring this function back, but only
	if defined HAVE_MENUS && !defined USE_X_TOOLKIT && !defined USE_GTK.

	* xmenu.c (menu_help_callback): Pointer type fixes.
	Use const pointers when pointing at readonly data.  Avoid pointer
	signedness clashes.
	(FALSE): Remove unused macro.
	(update_frame_menubar): Remove unused decl.

	* xfns.c (Fx_hide_tip): Move locals to avoid shadowing.

	* menu.c (push_submenu_start, push_submenu_end): Do not define unless
	USE_X_TOOLKIT || USE_GTK || HAVE_NS || defined HAVE_NTGUI.
	(single_menu_item): Rename local to avoid shadowing.

	* keyboard.c (make_lispy_event): Remove unused local var.

	* frame.c, frame.h (x_get_resource_string): Bring this back, but
	only if HAVE_X_WINDOWS && !USE_X_TOOLKIT.

	* bitmaps: Change bitmaps from unsigned char back to the X11
	compatible char.  Avoid the old compiler warnings about
	out-of-range initializers by using, for example, '\xab' rather
	than 0xab.

	* xgselect.c (xgselect_initialize): Check vs interface
	even if ! (defined (USE_GTK) || defined (HAVE_GCONF)).

	* xmenu.c (xmenu_show): Rename parm to avoid shadowing.

	* xterm.c (x_create_toolkit_scroll_bar): Use const * for pointers
	to read-only memory.

	* fns.c (vector): Remove; this old hack is no longer needed.

	* xsmfns.c (create_client_leader_window): Rename shadowing arg.
	Remove unused var.
	(gdk_x11_set_sm_client_id) [!USE_GTK]: Don't define.

	* xrdb.c (x_load_resources): Omit unused local.

	* xfns.c (free_frame_menubar, atof): Remove duplicate decls.
	(x_window): Rename locals to avoid shadowing.
	(USG): Use the kludged USG macro, to pacify gcc.

	* xterm.c (x_alloc_nearest_color_for_widget): Remove; unused.
	(x_term_init): Remove local to avoid shadowing.

	* xfns.c, xterm.c (_XEditResCheckMessages): Protoize decl.

	* xdisp.c, dispextern.h (set_vertical_scroll_bar): Now extern if
	USE_TOOLKIT_SCROLL_BARS && !USE_GTK, as xterm.c needs it then.

2011-04-16  Eli Zaretskii  <eliz@gnu.org>

	* gnutls.c (Fgnutls_boot): Don't pass Lisp_Object to `error'.

	Fix regex.c, syntax.c and friends for buffers > 2GB.
	* syntax.h (struct gl_state_s): Declare character position members
	EMACS_INT.

	* syntax.c (update_syntax_table): Declare 2nd argument EMACS_INT.

	* textprop.c (verify_interval_modification, interval_of):
	Declare arguments EMACS_INT.

	* intervals.c (adjust_intervals_for_insertion): Declare arguments
	EMACS_INT.

	* intervals.h (CHECK_TOTAL_LENGTH): Cast to EMACS_INT, not `int'.

	* indent.c (Fvertical_motion): Local variable it_start is now
	EMACS_INT.

	* regex.c (re_match, re_match_2, re_match_2_internal)
	(bcmp_translate, regcomp, regexec, print_double_string)
	(group_in_compile_stack, re_search, re_search_2, regex_compile)
	(re_compile_pattern, re_exec): Declare arguments and local
	variables `size_t' and `ssize_t' and return values `regoff_t', as
	appropriate.
	(POP_FAILURE_REG_OR_COUNT) <pfreg>: Declare `long'.
	(CHECK_INFINITE_LOOP) <failure>: Declare `ssize_t'.
	<compile_stack_type>: `size' and `avail' are now `size_t'.

	* regex.h <regoff_t>: Use ssize_t, not int.
	(re_search, re_search_2, re_match, re_match_2): Arguments that
	specify buffer/string position and length are now ssize_t and
	size_t.  Return type is regoff_t.

2011-04-16  Ben Key  <bkey76@gmail.com>

	* nsfont.m: Fixed bugs in ns_get_family and
	ns_descriptor_to_entity that were caused by using free to
	deallocate memory blocks that were allocated by xmalloc (via
	xstrdup).  This caused Emacs to crash when compiled with
	XMALLOC_OVERRUN_CHECK defined (when Emacs was configured with
	--enable-checking=xmallocoverrun).  xfree is now used to
	deallocate these memory blocks.

2011-04-15  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c (emacs_read): Remove unnecessary check vs MAX_RW_COUNT.

	emacs_write: Accept and return EMACS_INT for sizes.
	See http://lists.gnu.org/archive/html/emacs-devel/2011-04/msg00514.html
	et seq.
	* gnutls.c, gnutls.h (emacs_gnutls_read, emacs_gnutls_write):
	Accept and return EMACS_INT.
	(emacs_gnutls_write): Return the number of bytes written on
	partial writes.
	* sysdep.c, lisp.h (emacs_read, emacs_write): Likewise.
	(emacs_read, emacs_write): Remove check for negative size, as the
	Emacs source code has been audited now.
	* sysdep.c (MAX_RW_COUNT): New macro, to work around kernel bugs.
	(emacs_read, emacs_write): Use it.
	* process.c (send_process): Adjust to the new signatures of
	emacs_write and emacs_gnutls_write.  Do not attempt to store
	a byte offset into an 'int'; it might overflow.
	See http://lists.gnu.org/archive/html/emacs-devel/2011-04/msg00483.html

	* sound.c: Don't assume sizes fit in 'int'.
	(struct sound_device.period_size, alsa_period_size):
	Return EMACS_INT, not int.
	(struct sound_device.write, vox_write, alsa_write):
	Accept EMACS_INT, not int.
	(wav_play, au_play): Use EMACS_INT to store sizes and to
	record read return values.

2011-04-15  Ben Key  <bkey76@gmail.com>

	* keyboard.c (Qundefined): Don't declare static since it is used
	in nsfns.m.
	* xfaces.c (Qbold, Qexpanded, Qitalic, Qcondensed): Don't declare
	static since they are used in nsfont.m.

2011-04-15  Stefan Monnier  <monnier@iro.umontreal.ca>

	* process.c (Qprocessp): Don't declare static.
	* lisp.h (Qprocessp): Declare again.

2011-04-15  Juanma Barranquero  <lekktu@gmail.com>

	* font.c (Qopentype): Don't make static (used from w32uniscribe.c).

2011-04-14  Paul Eggert  <eggert@cs.ucla.edu>

	Improve C-level modularity by making more things 'static'.

	Don't publish debugger-only interfaces to other modules.
	* lisp.h (safe_debug_print, debug_output_compilation_hack):
	(verify_bytepos, count_markers): Move decls to the only modules
	that need them.
	* region-cache.h (pp_cache): Likewise.
	* window.h (check_all_windows): Likewise.
	* marker.c, print.c, region-cache.c, window.c: Decls moved here.

	* sysdep.c (croak): Now static, if
	defined TIOCNOTTY || defined USG5 || defined CYGWIN.
	* syssignal.h (croak): Declare only if not static.

	* alloc.c (refill_memory_reserve): Now static if
	!defined REL_ALLOC || defined SYSTEM_MALLOC.
	* lisp.h (refill_memory_reserve): Declare only if not static.

	* xsettings.c, xsettings.h (xsettings_get_system_normal_font):
	Define only if USE_LUCID.

	* xrdb.c (x_customization_string, x_rm_string): Now static.

	* xmenu.c (x_menu_wait_for_event): Export only if USE_MOTIF.
	* xterm.h (x_menu_wait_for_event): Declare only if USE_MOTIF.

	* xdisp.c (draw_row_with_mouse_face): Now static.
	* dispextern.h (draw_row_with_mouse_fave): Remove decl.

	* window.h (check_all_windows): Mark externally visible.

	* window.c (window_deletion_count): Now static.

	* undo.c: Make symbols static if they're not exported.
	(last_undo_buffer, last_boundary_position, pending_boundary):
	Now static.

	* textprop.c (interval_insert_behind_hooks): Now static.
	(interval_insert_in_front_hooks): Likewise.

	* term.c: Make symbols static if they're not exported.
	(tty_turn_off_highlight, get_tty_terminal, max_frame_cols):
	(max_frame_lines, tty_set_terminal_modes):
	(tty_reset_terminal_modes, tty_turn_off_highlight):
	(get_tty_terminal): Now static.
	(term_mouse_moveto): Do not define if HAVE_WINDOW_SYSTEM.
	* termhooks.h (term_mouse_moveto): Do not declare if
	HAVE_WINDOW_SYSTEM.
	* dispextern.h (tty_set_terminal_modes, tty_reset_terminal_modes):
	(tty_turn_off_highlight, get_tty_terminal): Remove decls.

	* sysdep.c: Make symbols static if they're not exported.
	(emacs_get_tty, emacs_set_tty, old_fcntl_flags, old_fcntl_owner):
	Now static.
	(sigprocmask_set, full_mask): Remove; unused.
	(wait_debugging): Mark as visible.
	* syssignal.h (SIGFULLMASK, full_mask): Remove decls.
	* systty.h (emacs_get_tty, emacs_set_tty): Remove decls.

	* syntax.c (syntax_temp): Define only if !__GNUC__.

	* sound.c (current_sound_device, current_sound): Now static.

	* search.c (searchbufs, searchbuf_head): Now static.

	* scroll.c (scroll_cost): Remove; unused.
	* dispextern.h (scroll_cost): Remove decl.

	* region-cache.h (pp_cache): Mark as externally visible.

	* process.c: Make symbols static if they're not exported.
	(process_tick, update_tick, create_process, chan_process):
	(Vprocess_alist, proc_buffered_char, datagram_access):
	(fd_callback_data, send_process_frame, process_sent_to): Now static.
	(deactivate_process): Mark defn as static, as well as decl.
	* lisp.h (create_process): Remove decl.
	* process.h (chan_process, Vprocess_alist): Remove decls.

	* print.c: Make symbols static if they're not exported.
	(print_depth, new_backquote_output, being_printed, print_buffer):
	(print_buffer_size, print_buffer_pos, print_buffer_pos_byte):
	(print_interval, print_number_index, initial_stderr_stream):
	Now static.
	* lisp.h (Fprinc): Remove decl.
	(debug_output_compilation_hack): Mark as externally visible.

	* sysdep.c (croak): Move decl from here to syssignal.h.
	* syssignal.h (croak): Put it here, so the API can be checked when
	'croak' is called from dissociate_if_controlling_tty.

	* minibuf.c: Make symbols static if they're not exported.
	(minibuf_save_list, choose_minibuf_frame): Now static.
	* lisp.h (choose_minibuf_frame): Remove decl.

	* lisp.h (verify_bytepos, count_markers): Mark as externally visible.

	* lread.c: Make symbols static if they're not exported.
	(read_objects, initial_obarray, oblookup_last_bucket_number):
	Now static.
	(make_symbol): Remove; unused.
	* lisp.h (initial_obarray, make_symbol): Remove decls.

	* keyboard.c: Make symbols static if they're not exported.
	(single_kboard, recent_keys_index, total_keys, recent_keys):
	(this_command_key_count_reset, raw_keybuf, raw_keybuf_count):
	(this_single_command_key_start, echoing, last_auto_save):
	(read_key_sequence_cmd, dribble, recursive_edit_unwind):
	(command_loop, echo_now, keyboard_init_hook, help_char_p):
	(quit_throw_to_read_char, command_loop_2, top_level_1, poll_timer):
	(Vlispy_mouse_stem, double_click_count):
	Now static.
	(force_auto_save_soon): Define only if SIGDANGER.
	(ignore_mouse_drag_p): Now static if
	!defined HAVE_WINDOW_SYSTEM || defined USE_GTK || defined HAVE_NS.
	(print_help): Remove; unused.
	(stop_character, last_timer_event): Mark as externally visible.
	* keyboard.h (ignore_mouse_drag_p): Declare only if
	defined HAVE_WINDOW_SYSTEM && !defined USE_GTK && !defined HAVE_NS.
	(echo_now, help_char_p, quit_throw_to_read_char): Remove decls.
	* lisp.h (echoing): Remove decl.
	(force_auto_save_soon): Declare only if SIGDANGER.
	* xdisp.c (redisplay_window): Simplify code, to make it more
	obvious that ignore_mouse_drag_p is not accessed if !defined
	USE_GTK && !defined HAVE_NS.

	* intervals.c: Make symbols static if they're not exported.
	(merge_properties_sticky, merge_interval_right, delete_interval):
	Now static.
	* intervals.h (merge_interval_right, delete_interval): Remove decls.

	* insdel.c: Make symbols static if they're not exported.
	However, leave prepare_to_modify_buffer alone.  It's never
	called from outside this function, but that appears to be a bug.
	(combine_after_change_list, combine_after_change_buffer):
	(adjust_after_replace, signal_before_change): Now static.
	(adjust_after_replace_noundo): Remove; unused.
	* lisp.h (adjust_after_replace, adjust_after_replace_noundo):
	(signal_before_change): Remove decls.

	* indent.c (val_compute_motion, val_vmotion): Now static.

	* image.c: Make symbols static if they're not exported.
	* dispextern.h (x_create_bitmap_from_xpm_data): Do not declare
	if USE_GTK.
	* image.c (x_create_bitmap_from_xpm_data): Do not define if USE_GTK.
	(xpm_color_cache, ct_table, ct_colors_allocated): Now static.

	* fringe.c (standard_bitmaps): Now static.
	(max_used_fringe_bitmap): Now static, unless HAVE_NS.

	* frame.c: Make symbols static if they're not exported.
	(x_report_frame_params, make_terminal_frame): Now static.
	(get_frame_param): Now static, unless HAVE_NS.
	(x_fullscreen_adjust): Define if WINDOWSNT, not if HAVE_WINDOW_SYSTEM.
	(x_get_resource_string): Remove; not used.
	* frame.h (make_terminal_frame, x_report_frame_params):
	(x_get_resource_string); Remove decls.
	(x_fullscreen_adjust): Declare only if WINDOWSNT.
	* lisp.h (get_frame_param): Declare only if HAVE_NS.

	* font.c, fontset.c: Make symbols static if they're not exported.
	* dispextern.h (FACE_SUITABLE_FOR_ASCII_CHAR_P): New macro.
	(FACE_SUITABLE_FOR_CHAR_P): Use it.
	* font.c (font_close_object): Now static.
	* font.h (font_close_object): Remove.
	* fontset.c (FONTSET_OBJLIST): Remove.
	(free_realized_fontset) #if-0 the body, which does nothing.
	(face_suitable_for_char_p): #if-0, as it's never called.
	* fontset.h (face_suitable_for_char_p): Remove decl.
	* xfaces.c (face_at_string_position):
	Use FACE_SUITABLE_FOR_ASCII_CHAR_P, not FACE_SUITABLE_FOR_CHAR_P,
	since 0 is always ASCII.

	* fns.c (weak_hash_tables): Now static.

	* fileio.c: Make symbols static if they're not exported.
	(auto_saving, auto_save_mode_bits, auto_save_error_occurred):
	(Vwrite_region_annotation_buffers): Now static.

	* eval.c: Make symbols static if they're not exported.
	(backtrace_list, lisp_eval_depth, when_entered_debugger): Now static.
	* lisp.h (backtrace_list): Remove decl.

	* emacs.c: Make symbols static if they're not exported.
	(malloc_state_ptr, malloc_using_checking, syms_of_emacs):
	(fatal_error_code, fatal_error_signal_hook, standard_args):
	Now static.
	(fatal_error_signal): Now static, unless FLOAT_CATCH_SIGKILL.
	(DEFINE_DUMMY_FUNCTION): Mark function as externally visible.
	(__CTOR_LIST__, __DTOR_LIST__): Now externally visible.
	* lisp.h (fatal_error_signal_hook): Remove decl.
	(fatal_error_signal): Declare only if FLOAT_CATCH_SIGKILL.

	* editfns.c: Move a (normally-unused) function to its only use.
	* editfns.c, lisp.h (get_operating_system_release): Remove.
	* process.c (init_process) [DARWIN_OS]: Do it inline, as it is not
	worth the hassle of breaking this out.

	* xterm.c: Make symbols static if they're not exported.
	(x_raise_frame, x_lower_frame, x_wm_set_window_state):
	(x_wm_set_icon_pixmap, x_initialize, XTread_socket_fake_io_error):
	(x_destroy_window, x_delete_display):
	Now static.
	(x_dispatch_event): Now static if ! (USE_MOTIF || USE_X_TOOLKIT).
	(x_mouse_leave): Remove; unused.
	* xterm.h (x_display_info_for_name, x_raise_frame, x_lower_frame):
	(x_destroy_window, x_wm_set_window_state, x_wm_set_icon_pixmap):
	(x_delete_display, x_initialize, x_set_border_pixel, x_screen_planes):
	Remove decls.
	(x_mouse_leave): Declare only if WINDOWSNT.
	(x_dispatch_event): Declare only if USE_MOTIF or USE_X_TOOLKIT.
	(xic_create_fontsetname): Declare only if HAVE_X_WINDOWS &&
	USE_X_TOOLKIT.

	* ftxfont.c: Make symbols static if they're not exported.
	(ftxfont_driver): Export only if !defined HAVE_XFT && def8ined
	HAVE_FREETYPE.
	* font.h (ftxfont_driver): Likewise.

	* xfns.c: Make symbols static if they're not exported.
	(x_last_font_name, x_display_info_for_name):
	(x_set_foreground_color, x_set_background_color, x_set_mouse_color):
	(x_set_cursor_color, x_set_border_pixel, x_set_border_color):
	(x_set_cursor_type, x_set_icon_type, x_set_icon_name):
	(x_set_scroll_bar_foreground, x_set_scroll_bar_background):
	(x_explicitly_set_name, x_set_title, xic_defaut_fontset, tip_timer):
	(last_show_tip_args): Now static.
	(xic_defaut_fontset, xic_create_fontsetname): Define only if
	defined HAVE_X_WINDOWS && defined USE_X_TOOLKIT
	(x_screen_planes): Remove; unused.
	* dispextern.h (x_screen_planes): Remove decl.

	* dispnew.c: Make symbols static if they're not exported.
	* dispextern.h (redraw_garbaged_frames, scrolling):
	(increment_row_positions): Remove.
	* dispnew.c (new_glyph_matrix, increment_row_positions, scrolling):
	(delayed_size_change, glyph_matrix_count, glyph_pool_count):
	Now static.
	(redraw_garbaged_frames): Remove; unused.

	* xfaces.c: Make symbols static if they're not exported.
	* dispextern.h (ascii_face_of_lisp_face, free_realized_face):
	Remove decls.
	* xterm.h (defined_color): Remove decls.
	(x_free_dpy_colors): Declare only if USE_X_TOOLKIT.
	* xfaces.c (tty_suppress_bold_inverse_default_colors_p):
	(menu_face_changed_default, defined_color, free_realized_face):
	(x_free_dpy_colors): Define only if USE_X_TOOLKIT.
	(ascii_face_of_lisp_face): Remove; unused.

	* xdisp.c: Make symbols static if they're not exported.
	* dispextern.h (scratch_glyph_row, window_box_edges):
	(glyph_to_pixel_coords, set_cursor_from_row):
	(get_next_display_element, set_iterator_to_next):
	(highlight_trailing_whitespace, frame_to_window_pixel_xy):
	(show_mouse_face): Remove decls
	* frame.h (message_buf_print): Likewise.
	* lisp.h (pop_message, set_message, check_point_in_composition):
	Likewise.
	* xterm.h (set_vertical_scroll_bar): Likewise.
	* xdisp.c (list_of_error, Vmessage_stack, line_number_displayed):
	(message_buf_print, scratch_glyph_row, displayed_buffer):
	(set_iterator_to_next, pop_message, set_message, set_cursor_from_row):
	(get_next_display_element, show_mouse_face, window_box_edges):
	(frame_to_window_pixel_xy, check_point_in_composition):
	(set_vertical_scroll_bar, highlight_trailing_whitespace): Now static.
	(glyph_to_pixel_coords): Remove; unused.

	* dired.c (file_name_completion): Now static.

	* dbusbind.c (xd_in_read_queued_messages): Now static.

	* lisp.h (circular_list_error, FOREACH): Remove; unused.
	* data.c (circular_list_error): Remove.

	* commands.h (last_point_position, last_point_position_buffer):
	(last_point_position_window): Remove decls.
	* keyboard.c: Make these variables static.

	* coding.h (coding, code_convert_region, encode_coding_gap):
	Remove decls.
	* coding.c (Vsjis_coding_system, Vbig5_coding_system):
	(iso_code_class, detect_coding, code_convert_region): Now static.
	(encode_coding_gap): Remove; unused.

	* chartab.c (chartab_chars, chartab_bits): Now static.

	* charset.h (charset_iso_8859_1): Remove decl.
	* charset.c (charset_iso_8859_1, charset_emacs, map_charset_for_dump):
	Now static.

	* ccl.h (check_ccl_update, Vccl_program_table): Remove decls.
	* ccl.c (Vccl_program_table): Now static.
	(check_ccl_update): Remove; unused.

	* category.c (SET_CATEGORY_SET, set_category_set): Move here.
	* category.h: ... from here.
	* category.c (check_category_table, set_category_set): Now static.

	* casetab.c (Vascii_upcase_table, Vascii_eqv_table): Now static.
	* lisp.h: Remove these decls.

	* buffer.c (buffer_count): Remove unused var.

	* bidi.c (bidi_dump_cached_states): Mark as externally visible,
	so that it's not optimized away.
	(bidi_ignore_explicit_marks_for_paragraph_level): Likewise.
	* dispextern.h (bidi_dump_cached_states): Remove, since it's
	exported only to the debugger.

	* atimer.c (alarm_signal_handler, run_all_atimers): Now static.
	* atimer.h (run_all_atimers): Remove; not exported.

	font.c: Make copy_font_spec and merge_font_spec ordinary C functions.
	* font.c (copy_font_spec): Rename from Fcopy_font_spec, since it
	was inaccessible from Lisp.
	(merge_font_spec): Likewise, renaming from Fmerge_font_spec.
	* font.c, font.h, fontset.c, xfaces.c, xfont.c: Change all uses.

	alloc.c: Import and export fewer symbols, and remove unused items.
	* lisp.h (suppress_checking, die): Declare only if ENABLE_CHECKING
	is defined.
	(suppress_checking): Add EXTERNALLY_VISIBLE attribute, so that
	it's not optimized away by whole-program optimization.
	(message_enable_multibyte, free_misc): Remove.
	(catchlist, handlerlist, mark_backtrace):
	Declare only if BYTE_MARK_STACK.
	(mark_byte_stack): Likewise, fixing a ifdef-vs-if typo.
	* alloc.c (pure): Export only if VIRT_ADDR_VARIES is defined.
	(message_enable_multibyte): Remove decl.
	(free_misc, interval_free_list, float_block, float_block_index):
	(n_float_blocks, float_free_list, cons_block, cons_block_index):
	(cons_free_list, last_marked_index):
	Now static.
	(suppress_checking, die): Define only if ENABLE_CHECKING is defined.
	* eval.c (catchlist, handlerlist): Export only if BYTE_MARK_STACK.
	(mark_backtrace): Define only if BYTE_MARK_STACK.
	* xdisp.c (message_enable_multibyte): Now static.

	Declare Lisp_Object Q* variables to be 'static' if not exported.
	This makes it easier for human readers (and static analyzers)
	to see whether these variables are used from other modules.
	* alloc.c, buffer.c, bytecode.c, callint.c, casetab.c, category.c:
	* ccl.c, character.c, charset.c, cmds.c, coding.c, composite.c:
	* data.c, dbusbind.c, dired.c, editfns.c, eval.c, fileio.c, fns.c:
	* font.c, frame.c, fringe.c, ftfont.c, image.c, keyboard.c, keymap.c:
	* lread.c, macros.c, minibuf.c, print.c, process.c, search.c:
	* sound.c, syntax.c, textprop.c, window.c, xdisp.c, xfaces.c, xfns.c:
	* xmenu.c, xselect.c:
	Declare Q* vars static if they are not used in other modules.
	* ccl.h, character.h, charset.h, coding.h, composite.h, font.h:
	* frame.h, intervals.h, keyboard.h, lisp.h, process.h, syntax.h:
	Remove decls of unexported vars.
	* keyboard.h (EVENT_HEAD_UNMODIFIED): Remove now-unused macro.

	* lisp.h (DEFINE_FUNC): Make sname 'static'.

	Make Emacs functions such as Fatom 'static' by default.
	This makes it easier for human readers (and static analyzers)
	to see whether these functions can be called from other modules.
	DEFUN now defines a static function.  To make the function external
	so that it can be used in other C modules, use the new macro DEFUE.
	* lisp.h (Funibyte_char_to_multibyte, Fsyntax_table_p):
	(Finit_image_library):
	(Feval_region, Fbacktrace, Ffetch_bytecode, Fswitch_to_buffer):
	(Ffile_executable_p, Fmake_symbolic_link, Fcommand_execute):
	(Fget_process, Fdocumentation_property, Fbyte_code, Ffile_attributes):
	Remove decls, since these functions are now static.
	(Funintern, Fget_internal_run_time): New decls, since these functions
	were already external.

	* alloc.c, buffer.c, callint.c, callproc.c, casefiddle.c, casetab.c:
	* ccl.c, character.c, chartab.c, cmds.c, coding.c, data.c, dispnew.c:
	* doc.c, editfns.c, emacs.c, eval.c, fileio.c, filelock.c, floatfns.c:
	* fns.c, font.c, fontset.c, frame.c, image.c, indent.c:
	* keyboard.c, keymap.c, lread.c:
	* macros.c, marker.c, menu.c, minibuf.c, print.c, process.c, search.c:
	* syntax.c, term.c, terminal.c, textprop.c, undo.c:
	* window.c, xdisp.c, xfaces.c, xfns.c, xmenu.c, xsettings.c:
	Mark functions with DEFUE instead of DEFUN,
	if they are used in other modules.
	* buffer.c (Fset_buffer_major_mode, Fdelete_overlay): New forward
	decls for now-static functions.
	* buffer.h (Fdelete_overlay): Remove decl.
	* callproc.c (Fgetenv_internal): Mark as internal.
	* composite.c (Fremove_list_of_text_properties): Remove decl.
	(Fcomposition_get_gstring): New forward static decl.
	* composite.h (Fcomposite_get_gstring): Remove decl.
	* dired.c (Ffile_attributes): New forward static decl.
	* doc.c (Fdocumntation_property): New forward static decl.
	* eval.c (Ffetch_bytecode): New forward static decl.
	(Funintern): Remove extern decl; now in .h file where it belongs.
	* fileio.c (Fmake_symbolic_link): New forward static decl.
	* image.c (Finit_image_library): New forward static decl.
	* insdel.c (Fcombine_after_change_execute): Make forward decl static.
	* intervals.h (Fprevious_property_change):
	(Fremove_list_of_text_properties): Remove decls.
	* keyboard.c (Fthis_command_keys): Remove decl.
	(Fcommand_execute): New forward static decl.
	* keymap.c (Flookup_key): New forward static decl.
	(Fcopy_keymap): Now static.
	* keymap.h (Flookup_key): Remove decl.
	* process.c (Fget_process): New forward static decl.
	(Fprocess_datagram_address): Mark as internal.
	* syntax.c (Fsyntax_table_p): New forward static decl.
	(skip_chars): Remove duplicate decl.
	* textprop.c (Fprevious_property_change): New forward static decl.
	* window.c (Fset_window_fringes, Fset_window_scroll_bars):
	Now internal.
	(Fset_window_margins, Fset_window_vscroll): New forward static decls.
	* window.h (Fset_window_vscroll, Fset_window_margins): Remove decls.

	* editfns.c (Fformat): Remove unreachable code.

2011-04-14  Andreas Schwab  <schwab@linux-m68k.org>

	* fileio.c (Finsert_file_contents): Fix typo in 2005-05-13
	change.  (Bug#8496)

2011-04-13  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_invisible_prop): Don't call bidi_paragraph_init
	when at ZV.  (Bug#8487)

2011-04-12  Andreas Schwab  <schwab@linux-m68k.org>

	* charset.c (Fclear_charset_maps): Use xfree instead of free.
	(Bug#8437)
	* keyboard.c (parse_tool_bar_item): Likewise.
	* sound.c (sound_cleanup, alsa_close): Likewise.
	* termcap.c (tgetent): Likewise.
	* xfns.c (x_default_font_parameter): Likewise.
	* xsettings.c (read_and_apply_settings): Likewise.

	* alloc.c (overrun_check_malloc, overrun_check_realloc)
	(overrun_check_free): Protoize.

2011-04-12  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c (emacs_read, emacs_write): Check for negative sizes
	since callers should never pass a negative size.
	Change the signature to match that of plain 'read' and 'write'; see
	<http://lists.gnu.org/archive/html/emacs-devel/2011-04/msg00397.html>.
	* lisp.h: Update prototypes of emacs_write and emacs_read.

2011-04-11  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (redisplay_window): Don't try to determine the character
	position of the scroll margin if the window start point w->startp
	is outside the buffer's accessible region.  (Bug#8468)

2011-04-10  Eli Zaretskii  <eliz@gnu.org>

	Fix write-region and its subroutines for buffers > 2GB.
	* fileio.c (a_write, e_write): Modify declaration of arguments and
	local variables to support buffers larger than 2GB.
	(Fcopy_file): Use EMACS_INT for return value of emacs_read.

	* sysdep.c (emacs_write, emacs_read): Use ssize_t for last
	argument, local variables, and return value.

	* lisp.h: Update prototypes of emacs_write and emacs_read.

	* sound.c (vox_write): Use ssize_t for return value of emacs_write.

2011-04-10  Paul Eggert  <eggert@cs.ucla.edu>

	* xdisp.c (vmessage): Use memchr, not strnlen, which some hosts lack.

	Fix more problems found by GCC 4.6.0's static checks.

	* xdisp.c (vmessage): Use a better test for character truncation.

	* charset.c (load_charset_map): <, not <=, for optimization,
	and to avoid potential problems with integer overflow.
	* chartab.c (sub_char_table_set_range, char_table_set_range): Likewise.
	* casetab.c (set_identity, shuffle): Likewise.
	* editfns.c (Fformat): Likewise.
	* syntax.c (skip_chars): Likewise.

	* xmenu.c (set_frame_menubar): Allocate smaller local vectors.
	This also lets GCC 4.6.0 generate slightly better loop code.

	* callint.c (Fcall_interactively): <, not <=, for optimization.
	(Fcall_interactively): Count the number of arguments produced,
	not the number of arguments given.  This is simpler and lets GCC
	4.6.0 generate slightly better code.

	* ftfont.c: Distingish more carefully between FcChar8 and char.
	The previous code passed unsigned char * to a functions like
	strlen and xstrcasecmp that expect char *, which does not
	conform to the C standard.
	(get_adstyle_property, ftfont_pattern_entity): Use FcChar8 for
	arguments to FcPatternGetString, and explicitly cast FcChar8 * to
	char * when the C standard requires it.

	* keyboard.c (read_char): Remove unused var.

	* eval.c: Port to Windows vsnprintf (Bug#8435).
	Include <limits.h>.
	(SIZE_MAX): Define if the headers do not.
	(verror): Do not give up if vsnprintf returns a negative count.
	Instead, grow the buffer.  This ports to Windows vsnprintf, which
	does not conform to C99.  Problem reported by Eli Zaretskii.
	Also, simplify the allocation scheme, by avoiding the need for
	calling realloc, and removing the ALLOCATED variable.

	* eval.c (verror): Initial buffer size is 4000 (not 200) bytes.

	Remove invocations of doprnt, as Emacs now uses vsnprintf.
	But keep the doprint source code for now, as we might revamp it
	and use it again (Bug#8435).
	* lisp.h (doprnt): Remove.
	* Makefile.in (base_obj): Remove doprnt.o.
	* deps.mk (doprnt.o): Remove.

	error: Print 32- and 64-bit integers portably (Bug#8435).
	Without this change, on typical 64-bit hosts error ("...%d...", N)
	was used to print both 32- and 64-bit integers N, which relied on
	undefined behavior.
	* lisp.h, src/m/amdx86-64.h, src/m/ia64.h, src/m/ibms390x.h (pEd):
	New macro.
	* lisp.h (error, verror): Mark as printf-like functions.
	* eval.c (verror): Use vsnprintf, not doprnt, to do the real work.
	Report overflow in size calculations when allocating printf buffer.
	Do not truncate output string at its first null byte.
	* xdisp.c (vmessage): Use vsnprintf, not doprnt, to do the real work.
	Truncate the output at a character boundary, since vsnprintf does not
	do that.
	* charset.c (check_iso_charset_parameter): Convert internal
	character to string before calling 'error', since %c now has the
	printf meaning.
	* coding.c (Fdecode_sjis_char, Fdecode_big5_char): Avoid int
	overflow when computing char to be passed to 'error'.  Do not
	pass Lisp_Object to 'error'; pass the integer instead.
	* nsfns.m (Fns_do_applescript): Use int, not long, since it's
	formatted with plain %d.

	* eval.c (internal_lisp_condition_case): Don't pass spurious arg.

	* keyboard.c (access_keymap_keyremap): Print func name, not garbage.

	* coding.c (Fdecode_sjis_char): Don't assume CODE fits in int.

	* xterm.c (x_catch_errors): Remove duplicate declaration.

	* term.c (maybe_fatal): Mark its 3rd arg as a printf format, too.

	* xdisp.c, lisp.h (message_nolog): Remove; unused.

2011-04-10  Jim Meyering  <meyering@redhat.com>

	use ssize_t and size_t for read- and write-like emacs_gnutls_* functions
	* gnutls.c (emacs_gnutls_read): Adjust signature to be more read-like:
	return ssize_t not "int", and use size_t as the buffer length.
	(emacs_gnutls_write): Likewise, and make the buffer pointer "const".
	* gnutls.h: Update declarations.
	* process.c (read_process_output): Use ssize_t, to match.
	(send_process): Likewise.

2011-04-09  Chong Yidong  <cyd@stupidchicken.com>

	* image.c (Fimagemagick_types): Doc fix, and comment cleanup.

2011-04-09  Chong Yidong  <cyd@stupidchicken.com>

	* ftfont.c (get_adstyle_property, ftfont_pattern_entity):
	Use unsigned char, to match FcChar8 type definition.

	* xterm.c (handle_one_xevent):
	* xmenu.c (create_and_show_popup_menu):
	* xselect.c (x_decline_selection_request)
	(x_reply_selection_request): Avoid type-punned deref of X events.

2011-04-09  Eli Zaretskii  <eliz@gnu.org>

	Fix some uses of `int' instead of EMACS_INT.
	* search.c (string_match_1, fast_string_match)
	(fast_c_string_match_ignore_case, fast_string_match_ignore_case)
	(scan_buffer, find_next_newline_no_quit)
	(find_before_next_newline, search_command, Freplace_match)
	(Fmatch_data): Make some `int' variables be EMACS_INT.

	* xdisp.c (display_count_lines): 3rd argument and return value now
	EMACS_INT.  All callers changed.
	(pint2hrstr): Last argument is now EMACS_INT.

	* coding.c (detect_coding_utf_8, detect_coding_emacs_mule)
	(detect_coding_iso_2022, detect_coding_sjis, detect_coding_big5)
	(detect_coding_ccl, detect_coding_charset, decode_coding_utf_8)
	(decode_coding_utf_16, decode_coding_emacs_mule)
	(decode_coding_iso_2022, decode_coding_sjis, decode_coding_big5)
	(decode_coding_ccl, decode_coding_charset)
	<consumed_chars, consumed_chars_base>: Declare EMACS_INT.
	(decode_coding_iso_2022, decode_coding_emacs_mule)
	(decode_coding_sjis, decode_coding_big5, decode_coding_charset)
	<char_offset, last_offset>: Declare EMACS_INT.
	(encode_coding_utf_8, encode_coding_utf_16)
	(encode_coding_emacs_mule, encode_invocation_designation)
	(encode_designation_at_bol, encode_coding_iso_2022)
	(encode_coding_sjis, encode_coding_big5, encode_coding_ccl)
	(encode_coding_raw_text, encode_coding_charset) <produced_chars>:
	Declare EMACS_INT.
	(ASSURE_DESTINATION): Declare more_bytes EMACS_INT.
	(encode_invocation_designation): Last argument P_NCHARS is now
	EMACS_INT.
	(decode_eol): Declare pos_byte, pos, and pos_end EMACS_INT.
	(produce_chars): from_nchars and to_nchars are now EMACS_INT.

	* coding.h (struct coding_system) <head_ascii>: Declare EMACS_INT.
	All users changed.

	* ccl.c (Fccl_execute_on_string): Declare some variables
	EMACS_INT.

2011-04-08  Samuel Thibault  <sthibault@debian.org>  (tiny change)

	* term.c (init_tty): Fix incorrect ifdef placement (Bug#8450).

2011-03-19  Christoph Scholtes  <cschol2112@googlemail.com>

	* process.c (Fformat_network_address): Doc fix.

2011-04-08  T.V. Raman  <tv.raman.tv@gmail.com>  (tiny change)

	* xml.c (parse_region): Avoid creating spurious whiespace nodes.

2011-04-08  Chong Yidong  <cyd@stupidchicken.com>

	* keyboard.c (read_char): Call Lisp function help-form-show,
	instead of using internal_with_output_to_temp_buffer.
	(Qhelp_form_show): New var.
	(syms_of_keyboard): Use DEFSYM macro.

	* print.c (internal_with_output_to_temp_buffer): Function deleted.

	* lisp.h (internal_with_output_to_temp_buffer): Remove prototype.

2011-04-06  Chong Yidong  <cyd@stupidchicken.com>

	* process.c (Flist_processes): Remove to Lisp.
	(list_processes_1): Delete.

2011-04-06  Eli Zaretskii  <eliz@gnu.org>

	* msdos.c (careadlinkat, careadlinkatcwd): MS-DOS replacements.

	* w32.c (careadlinkat, careadlinkatcwd): New always-fail stubs.

2011-04-06  Paul Eggert  <eggert@cs.ucla.edu>

	Fix more problems found by GCC 4.6.0's static checks.

	* xmenu.c (Fx_popup_dialog): Don't assume string is free of formats.

	* menu.c (Fx_popup_menu): Don't assume error_name lacks printf formats.

	* lisp.h (message, message_nolog, fatal): Mark as printf-like.

	* xdisp.c (vmessage): Mark as a printf-like function.

	* term.c (vfatal, maybe_fatal): Mark as printf-like functions.

	* sound.c (sound_warning): Don't crash if arg contains a printf format.

	* image.c (tiff_error_handler, tiff_warning_handler): Mark as
	printf-like functions.
	(tiff_load): Add casts to remove these marks before passing them
	to system-supplied API.

	* eval.c (Fsignal): Remove excess argument to 'fatal'.

	* coding.c (EMIT_ONE_BYTE, EMIT_TWO_BYTES): Use unsigned, not int.
	This avoids several warnings with gcc -Wstrict-overflow.
	(DECODE_COMPOSITION_RULE): If the rule is invalid, goto invalid_code
	directly, rather than having caller test rule sign.  This avoids
	some unnecessary tests.
	* composite.h (COMPOSITION_ENCODE_RULE_VALID): New macro.
	(COMPOSITION_ENCODE_RULE): Arguments now must be valid.  This
	affects only one use, in DECODE_COMPOSITION_RULE, which is changed.

	* xfont.c (xfont_text_extents): Remove var that was set but not used.
	(xfont_open): Avoid unnecessary tests.

	* composite.c (composition_gstring_put_cache): Use unsigned integer.

	* composite.h, composite.c (composition_gstring_put_cache):
	Use EMACS_INT, not int, for length.

	* composite.h (COMPOSITION_DECODE_REFS): New macro,
	breaking out part of COMPOSITION_DECODE_RULE.
	(COMPOSITION_DECODE_RULE): Use it.
	* composite.c (get_composition_id): Remove unused local vars,
	by using the new macro.

	* textprop.c (set_text_properties_1): Change while to do-while,
	since the condition is always true at first.

	* intervals.c (graft_intervals_into_buffer): Mark var as used.
	(interval_deletion_adjustment): Return unsigned value.
	All uses changed.

	* process.c (list_processes_1, create_pty, read_process_output):
	(exec_sentinel): Remove vars that were set but not used.
	(create_pty): Remove unnecessary "volatile"s.
	(Fnetwork_interface_info): Avoid possibility of int overflow.
	(read_process_output): Do adaptive read buffering even if carryover.
	(read_process_output): Simplify nbytes computation if buffered.

	* bytecode.c (exec_byte_code): Rename local to avoid shadowing.

	* syntax.c (scan_words): Remove var that was set but not used.
	(update_syntax_table): Use unsigned instead of int.

	* lread.c (lisp_file_lexically_bound_p): Use ints rather than endptrs.
	(lisp_file_lexically_bound_p, read1): Use unsigned instead of int.
	(safe_to_load_p): Make the end-of-loop test the inverse of the in-loop.

	* print.c (print_error_message): Avoid int overflow.

	* font.c (font_list_entities): Redo for clarity,
	so that reader need not know FONT_DPI_INDEX + 1 == FONT_SPACING_INDEX.

	* font.c (font_find_for_lface, Ffont_get_glyphs): Remove unused vars.
	(font_score): Avoid potential overflow in diff calculation.

	* fns.c (substring_both): Remove var that is set but not used.
	(sxhash): Redo loop for clarity and to avoid wraparound warning.

	* eval.c (funcall_lambda): Rename local to avoid shadowing.

	* alloc.c (mark_object_loop_halt, mark_object): Use size_t, not int.
	Otherwise, GCC 4.6.0 optimizes the loop check away since the check
	can always succeed if overflow has undefined behavior.

	* search.c (boyer_moore, wordify): Remove vars set but not used.
	(wordify): Omit three unnecessary tests.

	* indent.c (MULTIBYTE_BYTES_WIDTH): Don't compute wide_column.
	All callers changed.  This avoids the need for an unused var.

	* casefiddle.c (casify_region): Remove var that is set but not used.

	* dired.c (file_name_completion): Remove var that is set but not used.

	* fileio.c (Finsert_file_contents): Make EOF condition clearer.

	* fileio.c (Finsert_file_contents): Avoid signed integer overflow.
	(Finsert_file_contents): Remove unnecessary code checking fd.

	* minibuf.c (read_minibuf_noninteractive): Use size_t for sizes.
	Check for integer overflow on size calculations.

	* buffer.c (Fprevious_overlay_change): Remove var that is set
	but not used.

	* keyboard.c (menu_bar_items, read_char_minibuf_menu_prompt):
	Remove vars that are set but not used.
	(timer_check_2): Don't assume timer-list and idle-timer-list are lists.
	(timer_check_2): Mark vars as initialized.

	* gtkutil.c (xg_get_file_with_chooser): Mark var as initialized.

	* image.c (lookup_image): Remove var that is set but not used.
	(xbm_load): Use parse_p, for gcc -Werror=unused-but-set-variable.

	* fontset.c (Finternal_char_font, Ffontset_info): Remove vars
	that are set but not used.

	* xfns.c (make_invisible_cursor): Don't return garbage
	if XCreateBitmapFromData fails (Bug#8410).

	* xselect.c (x_get_local_selection, x_handle_property_notify):
	Remove vars that are set but not used.

	* xfns.c (x_create_tip_frame): Remove var that is set but not used.
	(make_invisible_cursor): Initialize a possibly-uninitialized variable.

	* xterm.c (x_scroll_bar_to_input_event) [!USE_GTK]:
	Remove var that is set but not used.
	(scroll_bar_windows_size): Now size_t, not int.
	(x_send_scroll_bar_event): Use size_t, not int, for sizes.
	Check for overflow.

	* xfaces.c (realize_named_face): Remove vars that are set but not used.
	(map_tty_color) [!defined MSDOS]: Likewise.

	* term.c (tty_write_glyphs): Use size_t; this avoids overflow warning.

	* coding.c: Remove vars that are set but not used.
	(DECODE_COMPOSITION_RULE): Remove 2nd arg, which is unused.
	All callers changed.
	(decode_coding_utf_8, decode_coding_utf_16 decode_coding_emacs_mule):
	(decode_coding_iso_2022, encode_coding_sjis, encode_coding_big5):
	(decode_coding_charset): Remove vars that are set but not used.

	* bytecode.c (Fbyte_code) [!defined BYTE_CODE_SAFE]: Remove var
	that is set but not used.

	* print.c (print_object): Remove var that is set but not used.

	Replace 2 copies of readlink code with 1 gnulib version (Bug#8401).
	The gnulib version avoids calling malloc in the usual case,
	and on 64-bit hosts doesn't have some arbitrary 32-bit limits.
	* fileio.c (Ffile_symlink_p): Use emacs_readlink.
	* filelock.c (current_lock_owner): Likewise.
	* lisp.h (READLINK_BUFSIZE, emacs_readlink): New function.
	* sysdep.c: Include allocator.h, careadlinkat.h.
	(emacs_no_realloc_allocator): New static constant.
	(emacs_readlink): New function.
	* deps.mk (sysdep.o): Depend on ../lib/allocator.h and on
	../lib/careadlinkat.h.

2011-04-04  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (safe_run_hook_funcall): Fix last change (don't stop at the
	first non-nil return value).

2011-04-03  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_update_auto_hide_menu_bar): Define MAC_OS_X_VERSION_10_6
	if not defined (Bug#8403).

2011-04-02  Juanma Barranquero  <lekktu@gmail.com>

	* xdisp.c (display_count_lines): Remove parameter `start',
	unused since revno:20537 (1998-01-01).  All callers changed.
	(get_char_face_and_encoding): Remove parameter `multibyte_p',
	unused since revno:87605 (2008-05-14).  All callers changed.
	(fill_stretch_glyph_string): Remove parameters `row' and `area',
	unused at least since Kim's GUI unification at revno:50135 (2003-03-16)
	and thereabouts.  All callers changed.
	(get_per_char_metric): Remove parameter `f', unused since
	revno:87605 (2008-05-14).  All callers changed.

2011-04-02  Jim Meyering  <meyering@redhat.com>

	do not dereference NULL upon failed strdup
	* nsfont.m (ns_descriptor_to_entity): Use xstrdup, not strdup.
	(ns_get_family): Likewise.

2011-04-02  Juanma Barranquero  <lekktu@gmail.com>

	* eval.c (unwind_to_catch) [DEBUG_GCPRO]: Remove redundant assignment.

2011-04-02  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_update_auto_hide_menu_bar): Only for OSX 10.6 or
	later (Bug#8403).

2011-04-01  Stefan Monnier  <monnier@iro.umontreal.ca>

	Add lexical binding.

	* window.c (Ftemp_output_buffer_show): New fun.
	(Fsave_window_excursion):
	* print.c (Fwith_output_to_temp_buffer): Move to subr.el.

	* lread.c (lisp_file_lexically_bound_p): New function.
	(Fload): Bind Qlexical_binding.
	(readevalloop): Remove `evalfun' arg.
	Bind Qinternal_interpreter_environment.
	(Feval_buffer): Bind Qlexical_binding.
	(defvar_int, defvar_bool, defvar_lisp_nopro, defvar_kboard):
	Mark as dynamic.
	(syms_of_lread): Declare `lexical-binding'.

	* lisp.h (struct Lisp_Symbol): New field `declared_special'.

	* keyboard.c (eval_dyn): New fun.
	(menu_item_eval_property): Use it.

	* image.c (parse_image_spec): Use Ffunctionp.

	* fns.c (concat, mapcar1): Accept byte-code-functions.

	* eval.c (Fsetq): Handle lexical vars.
	(Fdefun, Fdefmacro, Ffunction): Make closures when needed.
	(Fdefconst, Fdefvaralias, Fdefvar): Mark as dynamic.
	(FletX, Flet): Obey lexical binding.
	(Fcommandp): Handle closures.
	(Feval): New `lexical' arg.
	(eval_sub): New function extracted from Feval.  Use it almost
	everywhere where Feval was used.  Look up vars in lexical env.
	Handle closures.
	(Ffunctionp): Move from subr.el.
	(Ffuncall): Handle closures.
	(apply_lambda): Remove `eval_flags'.
	(funcall_lambda): Handle closures and new byte-code-functions.
	(Fspecial_variable_p): New function.
	(syms_of_eval): Initialize the Vinternal_interpreter_environment var,
	but without exporting it to Lisp.

	* doc.c (Fdocumentation, store_function_docstring):
	* data.c (Finteractive_form): Handle closures.

	* callint.c (Fcall_interactively): Preserve lexical-binding mode for
	interactive spec.

	* bytecode.c (Bstack_ref, Bstack_set, Bstack_set2, BdiscardN):
	New byte-codes.
	(exec_byte_code): New function extracted from Fbyte_code to handle new
	calling convention for byte-code-functions.  Add new byte-codes.

	* buffer.c (defvar_per_buffer): Set new `declared_special' field.

	* alloc.c (Fmake_symbol): Init new `declared_special' field.

2011-03-31  Juanma Barranquero  <lekktu@gmail.com>

	* xdisp.c (redisplay_internal): Fix prototype.

2011-03-31  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (SCROLL_LIMIT): New macro.
	(try_scrolling): Use it when setting scroll_limit.
	Limit scrolling to 100 screen lines.
	(redisplay_window): Even when falling back on "recentering",
	position point in the window according to scroll-conservatively,
	scroll-margin, and scroll-*-aggressively variables.  (Bug#6671)

	(try_scrolling): When point is above the window, allow searching
	as far as scroll_max, or one screenful, to compute vertical
	distance from PT to the scroll margin position.  This prevents
	try_scrolling from unnecessarily failing when
	scroll-conservatively is set to a value slightly larger than the
	window height.  Clean up the case of PT below the margin at bottom
	of window: scroll_max can no longer be INT_MAX.  When aggressive
	scrolling is in use, don't let point enter the opposite scroll
	margin as result of the scroll.
	(syms_of_xdisp) <scroll-conservatively>: Document the
	threshold of 100 lines for never-recentering scrolling.

2011-03-31  Juanma Barranquero  <lekktu@gmail.com>

	* dispextern.h (move_it_by_lines):
	* xdisp.c (move_it_by_lines): Remove parameter `need_y_p', unused
	since revno:34925 (2000-12-29).  All callers changed.
	(message_log_check_duplicate): Remove parameters `prev_bol' and
	`this_bol', unused since revno:20537 (1998-01-01).  All callers changed.
	(redisplay_internal): Remove parameter `preserve_echo_area',
	unused since revno:25013 (1999-07-21).  All callers changed.

	* indent.c (Fvertical_motion):
	* window.c (window_scroll_pixel_based, Frecenter):
	Don't pass `need_y_p' to `move_it_by_lines'.

2011-03-30  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (struct backtrace): Don't cheat with negative numbers, but do
	steal a few bits to be more compact.
	(interactive_p, Fbacktrace, Fbacktrace_frame, mark_backtrace):
	Remove unneeded casts.

	* bytecode.c (Fbyte_code): CAR and CDR can GC.

2011-03-30  Zachary Kanfer  <zkanfer@gmail.com>  (tiny change)

	* keyboard.c (Fexecute_extended_command): Do log the "suggest key
	binding" message (bug#7967).

2011-03-30  Paul Eggert  <eggert@cs.ucla.edu>

	Fix more problems found by GCC 4.6.0's static checks.

	* unexelf.c (unexec) [! (defined _SYSTYPE_SYSV || defined __sgi)]:
	Remove unused local var.

	* editfns.c (Fmessage_box): Remove unused local var.

	* xdisp.c (try_window_reusing_current_matrix, x_produce_glyphs):
	(note_mode_line_or_margin_highlight, note_mouse_highlight):
	Omit unused local vars.
	* window.c (shrink_windows): Omit unused local var.
	* menu.c (digest_single_submenu): Omit unused local var.
	* dispnew.c (update_window) [PERIODIC_PREEMPTION_CHECKING]:
	Omit unused local var.

	* keyboard.c (parse_modifiers_uncached, parse_modifiers):
	Don't assume string length fits in int.
	(keyremap_step, read_key_sequence): Use size_t for sizes.
	(read_key_sequence): Don't check last_real_key_start redundantly.

	* callproc.c (Fcall_process, Fcall_process_region): Use SAFE_ALLOCA
	instead of alloca (Bug#8344).

	* eval.c (Fbacktrace): Don't assume nargs fits in int.
	(Fbacktrace_frame): Don't assume nframes fits in int.

	* syntax.c (scan_sexps_forward): Avoid pointer wraparound.

	* xterm.c (x_make_frame_visible, same_x_server): Redo to avoid overflow
	concerns.

	* term.c (produce_glyphless_glyph): Remove unnecessary test.

	* cm.c (calccost): Turn while-do into do-while, for clarity.

	* keyboard.c (syms_of_keyboard): Use the same style as later
	in this function when indexing through an array.  This also
	works around GCC bug 48267.

	* image.c (tiff_load): Fix off-by-one image count (Bug#8336).

	* xselect.c (x_check_property_data): Return correct size (Bug#8335).

	* chartab.c (sub_char_table_ref_and_range): Redo for slight
	efficiency gain, and to bypass a gcc -Wstrict-overflow warning.

	* keyboard.c, keyboard.h (num_input_events): Now size_t.
	This avoids undefined behavior on integer overflow, and is a bit
	more convenient anyway since it is compared to a size_t variable.

	Variadic C functions now count arguments with size_t, not int.
	This avoids an unnecessary limitation on 64-bit machines, which
	caused (substring ...) to crash on large vectors (Bug#8344).
	* lisp.h (struct Lisp_Subr.function.aMANY): Now takes size_t, not int.
	(DEFUN_ARGS_MANY, internal_condition_case_n, safe_call): Likewise.
	All variadic functions and their callers changed accordingly.
	(struct gcpro.nvars): Now size_t, not int.  All uses changed.
	* data.c (arith_driver, float_arith_driver): Likewise.
	* editfns.c (general_insert_function): Likewise.
	* eval.c (struct backtrace.nargs, interactive_p)
	(internal_condition_case_n, run_hook_with_args, apply_lambda)
	(funcall_lambda, mark_backtrace): Likewise.
	* fns.c (concat): Likewise.
	* frame.c (x_set_frame_parameters): Likewise.
	* fns.c (get_key_arg): Now accepts and returns size_t, and returns
	0 if not found, not -1.  All callers changed.

	* alloc.c (garbage_collect): Don't assume stack size fits in int.
	(stack_copy_size): Now size_t, not int.
	(stack_copy, stack_copy_size): Define only if MAX_SAVE_STACK > 0.

2011-03-28  Juanma Barranquero  <lekktu@gmail.com>

	* coding.c (encode_designation_at_bol): Remove parameter `charbuf_end',
	unused since revno:43563.1.17 (2002-03-01) and revno:84043 (2008-02-1).
	All callers changed.

	* lisp.h (multibyte_char_to_unibyte):
	* character.c (multibyte_char_to_unibyte): Remove parameter `rev_tbl',
	unused since revno:43563.1.16 (2002-03-01) and revno:84043 (2008-02-1).
	* character.h (CHAR_TO_BYTE8):
	* cmds.c (internal_self_insert):
	* editfns.c (general_insert_function):
	* keymap.c (push_key_description):
	* search.c (Freplace_match):
	* xdisp.c (message_dolog, set_message_1): All callers changed.

2011-03-28  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (safe_run_hook_funcall): New function.
	(safe_run_hooks_1, safe_run_hooks_error, safe_run_hooks): On error,
	don't set the hook to nil, but remove the offending function instead.
	(Qcommand_hook_internal): Remove, unused.
	(syms_of_keyboard): Don't initialize Qcommand_hook_internal nor define
	Vcommand_hook_internal.

	* eval.c (enum run_hooks_condition): Remove.
	(funcall_nil, funcall_not): New functions.
	(run_hook_with_args): Call each function through a `funcall' argument.
	Remove `cond' argument, now redundant.
	(Frun_hooks, Frun_hook_with_args, Frun_hook_with_args_until_success)
	(Frun_hook_with_args_until_failure): Adjust accordingly.
	(run_hook_wrapped_funcall, Frun_hook_wrapped): New functions.

2011-03-28  Juanma Barranquero  <lekktu@gmail.com>

	* dispextern.h (string_buffer_position): Remove declaration.

	* print.c (strout): Remove parameter `multibyte', unused since
	revno:25356 (1999-08-21).  All callers changed.

	* search.c (boyer_moore): Remove parameters `len', `pos' and `lim',
	never used since function introduction in revno:20870 (1998-02-08).
	All callers changed.

	* w32.c (_wsa_errlist): Use braces for struct initializers.

	* xdisp.c (string_buffer_position_lim): Remove parameter `w',
	never used since function introduction in revno:36704 (2001-03-09).
	All callers changed.
	(string_buffer_position): Likewise.  Also, make static (it's never
	used outside xdisp.c).
	(cursor_row_p): Remove parameter `w', unused since
	revno:32591 (2000-10-17).  All callers changed.
	(decode_mode_spec): Remove parameter `precision', introduced during
	Gerd Moellmann's rewrite at revno:25013 (1999-07-21), but never used.
	All callers changed.

2011-03-27  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (syms_of_nsterm): Use doc: for ns-auto-hide-menu-bar.

2011-03-27  Anders Lindgren  <andlind@gmail.com>

	* nsterm.m (ns_menu_bar_is_hidden): New variable.
	(ns_constrain_all_frames, ns_menu_bar_should_be_hidden)
	(ns_update_auto_hide_menu_bar): New functions.
	(ns_update_begin): Call ns_update_auto_hide_menu_bar.
	(applicationDidBecomeActive): Call ns_update_auto_hide_menu_bar and
	ns_constrain_all_frames.
	(constrainFrameRect): Return at once if ns_menu_bar_should_be_hidden.
	(syms_of_nsterm): DEFVAR ns-auto-hide-menu-bar, init to Qnil.

2011-03-27  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (runDialogAt): Remove argument to timer_check.

2011-03-27  Glenn Morris  <rgm@gnu.org>

	* syssignal.h: Replace RETSIGTYPE with void.
	* atimer.c, data.c, dispnew.c, emacs.c, floatfns.c, keyboard.c:
	* keyboard.h, lisp.h, process.c, sysdep.c, xterm.c:
	Replace SIGTYPE with void everywhere.
	* s/usg5-4-common.h (SIGTYPE): Remove definition.
	* s/template.h (SIGTYPE): Remove commented out definition.

2011-03-26  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (redisplay_window): Don't check buffer's clip_changed
	flag as a prerequisite for invoking try_scrolling.  (Bug#6671)

2011-03-26  Juanma Barranquero  <lekktu@gmail.com>

	* w32.c (read_unc_volume): Use parameter `henum', instead of
	global variable `wget_enum_handle'.

	* keymap.c (describe_vector): Remove parameters `indices' and
	`char_table_depth', unused since revno:43563.1.32 (2002-03-01).
	(describe_map, Fdescribe_vector): Adjust calls to `describe_vector'.

	* keyboard.h (timer_check, show_help_echo): Remove unused parameters.

	* keyboard.c (timer_check): Remove parameter `do_it_now',
	unused since revno:14998 (1996-04-12).
	(show_help_echo): Remove parameter `ok_to_overwrite_keystroke_echo',
	unused since revno:86854 (2008-04-19).

	* keyboard.c (read_char):
	* w32menu.c (w32_menu_display_help):
	* xmenu.c (show_help_event, menu_help_callback):
	Adjust calls to `show_help_echo'.

	* gtkutil.c (xg_maybe_add_timer):
	* keyboard.c (readable_events):
	* process.c (wait_reading_process_output):
	* xmenu.c (x_menu_wait_for_event): Adjust calls to `timer_check'.

	* insdel.c (adjust_markers_gap_motion):
	Remove; no-op since revno:20569 (1998-01-02).
	(gap_left, gap_right): Don't call it.

2011-03-25  Chong Yidong  <cyd@stupidchicken.com>

	* xdisp.c (handle_fontified_prop): Discard changes to clip_changed
	incurred during fontification.

2011-03-25  Juanma Barranquero  <lekktu@gmail.com>

	* buffer.c (defvar_per_buffer): Remove unused parameter `doc'.
	(DEFVAR_PER_BUFFER): Don't pass it.

	* dispnew.c (row_equal_p, add_row_entry): Remove unused parameter `w'.
	(scrolling_window): Don't pass it.

2011-03-25  Juanma Barranquero  <lekktu@gmail.com>

	* dispextern.h (glyph_matric): Use #if GLYPH_DEBUG, not #ifdef.

	* fileio.c (check_executable) [DOS_NT]: Remove unused variables `len'
	and `suffix'.
	(Fset_file_selinux_context) [HAVE_LIBSELINUX]: Move here declaration
	of variables specific to SELinux and computation of `encoded_absname'.

	* image.c (XPutPixel): Remove unused variable `height'.

	* keyboard.c (make_lispy_event): Remove unused variable `hpos'.

	* unexw32.c (get_section_info): Remove unused variable `section'.

	* w32.c (stat): Remove unused variables `drive_root' and `devtype'.
	(system_process_attributes): Remove unused variable `sess'.
	(sys_read): Remove unused variable `err'.

	* w32fns.c (top): Wrap variables with #if GLYPH_DEBUG, not #ifdef.
	(w32_wnd_proc): Remove unused variable `isdead'.
	(unwind_create_frame): Use #if GLYPH_DEBUG, not #ifdef.
	(Fx_server_max_request_size): Remove unused variable `dpyinfo'.
	(x_create_tip_frame): Remove unused variable `tem'.

	* w32inevt.c (w32_console_read_socket):
	Remove unused variable `no_events'.

	* w32term.c (x_draw_composite_glyph_string_foreground):
	Remove unused variable `width'.

2011-03-24  Juanma Barranquero  <lekktu@gmail.com>

	* w32term.c (x_set_glyph_string_clipping):
	Don't pass uninitialized region to CombineRgn.

2011-03-23  Juanma Barranquero  <lekktu@gmail.com>

	* w32fns.c (x_set_menu_bar_lines): Remove unused variable `olines'.
	(w32_wnd_proc): Pass NULL to Windows API, not uninitialized buffer.
	(Fx_close_connection): Remove unused variable `i'.

	* w32font.c (w32font_draw): Return number of glyphs.
	(w32font_open_internal): Remove unused variable `i'.
	(w32font_driver): Add missing initializer.

	* w32menu.c (utf8to16): Remove unused variable `utf16'.
	(fill_in_menu): Remove unused variable `items_added'.

	* w32term.c (last_mouse_press_frame): Remove static global variable.
	(w32_clip_to_row): Remove unused variable `f'.
	(x_delete_terminal): Remove unused variable `i'.

	* w32uniscribe.c (uniscribe_shape): Remove unused variable `nclusters'.
	(NOTHING): Remove unused static global variable.
	(uniscribe_check_otf): Remove unused variable `table'.
	(uniscribe_font_driver): Add missing initializers.

2011-03-23  Julien Danjou  <julien@danjou.info>

	* term.c (Fsuspend_tty, Fresume_tty):
	* minibuf.c (read_minibuf, run_exit_minibuf_hook):
	* window.c (temp_output_buffer_show):
	* insdel.c (signal_before_change):
	* frame.c (Fhandle_switch_frame):
	* fileio.c (Fdo_auto_save):
	* emacs.c (Fkill_emacs):
	* editfns.c (save_excursion_restore):
	* cmds.c (internal_self_insert):
	* callint.c (Fcall_interactively):
	* buffer.c (Fkill_all_local_variables):
	* keyboard.c (Fcommand_execute, Fsuspend_emacs, safe_run_hooks_1):
	Use Frun_hooks.
	(command_loop_1): Use Frun_hooks.  Call safe_run_hooks
	unconditionnaly since it does the check itself.

2011-03-23  Paul Eggert  <eggert@cs.ucla.edu>

	Fix more problems found by GCC 4.5.2's static checks.

	* coding.c (encode_coding_raw_text): Avoid unnecessary test
	the first time through the loop, since we know p0 < p1 then.
	This also avoids a gcc -Wstrict-overflow warning.

	* lisp.h (SAFE_ALLOCA, SAFE_ALLOCA_LISP): Avoid 'int' overflow
	leading to a memory leak, possible in functions like
	load_charset_map_from_file that can allocate an unbounded number
	of objects (Bug#8318).

	* xmenu.c (set_frame_menubar): Use EMACS_UINT, not int, for indexes
	that could (at least in theory) be that large.

	* xdisp.c (message_log_check_duplicate): Return unsigned long, not int.
	This is less likely to overflow, and avoids undefined behavior if
	overflow does occur.  All callers changed.  Use strtoul to scan
	for the unsigned long integer.
	(pint2hrstr): Simplify and tune code slightly.
	This also avoids a (bogus) GCC warning with gcc -Wstrict-overflow.

	* scroll.c (do_scrolling): Work around GCC bug 48228.
	See <http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48228>.

	* frame.c (Fmodify_frame_parameters): Simplify loop counter.
	This also avoids a warning with gcc -Wstrict-overflow.
	(validate_x_resource_name): Simplify count usage.
	This also avoids a warning with gcc -Wstrict-overflow.

	* fileio.c (Fcopy_file): Report error if fchown or fchmod
	fail (Bug#8306).

	* emacs.c (Fdaemon_initialized): Do not ignore I/O errors (Bug#8303).

	* process.c (Fmake_network_process): Use socklen_t, not int,
	where POSIX says socklen_t is required in portable programs.
	This fixes a porting bug on hosts like 64-bit HP-UX, where
	socklen_t is wider than int (Bug#8277).
	(Fmake_network_process, server_accept_connection):
	(wait_reading_process_output, read_process_output):
	Likewise.

	* process.c: Rename or move locals to avoid shadowing.
	(list_processes_1, Fmake_network_process):
	(read_process_output_error_handler, exec_sentinel_error_handler):
	Rename or move locals.
	(Fmake_network_process): Define label "retry_connect" only if needed.
	(Fnetwork_interface_info): Fix pointer signedness.
	(process_send_signal): Add cast to avoid pointer signedness problem.
	(FIRST_PROC_DESC, IF_NON_BLOCKING_CONNECT): Remove unused macros.
	(create_process): Use 'volatile' to avoid vfork clobbering (Bug#8298).

	Make tparam.h and terminfo.c consistent.
	* cm.c (tputs, tgoto, BC, UP): Remove extern decls.
	Include tparam.h instead, since it declares them.
	* cm.h (PC): Remove extern decl; tparam.h now does this.
	* deps.mk (cm.o, terminfo.o): Depend on tparam.h.
	* terminfo.c: Include tparam.h, to check interfaces.
	(tparm): Make 1st arg a const pointer in decl.  Put it at top level.
	(tparam): Adjust signature to match interface in tparam.h;
	this removes some undefined behavior.  Check that outstring and len
	are zero, which they always are with Emacs.
	* tparam.h (PC, BC, UP): New extern decls.

	* xftfont.c (xftfont_shape): Now static, and defined only if needed.
	(xftfont_open): Rename locals to avoid shadowing.

	* ftfont.c (ftfont_resolve_generic_family): Fix pointer signedness.
	(ftfont_otf_capability, ftfont_shape): Omit decls if not needed.
	(OTF_TAG_SYM): Omit macro if not needed.
	(ftfont_list): Remove unused local.
	(get_adstyle_property, ftfont_pattern_entity):
	(ftfont_lookup_cache, ftfont_open, ftfont_anchor_point):
	Rename locals to avoid shadowing.

	* xfont.c (xfont_list_family): Mark var as initialized.

	* xml.c (make_dom): Now static.

	* composite.c (composition_compute_stop_pos): Rename local to
	avoid shadowing.
	(composition_reseat_it): Remove unused locals.
	(find_automatic_composition, composition_adjust_point): Likewise.
	(composition_update_it): Mark var as initialized.
	(find_automatic_composition): Mark vars as initialized,
	with a FIXME (Bug#8290).

	character.h: Rename locals to avoid shadowing.
	* character.h (PREV_CHAR_BOUNDARY, FETCH_STRING_CHAR_ADVANCE):
	(FETCH_STRING_CHAR_AS_MULTIBYTE_ADVANCE, FETCH_CHAR_ADVANCE):
	(FETCH_CHAR_ADVANCE_NO_CHECK, INC_POS, DEC_POS, BUF_INC_POS):
	(BUF_DEC_POS): Be more systematic about renaming local temporaries
	to avoid shadowing.

	* textprop.c (property_change_between_p): Remove; unused.

	* intervals.c (interval_start_pos): Now static.

	* intervals.h (CHECK_TOTAL_LENGTH): Avoid empty "else".

	* atimer.c (start_atimer, append_atimer_lists, set_alarm):
	Rename locals to avoid shadowing.

	* sound.c (wav_play, au_play, Fplay_sound_internal):
	Fix pointer signedness.
	(alsa_choose_format): Remove unused local var.
	(wav_play): Initialize a variable to 0, to prevent undefined
	behavior (Bug#8278).

	* region-cache.c (insert_cache_boundary): Redo var to avoid shadowing.

	* region-cache.h (pp_cache): New decl, for gcc -Wmissing-prototypes.

	* callproc.c (Fcall_process): Use 'volatile' to avoid vfork
	clobbering (Bug#8298).
	* sysdep.c (sys_subshell): Likewise.
	Previously, the sys_subshell 'volatile' was incorrectly IF_LINTted out.

	* lisp.h (child_setup): Now NO_RETURN unless DOS_NT.
	This should get cleaned up, so that child_setup has the
	same signature on all platforms.

	* callproc.c (call_process_cleanup): Now static.
	(relocate_fd): Rename locals to avoid shadowing.

2011-03-22  Chong Yidong  <cyd@stupidchicken.com>

	* xterm.c (x_clear_frame): Remove XClearWindow call.  This appears
	not to be necessary, and produces flickering.

2011-03-20  Glenn Morris  <rgm@gnu.org>

	* config.in: Remove file.

2011-03-20  Juanma Barranquero  <lekktu@gmail.com>

	* minibuf.c (Vcompleting_read_function): Don't declare, global variables
	are now in src/globals.h.
	(syms_of_minibuf): Remove spurious & from previous change.

2011-03-20  Leo  <sdl.web@gmail.com>

	* minibuf.c (completing-read-function): New variable.
	(completing-read-default): Rename from completing-read.
	(completing-read): Call completing-read-function.

2011-03-19  Juanma Barranquero  <lekktu@gmail.com>

	* xfaces.c (Fx_load_color_file):
	Read color file from absolute filename (bug#8250).

2011-03-19  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in: Update dependencies.

2011-03-17  Eli Zaretskii  <eliz@gnu.org>

	* makefile.w32-in ($(BLD)/unexw32.$(O)): Depend on $(SRC)/unexec.h.

2011-03-17  Paul Eggert  <eggert@cs.ucla.edu>

	Fix more problems found by GCC 4.5.2's static checks.

	* process.c (make_serial_process_unwind, send_process_trap):
	(sigchld_handler): Now static.

	* process.c (allocate_pty): Let PTY_ITERATION declare iteration vars.
	That way, the code declares only the vars that it needs.
	* s/aix4-2.h (PTY_ITERATION): Declare iteration vars.
	* s/cygwin.h (PTY_ITERATION): Likewise.
	* s/darwin.h (PTY_ITERATION): Likewise.
	* s/gnu-linux.h (PTY_ITERATION): Likewise.

	* s/irix6-5.h (PTY_OPEN): Declare stb, to loosen coupling.
	* process.c (allocate_pty): Don't declare stb unless it's needed.

	* bytecode.c (MAYBE_GC): Rewrite so as not to use empty "else".
	(CONSTANTLIM): Remove; unused.
	(METER_CODE, Bscan_buffer, Bread_char, Bset_mark):
	Define only if needed.

	* unexelf.c (unexec): Name an expression,
	to avoid gcc -Wbad-function-cast warning.
	Use a different way to cause a compilation error if anyone uses
	n rather than nn, a way that does not involve shadowing.
	(ELF_BSS_SECTION_NAME, OLD_PROGRAM_H): Remove; unused.

	* deps.mk (unexalpha.o): Remove; unused.

	New file unexec.h, the (simple) interface for unexec (Bug#8267).
	* unexec.h: New file.
	* deps.mk (emacs.o, unexaix.o, unexcw.o, unexcoff.o, unexelf.o):
	(unexhp9k800.o, unexmacosx.o, unexsol.o, unexw32.o):
	Depend on unexec.h.
	* emacs.c [!defined CANNOT_DUMP]: Include unexec.h.
	* unexaix.c, unexcoff.c, unexcw.c, unexelf.c, unexhp9k800.c:
	* unexmacosx.c, unexsol.c, unexw32.c: Include unexec.h.
	Change as necessary to match prototype in unexec.h.

	* syntax.c (Fforward_comment, scan_lists): Rename locals to avoid
	shadowing.
	(back_comment, skip_chars): Mark vars as initialized.

	* character.h (FETCH_STRING_CHAR_ADVANCE_NO_CHECK, BUF_INC_POS):
	Rename locals to avoid shadowing.

	* lread.c (read1): Rewrite so as not to use empty "else".
	(Fload, readevalloop, read1): Rename locals to avoid shadowing.

	* print.c (Fredirect_debugging_output): Fix pointer signedess.

	* lisp.h (debug_output_compilation_hack): Add decl here, to avoid
	warning when compiling print.c.

	* font.c (font_unparse_fcname): Abort in an "impossible" situation
	instead of using an uninitialized var.
	(font_sort_entities): Mark var as initialized.

	* character.h (FETCH_CHAR_ADVANCE): Rename locals to avoid shadowing.

	* font.c (font_unparse_xlfd): Don't mix pointers to variables with
	pointers to constants.
	(font_parse_fcname): Remove unused vars.
	(font_delete_unmatched): Now static.
	(font_get_spec): Remove; unused.
	(font_style_to_value, font_prop_validate_style, font_unparse_fcname):
	(font_update_drivers, Ffont_get_glyphs, font_add_log):
	Rename or move locals to avoid shadowing.

	* fns.c (require_nesting_list, require_unwind): Now static.
	(Ffillarray): Rename locals to avoid shadowing.

	* floatfns.c (domain_error2): Define only if needed.
	(Ffrexp, Fldexp): Rename locals to avoid shadowing.

	* alloc.c (mark_backtrace): Move decl from here ...
	* lisp.h: ... to here, so that it can be checked.

	* eval.c (call_debugger, do_debug_on_call, grow_specpdl): Now static.
	(Fdefvar): Rewrite so as not to use empty "else".
	(lisp_indirect_variable): Name an expression,
	to avoid gcc -Wbad-function-cast warning.
	(Fdefvar): Rename locals to avoid shadowing.

	* callint.c (quotify_arg, quotify_args): Now static.
	(Fcall_interactively): Rename locals to avoid shadowing.
	Use const pointer when appropriate.

	* lisp.h (get_system_name, get_operating_system_release):
	Move decls here, to check interfaces.
	* process.c (get_operating_system_release): Move decl to lisp.h.
	* xrdb.c (get_system_name): Likewise.
	* editfns.c (init_editfns, Fuser_login_name, Fuser_uid):
	(Fuser_real_uid, Fuser_full_name): Remove unnecessary casts,
	some of which prompt warnings from gcc -Wbad-function-cast.
	(Fformat_time_string, Fencode_time, Finsert_char):
	(Ftranslate_region_internal, Fformat):
	Rename or remove local vars to avoid shadowing.
	(Ftranslate_region_internal): Mark var as initialized.

	* doc.c (Fdocumentation, Fsnarf_documentation): Move locals to
	avoid shadowing.

	* lisp.h (eassert): Check that the argument compiles, even if
	ENABLE_CHECKING is not defined.

	* data.c (Findirect_variable): Name an expression, to avoid
	gcc -Wbad-function-cast warning.
	(default_value, arithcompare, arith_driver, arith_error): Now static.
	(store_symval_forwarding): Rename local to avoid shadowing.
	(Fmake_variable_buffer_local, Fmake_local_variable):
	Mark variables as initialized.
	(do_blv_forwarding, do_symval_forwarding): Remove; unused.

	* alloc.c (check_cons_list): Do not define unless GC_CHECK_CONS_LIST.
	(Fmake_vector, Fvector, Fmake_byte_code, Fgarbage_collect):
	Rename locals to avoid shadowing.
	(mark_stack): Move local variables into the #ifdef region where
	they're used.
	(BLOCK_INPUT_ALLOC, UNBLOCK_INPUT_ALLOC): Define only if
	! defined SYSTEM_MALLOC && ! defined SYNC_INPUT, as they are not
	needed otherwise.
	(CHECK_ALLOCATED): Define only if GC_CHECK_MARKED_OBJECTS.
	(GC_STRING_CHARS): Remove; not used.
	(Fmemory_limit): Cast sbrk's returned value to char *.

	* lisp.h (check_cons_list): Declare if GC_CHECK_CONS_LIST; this
	avoids undefined behavior in theory.

	* regex.c (IF_LINT): Add defn, for benefit of ../lib-src.

	Use functions, not macros, for up- and down-casing (Bug#8254).
	* buffer.h (DOWNCASE_TABLE, UPCASE_TABLE, DOWNCASE, UPPERCASEP):
	(NOCASEP, LOWERCASEP, UPCASE, UPCASE1): Remove.  All callers changed
	to use the following functions instead of these macros.
	(downcase): Adjust to lack of DOWNCASE_TABLE.  Return int, not
	EMACS_INT, since callers assume the returned value fits in int.
	(upcase1): Likewise, for UPCASE_TABLE.
	(uppercasep, lowercasep, upcase): New static inline functions.
	* editfns.c (Fchar_equal): Remove no-longer-needed workaround for
	the race-condition problem in the old DOWNCASE.

	* regex.c (CHARSET_LOOKUP_RANGE_TABLE_RAW, POP_FAILURE_REG_OR_COUNT):
	Rename locals to avoid shadowing.
	(regex_compile, re_match_2_internal): Move locals to avoid shadowing.
	(regex_compile, re_search_2, re_match_2_internal):
	Remove unused local vars.
	(FREE_VAR): Rewrite so as not to use empty "else",
	which gcc can warn about.
	(regex_compile, re_match_2_internal): Mark locals as initialized.
	(RETALLOC_IF): Define only if needed.
	(WORDCHAR_P): Likewise.  This one is never needed, but is used
	only in a comment talking about a compiler bug, so put inside
	the #if 0 of that comment.
	(CHARSET_LOOKUP_BITMAP, FAIL_STACK_FULL, RESET_FAIL_STACK):
	(PUSH_FAILURE_ELT, BUF_PUSH_3, STOP_ADDR_VSTRING):
	Remove; unused.

	* search.c (boyer_moore): Rename locals to avoid shadowing.
	* character.h (FETCH_STRING_CHAR_AS_MULTIBYTE_ADVANCE):
	(PREV_CHAR_BOUNDARY): Likewise.

	* search.c (simple_search): Remove unused var.

	* dired.c (compile_pattern): Move decl from here ...
	* lisp.h: ... to here, so that it can be checked.
	(struct re_registers): New forward decl.

	* character.h (INC_POS, DEC_POS): Rename locals to avoid shadowing.

	* indent.c (MULTIBYTE_BYTES_WIDTH): New args bytes, width.
	All uses changed.
	(MULTIBYTE_BYTES_WIDTH, scan_for_column, compute_motion):
	Rename locals to avoid shadowing.
	(Fvertical_motion): Mark locals as initialized.

	* casefiddle.c (casify_object, casify_region): Now static.
	(casify_region): Mark local as initialized.

	* cmds.c (internal_self_insert): Rename local to avoid shadowing.

	* lisp.h (GCPRO2_VAR, GCPRO3_VAR, GCPRO4_VAR, GCPRO5_VAR, GCPRO6_VAR):
	New macros, so that the caller can use some names other than
	gcpro1, gcpro2, etc.
	(GCPRO2, GCPRO3, GCPRO4, GCPRO5, GCPRO6): Reimplement in terms
	of the new macros.
	(GCPRO1_VAR, UNGCPRO_VAR): Change the meaning of the second
	argument, for consistency with GCPRO2_VAR, etc: it is now the
	prefix of the variable, not the variable itself.  All uses
	changed.
	* dired.c (directory_files_internal, file_name_completion):
	Rename locals to avoid shadowing.

	Fix a race condition diagnosed by gcc -Wsequence-point (Bug#8254).
	An expression of the form (DOWNCASE (x) == DOWNCASE (y)), found in
	dired.c's scmp function, had undefined behavior.
	* lisp.h (DOWNCASE_TABLE, UPCASE_TABLE, DOWNCASE, UPPERCASEP):
	(NOCASEP, LOWERCASEP, UPCASE, UPCASE1): Move from here ...
	* buffer.h: ... to here, because these macros use current_buffer,
	and the new implementation with inline functions needs to have
	current_buffer in scope now, rather than later when the macros
	are used.
	(downcase, upcase1): New static inline functions.
	(DOWNCASE, UPCASE1): Reimplement using these functions.
	This avoids undefined behavior in expressions like
	DOWNCASE (x) == DOWNCASE (y), which previously suffered
	from race conditions in accessing the global variables
	case_temp1 and case_temp2.
	* casetab.c (case_temp1, case_temp2): Remove; no longer needed.
	* lisp.h (case_temp1, case_temp2): Remove their decls.
	* character.h (ASCII_CHAR_P): Move from here ...
	* lisp.h: ... to here, so that the inline functions mentioned
	above can use them.

	* dired.c (directory_files_internal_unwind): Now static.

	* fileio.c (file_name_as_directory, directory_file_name):
	(barf_or_query_if_file_exists, auto_save_error, auto_save_1):
	Now static.
	(file_name_as_directory): Use const pointers when appropriate.
	(Fexpand_file_name): Likewise.  In particular, newdir might
	point at constant storage, so make it a const pointer.
	(Fmake_directory_internal, Fread_file_name): Remove unused vars.
	(Ffile_selinux_context, Fset_file_selinux_context): Fix pointer
	signedness issues.
	(Fset_file_times, Finsert_file_contents, auto_save_error):
	Rename locals to avoid shadowing.

	* minibuf.c (choose_minibuf_frame_1): Now static.
	(Ftry_completion, Fall_completions): Rename or remove locals
	to avoid shadowing.

	* marker.c (bytepos_to_charpos): Remove; unused.

	* lisp.h (verify_bytepos, count_markers): New decls,
	so that gcc does not warn that these functions aren't declared.

	* insdel.c (check_markers, make_gap_larger, make_gap_smaller):
	(reset_var_on_error, Fcombine_after_change_execute_1): Now static.
	(CHECK_MARKERS): Redo to avoid gcc -Wempty-body diagnostic.
	(copy_text): Remove unused local var.

	* filelock.c (within_one_second): Now static.
	(lock_file_1): Rename local to avoid shadowing.

	* buffer.c (fix_overlays_before): Mark locals as initialized.
	(fix_start_end_in_overlays): Likewise.  This function should be
	simplified by using pointers-to-pointers, but that's a different
	matter.
	(switch_to_buffer_1): Now static.
	(Fkill_buffer, record_buffer, Fbury_buffer, Fset_buffer_multibyte):
	(report_overlay_modification): Rename locals to avoid shadowing.

	* sysdep.c (system_process_attributes): Rename vars to avoid shadowing.
	Fix pointer signedness issue.
	(sys_subshell): Mark local as volatile if checking for lint,
	to suppress a gcc -Wclobbered warning that does not seem to be right.
	(MAXPATHLEN): Define only if needed.

	* process.c (serial_open, serial_configure): Move decls from here ...
	* systty.h: ... to here, so that they can be checked.

	* fns.c (get_random, seed_random): Move extern decls from here ...
	* lisp.h: ... to here, so that they can be checked.

	* sysdep.c (reset_io): Now static.
	(wait_for_termination_signal): Remove; unused.

	* keymap.c (keymap_parent, keymap_memberp, map_keymap_internal):
	(copy_keymap_item, append_key, push_text_char_description):
	Now static.
	(Fwhere_is_internal): Don't test CONSP (sequences) unnecessarily.
	(DENSE_TABLE_SIZE): Remove; unused.
	(get_keymap, access_keymap, Fdefine_key, Fwhere_is_internal):
	(describe_map_tree):
	Rename locals to avoid shadowing.

	* keyboard.c: Declare functions static if they are not used elsewhere.
	(echo_char, echo_dash, cmd_error, top_level_2):
	(poll_for_input, handle_async_input): Now static.
	(read_char, kbd_buffer_get_event, make_lispy_position):
	(make_lispy_event, make_lispy_movement, apply_modifiers):
	(decode_keyboard_code, tty_read_avail_input, menu_bar_items):
	(parse_tool_bar_item, read_key_sequence, Fread_key_sequence):
	(Fread_key_sequence_vector): Rename locals to avoid shadowing.
	(read_key_sequence, read_char): Mark locals as initialized.
	(Fexit_recursive_edit, Fabort_recursive_edit): Mark with NO_RETURN.

	* keyboard.h (make_ctrl_char): New decl.
	(mark_kboards): Move decl here ...
	* alloc.c (mark_kboards): ... from here.

	* lisp.h (force_auto_save_soon): New decl.

	* emacs.c (init_cmdargs): Rename local to avoid shadowing.
	(DEFINE_DUMMY_FUNCTION): New macro.
	(__do_global_ctors, __do_global_ctors_aux, __do_global_dtors, __main):
	Use it.
	(main): Add casts to avoid warnings
	if GCC considers string literals to be constants.

	* lisp.h (fatal_error_signal): Add decl, since it's exported.

	* dbusbind.c: Pointer signedness fixes.
	(xd_signature, xd_append_arg, xd_initialize):
	(Fdbus_call_method, Fdbus_call_method_asynchronously):
	(Fdbus_method_return_internal, Fdbus_method_error_internal):
	(Fdbus_send_signal, xd_read_message_1, Fdbus_register_service):
	(Fdbus_register_signal): Use SSDATA when the context wants char *.

	* dbusbind.c (Fdbus_init_bus): Add cast to avoid warning
	if GCC considers string literals to be constants.
	(Fdbus_register_service, Fdbus_register_method): Remove unused vars.

2011-03-16  Stefan Monnier  <monnier@iro.umontreal.ca>

	* print.c (PRINT_CIRCLE_CANDIDATE_P): New macro.
	(print_preprocess, print_object): New macro to fix last change.

	* print.c (print_preprocess): Don't forget font objects.

2011-03-16  Juanma Barranquero  <lekktu@gmail.com>

	* emacs.c (USAGE3): Doc fixes.

2011-03-15  Andreas Schwab  <schwab@linux-m68k.org>

	* coding.c (detect_coding_iso_2022): Reorganize code to clarify
	structure.

2011-03-14  Juanma Barranquero  <lekktu@gmail.com>

	* lisp.h (VWindow_system, Qfile_name_history):
	* keyboard.h (lispy_function_keys) [WINDOWSNT]:
	* w32term.h (w32_system_caret_hwnd, w32_system_caret_height)
	(w32_system_caret_x, w32_system_caret_y): Declare extern.

	* w32select.c: Don't #include "keyboard.h".
	(run_protected): Add extern declaration for waiting_for_input.

	* w32.c (Qlocal, noninteractive1, inhibit_window_system):
	* w32console.c (detect_input_pending, read_input_pending)
	(encode_terminal_code):
	* w32fns.c (quit_char, lispy_function_keys, Qtooltip)
	(w32_system_caret_hwnd, w32_system_caret_height, w32_system_caret_x)
	(w32_system_caret_y, Qfile_name_history):
	* w32font.c (w32font_driver, QCantialias, QCotf, QClang):
	* w32inevt.c (reinvoke_input_signal, lispy_function_keys):
	* w32menu.c (Qmenu_bar, QCtoggle, QCradio, Qoverriding_local_map)
	(Qoverriding_terminal_local_map, Qmenu_bar_update_hook):
	* w32proc.c (Qlocal, report_file_error):
	* w32term.c (Vwindow_system, updating_frame):
	* w32uniscribe.c (initialized, uniscribe_font_driver):
	Remove unneeded extern declarations.

2011-03-14  Chong Yidong  <cyd@stupidchicken.com>

	* buffer.c (Fmake_indirect_buffer): Fix incorrect assertions.

2011-03-13  Chong Yidong  <cyd@stupidchicken.com>

	* buffer.h (BUF_BEGV, BUF_BEGV_BYTE, BUF_ZV, BUF_ZV_BYTE, BUF_PT)
	(BUF_PT_BYTE): Rewrite to handle indirect buffers (Bug#8219).
	These macros can no longer be used for assignment.

	* buffer.c (Fget_buffer_create, Fmake_indirect_buffer):
	Assign struct members directly, instead of using BUF_BEGV etc.
	(record_buffer_markers, fetch_buffer_markers): New functions for
	recording and fetching special buffer markers.
	(set_buffer_internal_1, set_buffer_temp): Use them.

	* lread.c (unreadchar): Use SET_BUF_PT_BOTH.

	* insdel.c (adjust_point): Use SET_BUF_PT_BOTH.

	* intervals.c (temp_set_point_both): Use SET_BUF_PT_BOTH.
	(get_local_map): Use SET_BUF_BEGV_BOTH and SET_BUF_ZV_BOTH.

	* xdisp.c (hscroll_window_tree):
	(reconsider_clip_changes): Use PT instead of BUF_PT.

2011-03-13  Eli Zaretskii  <eliz@gnu.org>

	* makefile.w32-in ($(BLD)/editfns.$(O)): Depend on
	$(EMACS_ROOT)/lib/intprops.h.

2011-03-13  Paul Eggert  <eggert@cs.ucla.edu>

	Fix more problems found by GCC 4.5.2's static checks.

	* gtkutil.c (xg_get_pixbuf_from_pixmap): Add cast from char *
	to unsigned char * to avoid compiler diagnostic.
	(xg_free_frame_widgets): Make it clear that a local variable is
	needed only if USE_GTK_TOOLTIP.
	(gdk_window_get_screen): Make it clear that this macro is needed
	only if USE_GTK_TOOLTIP.
	(int_gtk_range_get_value): New function, which avoids a diagnostic
	from gcc -Wbad-function-cast.
	(xg_set_toolkit_scroll_bar_thumb): Use it.
	(xg_tool_bar_callback, xg_tool_item_stale_p): Rewrite to avoid
	diagnostic from gcc -Wbad-function-cast.
	(get_utf8_string, xg_get_file_with_chooser):
	Rename locals to avoid shadowing.
	(create_dialog): Move locals to avoid shadowing.

	* xgselect.c (xg_select): Remove unused var.

	* image.c (four_corners_best): Mark locals as initialized.
	(gif_load): Initialize transparent_p to zero (Bug#8238).
	Mark another local as initialized.
	(my_png_error, my_error_exit): Mark with NO_RETURN.

	* image.c (clear_image_cache): Now static.
	(DIM, HAVE_STDLIB_H_1): Remove unused macros.
	(xpm_load): Redo to avoid "discards qualifiers" gcc warning.
	(x_edge_detection): Remove unnecessary cast that
	gcc -Wbad-function-cast diagnoses.
	(gif_load): Fix pointer signedness.
	(clear_image_cache, xbm_read_bitmap_data, x_detect_edges):
	(jpeg_load, gif_load): Rename locals to avoid shadowing.

2011-03-12  Paul Eggert  <eggert@cs.ucla.edu>

	Improve quality of tests for time stamp overflow.
	For example, without this patch (encode-time 0 0 0 1 1
	1152921504606846976) returns the obviously-bogus value (-948597
	62170) on my RHEL 5.5 x86-64 host.  With the patch, it correctly
	reports time overflow.  See
	<http://lists.gnu.org/archive/html/emacs-devel/2011-03/msg00470.html>.
	* deps.mk (editfns.o): Depend on ../lib/intprops.h.
	* editfns.c: Include limits.h and intprops.h.
	(TIME_T_MIN, TIME_T_MAX): New macros.
	(time_overflow): Move earlier, to before first use.
	(hi_time, lo_time): New functions, for an accurate test for
	out-of-range times.
	(Fcurrent_time, Fget_internal_run_time, make_time): Use them.
	(Fget_internal_run_time): Don't assume time_t fits in int.
	(make_time): Use list2 instead of Fcons twice.
	(Fdecode_time): More accurate test for out-of-range times.
	(check_tm_member): New function.
	(Fencode_time): Use it, to test for out-of-range times.
	(lisp_time_argument): Don't rely on undefined left-shift and
	right-shift behavior when checking for time stamp overflow.

	* editfns.c (time_overflow): New function, refactoring common code.
	(Fformat_time_string, Fdecode_time, Fencode_time):
	(Fcurrent_time_string): Use it.

	Move 'make_time' to be next to its inverse 'lisp_time_argument'.
	* dired.c (make_time): Move to ...
	* editfns.c (make_time): ... here.
	* systime.h: Note the move.

2011-03-12  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* fringe.c (update_window_fringes): Remove unused variables.

	* unexmacosx.c (copy_data_segment): Also copy __got section.
	(Bug#8223)

2011-03-12  Eli Zaretskii  <eliz@gnu.org>

	* termcap.c [MSDOS]: Include "msdos.h".
	(find_capability, tgetnum, tgetflag, tgetstr, tputs, tgetent):
	Constify `char *' arguments and their references according to
	prototypes in tparam.h.

	* deps.mk (termcap.o): Depend on tparam.h and msdos.h.

	* msdos.c (XMenuAddPane): 3rd argument is `const char *' now.
	Adapt all references accordingly.

	* msdos.h (XMenuAddPane): 3rd argument is `const char *' now.

2011-03-11  Tom Tromey  <tromey@redhat.com>

	* buffer.c (syms_of_buffer): Remove obsolete comment.

2011-03-11  Eli Zaretskii  <eliz@gnu.org>

	* termhooks.h (encode_terminal_code): Declare prototype.

	* msdos.c (encode_terminal_code): Don't declare prototype.

	* term.c (encode_terminal_code): Now external again, used by
	w32console.c and msdos.c.

	* makefile.w32-in ($(BLD)/term.$(O), ($(BLD)/tparam.$(O)):
	Depend on $(SRC)/tparam.h, see revno 103623.

2011-03-11  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some minor problems found by GCC 4.5.2's static checks.

	* fringe.c (update_window_fringes): Mark locals as initialized
	(Bug#8227).
	(destroy_fringe_bitmap, init_fringe_bitmap): Now static.

	* alloc.c (mark_fringe_data): Move decl from here ...
	* lisp.h (mark_fringe_data) [HAVE_WINDOW_SYSTEM]: ... to here,
	to check its interface.
	(init_fringe_once): Do not declare unless HAVE_WINDOW_SYSTEM.

	* fontset.c (free_realized_fontset): Now static.
	(Fset_fontset_font): Rename local to avoid shadowing.
	(fontset_font): Mark local as initialized.
	(FONTSET_SPEC, FONTSET_REPERTORY, RFONT_DEF_REPERTORY): Remove; unused.

	* xrdb.c: Include "xterm.h", to check x_load_resources's interface.

	* xselect.c (x_disown_buffer_selections): Remove; not used.
	(TRACE3) [!defined TRACE_SELECTION]: Remove; not used.
	(x_own_selection, Fx_disown_selection_internal): Rename locals
	to avoid shadowing.
	(x_handle_dnd_message): Remove local to avoid shadowing.

	* lisp.h (GCPRO1_VAR, UNGCPRO_VAR): New macros,
	so that the caller can use some name other than gcpro1.
	(GCPRO1, UNGCPRO): Reimplement in terms of the new macros.
	* xfns.c (Fx_create_frame, x_create_tip_frame, Fx_show_tip):
	(Fx_backspace_delete_keys_p):
	Use them to avoid shadowing, and rename vars to avoid shadowing.
	(x_decode_color, x_set_name, x_window): Now static.
	(Fx_create_frame): Add braces to silence GCC warning.
	(Fx_file_dialog, Fx_select_font): Fix pointer signedness.
	(x_real_positions, xg_set_icon_from_xpm_data, x_create_tip_frame):
	Remove unused locals.
	(Fx_create_frame, x_create_tip_frame, Fx_show_tip):
	(Fx_backspace_delete_keys_p): Rename locals to avoid shadowing.
	Some of these renamings use the new GCPRO1_VAR and UNGCPRO_VAR
	macros.

	* xterm.h (x_mouse_leave): New decl.

	* xterm.c (x_copy_dpy_color, x_focus_on_frame, x_unfocus_frame):
	Remove unused functions.
	(x_shift_glyphs_for_insert, XTflash, XTring_bell):
	(x_calc_absolute_position): Now static.
	(XTread_socket): Don't define label "out" unless it's used.
	Don't declare local "event" unless it's used.
	(x_iconify_frame, x_free_frame_resources): Don't declare locals
	unless they are used.
	(XEMBED_VERSION, xembed_set_info): Don't define unless needed.
	(x_fatal_error_signal): Remove; not used.
	(x_draw_image_foreground, redo_mouse_highlight, XTmouse_position):
	(x_scroll_bar_report_motion, handle_one_xevent, x_draw_bar_cursor):
	(x_error_catcher, x_connection_closed, x_error_handler):
	(x_error_quitter, xembed_send_message, x_iconify_frame):
	(my_log_handler): Rename locals to avoid shadowing.
	(x_delete_glyphs, x_ins_del_lines): Mark with NO_RETURN.
	(x_connection_closed): Tell GCC not to suggest NO_RETURN.

	* xfaces.c (clear_face_cache, Fx_list_fonts, Fface_font):
	Rename or move locals to avoid shadowing.
	(tty_defined_color, merge_face_heights): Now static.
	(free_realized_faces_for_fontset): Remove; not used.
	(Fx_list_fonts): Mark variable that gcc -Wuninitialized
	does not deduce is never used uninitialized.
	(STRDUPA, LSTRDUPA, FONT_POINT_SIZE_QUANTUM): Remove; not used.
	(LFACEP): Define only if XASSERTS, as it's not needed otherwise.

	* terminal.c (store_terminal_param): Now static.

	* xmenu.c (menu_highlight_callback): Now static.
	(set_frame_menubar): Remove unused local.
	(xmenu_show): Rename parameter to avoid shadowing.
	(xmenu_show, xdialog_show, xmenu_show): Make local pointers "const"
	since they might point to immutable storage.
	(next_menubar_widget_id): Declare only if USE_X_TOOLKIT,
	since it's unused otherwise.

	* xdisp.c (produce_glyphless_glyph): Initialize lower_xoff.
	Add a FIXME, since the code still doesn't look right.  (Bug#8215)
	(Fcurrent_bidi_paragraph_direction): Simplify slightly; this
	avoids a gcc -Wuninitialized diagnostic.
	(display_line, BUILD_COMPOSITE_GLYPH_STRING, draw_glyphs):
	(note_mouse_highlight): Mark variables that gcc -Wuninitialized
	does not deduce are never used uninitialized.

	* lisp.h (IF_LINT): New macro, copied from ../lib-src/emacsclient.c.

	* xdisp.c (redisplay_window): Rename local to avoid shadowing.
	* window.c (window_loop, size_window):
	(run_window_configuration_change_hook, enlarge_window): Likewise.

	* window.c (display_buffer): Now static.
	(size_window): Mark variables that gcc -Wuninitialized
	does not deduce are never used uninitialized.
	* window.h (check_all_windows): New decl, to forestall
	gcc -Wmissing-prototypes diagnostic.
	* dispextern.h (bidi_dump_cached_states): Likewise.

	* charset.h (CHECK_CHARSET_GET_CHARSET): Rename locals to avoid
	shadowing.
	* charset.c (map_charset_for_dump, Fchar_charset): Likewise.
	Include <limits.h>.
	(Fsort_charsets): Redo min/max calculation to shorten the code a bit
	and to avoid gcc -Wuninitialized warning.
	(load_charset_map): Mark variables that gcc -Wuninitialized
	does not deduce are never used uninitialized.
	(load_charset): Abort instead of using uninitialized var (Bug#8229).

	* coding.c (coding_set_source, coding_set_destination):
	Use "else { /* comment */ }" rather than "else /* comment */;"
	for clarity, and to avoid gcc -Wempty-body warning.
	(Fdefine_coding_system_internal): Don't redeclare 'i' inside
	a block, when the outer 'i' will do.
	(decode_coding_utf_8, decode_coding_utf_16, detect_coding_emacs_mule):
	(emacs_mule_char, decode_coding_emacs_mule, detect_coding_iso_2022):
	(decode_coding_iso_2022, decode_coding_sjis, decode_coding_big5):
	(decode_coding_raw_text, decode_coding_charset, get_translation_table):
	(Fdecode_sjis_char, Fdefine_coding_system_internal):
	Rename locals to avoid shadowing.
	* character.h (FETCH_STRING_CHAR_ADVANCE): Likewise.
	* coding.c (emacs_mule_char, encode_invocation_designation):
	Now static, since they're not used elsewhere.
	(decode_coding_iso_2022): Add "default: abort ();" as a safety check.
	(decode_coding_object, encode_coding_object, detect_coding_system):
	(decode_coding_emacs_mule): Mark variables that gcc
	-Wuninitialized does not deduce are never used uninitialized.
	(detect_coding_iso_2022): Initialize a local variable that might
	be used uninitialized.  Leave a FIXME because it's not clear that
	this initialization is needed.  (Bug#8211)
	(ISO_CODE_LF, ISO_CODE_CR, CODING_ISO_FLAG_EUC_TW_SHIFT):
	(ONE_MORE_BYTE_NO_CHECK, UTF_BOM, UTF_16_INVALID_P):
	(SHIFT_OUT_OK, ENCODE_CONTROL_SEQUENCE_INTRODUCER):
	(ENCODE_DIRECTION_R2L, ENCODE_DIRECTION_L2R):
	Remove unused macros.

	* category.c (hash_get_category_set): Remove unused local var.
	(copy_category_table): Now static, since it's not used elsewhere.
	* character.c (string_count_byte8): Likewise.

	* ccl.c (CCL_WRITE_STRING, CCL_ENCODE_CHAR, Fccl_execute_on_string):
	(Fregister_code_conversion_map): Rename locals to avoid shadowing.

	* chartab.c (copy_sub_char_table): Now static, since it's not used
	elsewhere.
	(sub_char_table_ref_and_range, char_table_ref_and_range):
	Rename locals to avoid shadowing.
	(ASET_RANGE, GET_SUB_CHAR_TABLE): Remove unused macros.

	* bidi.c (bidi_check_type): Now static, since it's not used elsewhere.
	(BIDI_BOB): Remove unused macro.

	* cm.c (cmgoto): Mark variables that gcc -Wuninitialized does not
	deduce are never used uninitialized.
	* term.c (encode_terminal_code): Likewise.

	* term.c (encode_terminal_code): Now static.  Remove unused local.

	* tparam.h: New file.
	* term.c, tparam.h: Include it.
	* deps.mk (term.o, tparam.o): Depend on tparam.h.
	* term.c (tputs, tgetent, tgetflag, tgetnum, tparam, tgetstr):
	Move these decls to tparam.h, and make them agree with what
	is actually in tparam.c.  The previous trick of using incompatible
	decls in different modules does not conform to the C standard.
	All callers of tparam changed to use tparam's actual API.
	* tparam.c (tparam1, tparam, tgoto):
	Use const pointers where appropriate.

	* cm.c (calccost, cmgoto): Use const pointers where appropriate.
	* cm.h (struct cm): Likewise.
	* dispextern.h (do_line_insertion_deletion_costs): Likewise.
	* scroll.c (ins_del_costs, do_line_insertion_deletion_costs): Likewise.
	* term.c (tty_ins_del_lines, calculate_costs, struct fkey_table):
	(term_get_fkeys_1, append_glyphless_glyph, produce_glyphless_glyph):
	(turn_on_face, init_tty): Likewise.
	* termchar.h (struct tty_display_info): Likewise.

	* term.c (term_mouse_position): Rename local to avoid shadowing.

	* alloc.c (mark_ttys): Move decl from here ...
	* lisp.h (mark_ttys): ... to here, so that it's checked against defn.

2011-03-11  Andreas Schwab  <schwab@linux-m68k.org>

	* .gdbinit (pwinx, xbuffer): Fix access to buffer name.

2011-03-09  Juanma Barranquero  <lekktu@gmail.com>

	* search.c (compile_pattern_1): Remove argument regp, unused since
	revid:rms@gnu.org-19941211082627-3x1g1wyqkjmwloig.
	(compile_pattern): Don't pass it.

2011-03-08  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.h (DEFAULT_GDK_DISPLAY): New define.
	(GDK_WINDOW_XID, gtk_widget_get_preferred_size): New defines
	for ! HAVE_GTK3.
	(GTK_WIDGET_TO_X_WIN): Use GDK_WINDOW_XID.

	* xmenu.c (menu_position_func): Call gtk_widget_get_preferred_size.

	* gtkutil.c: Include gtkx.h if HAVE_GTK3.  If ! HAVE_GTK3, define
	gdk_window_get_screen, gdk_window_get_geometry,
	gdk_x11_window_lookup_for_display and GDK_KEY_g.
	(xg_set_screen): Use DEFAULT_GDK_DISPLAY.
	(xg_get_pixbuf_from_pixmap): New function.
	(xg_get_pixbuf_from_pix_and_mask): Change parameters from GdkPixmap
	to Pixmap, take frame as parameter, remove GdkColormap parameter.
	Call xg_get_pixbuf_from_pixmap instead of
	gdk_pixbuf_get_from_drawable.
	(xg_get_image_for_pixmap): Do not make GdkPixmaps, call
	xg_get_pixbuf_from_pix_and_mask with Pixmap parameters instead.
	(xg_check_special_colors): Use GtkStyleContext and its functions
	for HAVE_GTK3.
	(xg_prepare_tooltip, xg_hide_tooltip): Call gdk_window_get_screen.
	(xg_prepare_tooltip, create_dialog, menubar_map_cb)
	(xg_update_frame_menubar, xg_tool_bar_detach_callback)
	(xg_tool_bar_attach_callback, xg_update_tool_bar_sizes):
	Call gtk_widget_get_preferred_size.
	(xg_frame_resized): gdk_window_get_geometry only takes 5
	parameters.
	(xg_win_to_widget, xg_event_is_for_menubar):
	Call gdk_x11_window_lookup_for_display.
	(xg_set_widget_bg): New function.
	(delete_cb): New function.
	(xg_create_frame_widgets): Connect delete-event to delete_cb.
	Call xg_set_widget_bg.  Only set backgrund pixmap for ! HAVE_GTK3
	(xg_set_background_color): Call xg_set_widget_bg.
	(xg_set_frame_icon): Call xg_get_pixbuf_from_pix_and_mask.
	(xg_create_scroll_bar): vadj is a GtkAdjustment for HAVE_GTK3.
	Only call gtk_range_set_update_policy if ! HAVE_GTK3.
	(xg_make_tool_item): Only connect xg_tool_bar_item_expose_callback
	if ! HAVE_GTK3.
	(update_frame_tool_bar): Call gtk_widget_hide.
	(xg_initialize): Use GDK_KEY_g.

	* xsmfns.c (gdk_set_sm_client_id): Define to gdk_set_sm_client_id
	if ! HAVE_GTK3
	(x_session_initialize): Call gdk_x11_set_sm_client_id.

	* xterm.c (XFillRectangle): Use cairo routines for HAVE_GTK3.
	(x_term_init): Disable Xinput(2) with GDK_CORE_DEVICE_EVENTS.
	Load ~/emacs.d/gtkrc only for ! HAVE_GTK3.

2011-03-08  Juanma Barranquero  <lekktu@gmail.com>

	* w32xfns.c (select_palette): Check success of RealizePalette against
	GDI_ERROR, not zero.

See ChangeLog.11 for earlier changes.

;; Local Variables:
;; coding: utf-8
;; End:

  Copyright (C) 2011  Free Software Foundation, Inc.

  This file is part of GNU Emacs.

  GNU Emacs is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  GNU Emacs is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
