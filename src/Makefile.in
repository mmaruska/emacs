# src/Makefile for GNU Emacs.

# Copyright (C) 1985, 1987-1988, 1993-1995, 1999-2011
#   Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.


# Note that this file is edited by msdos/sed1v2.inp for MSDOS.  That
# script may need modifying in sync with changes made here.  Try to
# avoid shell-ism because the DOS build has to use the DOS shell.

SHELL = /bin/sh

# Here are the things that we expect ../configure to edit.
# We use $(srcdir) explicitly in dependencies so as not to depend on VPATH.
srcdir = @srcdir@
abs_builddir = @abs_builddir@
VPATH = $(srcdir)
CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LD_FIRSTFLAG=@LD_FIRSTFLAG@
EXEEXT = @EXEEXT@
version = @version@
# Substitute an assignment for the MAKE variable, because
# BSD doesn't have it as a default.
@SET_MAKE@
# Don't use LIBS.  configure puts stuff in it that either shouldn't be
# linked with Emacs or is duplicated by the other stuff below.
# LIBS = @LIBS@
LIBOBJS = @LIBOBJS@

lispsource = $(srcdir)/../lisp
lib = ../lib
libsrc = ../lib-src
etc = ../etc
oldXMenudir = ../oldXMenu
lwlibdir = ../lwlib
lispdir = ../lisp

# Configuration files for .o files to depend on.
M_FILE = @M_FILE@
S_FILE = @S_FILE@
config_h = config.h $(M_FILE) $(S_FILE)

bootstrap_exe = $(abs_builddir)/bootstrap-emacs$(EXEEXT)

## ns-app if HAVE_NS, else empty.
OTHER_FILES = @OTHER_FILES@

## Flags to pass for profiling builds
PROFILING_CFLAGS = @PROFILING_CFLAGS@

## Flags to pass to the compiler to enable build warnings
C_WARNINGS_SWITCH = @C_WARNINGS_SWITCH@

## Machine-specific CFLAGS.
C_SWITCH_MACHINE=@C_SWITCH_MACHINE@
## System-specific CFLAGS.
C_SWITCH_SYSTEM=@C_SWITCH_SYSTEM@

## Currently only set if NS_IMPL_GNUSTEP.
## C_SWITCH_X_SITE may override this.
C_SWITCH_X_SYSTEM=@C_SWITCH_X_SYSTEM@

## Define C_SWITCH_X_SITE to contain any special flags your compiler
## may need to deal with X Windows.  For instance, if you've defined
## HAVE_X_WINDOWS and your X include files aren't in a place that your
## compiler can find on its own, you might want to add "-I/..." or
## something similar.  This is normally set by configure.
## This is used before C_SWITCH_X_SYSTEM and may override it.
C_SWITCH_X_SITE=@C_SWITCH_X_SITE@

## Define LD_SWITCH_X_SITE to contain any special flags your loader
## may need to deal with X Windows.  For instance, if your X libraries
## aren't in a place that your loader can find on its own, you might
## want to add "-L/..." or something similar.  Only used if
## HAVE_X_WINDOWS.
## FIXME? configure sets a value for this, but it has never been
## substituted in this or any other Makefile. Cf C_SWITCH_X_SITE.
LD_SWITCH_X_SITE=

## Next two must come before LD_SWITCH_SYSTEM.
## If needed, a -R option that says where to find X windows at run time.
LD_SWITCH_X_SITE_AUX=@LD_SWITCH_X_SITE_AUX@
## As above, but using -rpath instead.
LD_SWITCH_X_SITE_AUX_RPATH=@LD_SWITCH_X_SITE_AUX_RPATH@

## System-specific LDFLAGS.
LD_SWITCH_SYSTEM=@LD_SWITCH_SYSTEM@

## This holds any special options for linking temacs only (ie, not
## used by configure).  Not used elsewhere because it sometimes
## contains options that have to do with using Emacs's crt0,
## which are only good with temacs.
LD_SWITCH_SYSTEM_TEMACS=@LD_SWITCH_SYSTEM_TEMACS@

## Flags to pass to ld only for temacs.
TEMACS_LDFLAGS = $(LD_SWITCH_SYSTEM) $(LD_SWITCH_SYSTEM_TEMACS)

## $LDFLAGS or empty if NS_IMPL_GNUSTEP (for some reason).
TEMACS_LDFLAGS2 = @TEMACS_LDFLAGS2@

## Some systems define this to request special libraries.
LIBS_SYSTEM=@LIBS_SYSTEM@

## Where to find libgcc.a, if using gcc and necessary.
LIB_GCC=@LIB_GCC@

CRT_DIR=@CRT_DIR@
## May use $CRT_DIR.
LIB_STANDARD=@LIB_STANDARD@
START_FILES = @START_FILES@

## -lm, or empty.
LIB_MATH=@LIB_MATH@

LIBTIFF=@LIBTIFF@
LIBJPEG=@LIBJPEG@
LIBPNG=@LIBPNG@
LIBGIF=@LIBGIF@
LIBXPM=@LIBXPM@
XFT_LIBS=@XFT_LIBS@
LIBX_EXTRA=$(LIBTIFF) $(LIBJPEG) $(LIBPNG) $(LIBGIF) $(LIBXPM) -lX11 $(XFT_LIBS)

FONTCONFIG_CFLAGS = @FONTCONFIG_CFLAGS@
FONTCONFIG_LIBS = @FONTCONFIG_LIBS@
FREETYPE_CFLAGS = @FREETYPE_CFLAGS@
FREETYPE_LIBS = @FREETYPE_LIBS@
LIBOTF_CFLAGS = @LIBOTF_CFLAGS@
LIBOTF_LIBS = @LIBOTF_LIBS@
M17N_FLT_CFLAGS = @M17N_FLT_CFLAGS@
M17N_FLT_LIBS = @M17N_FLT_LIBS@

DBUS_CFLAGS = @DBUS_CFLAGS@
DBUS_LIBS = @DBUS_LIBS@
DBUS_OBJ = @DBUS_OBJ@

GCONF_CFLAGS = @GCONF_CFLAGS@
GCONF_LIBS = @GCONF_LIBS@

GTK_OBJ=@GTK_OBJ@

## -ltermcap, or -lncurses, or -lcurses, or "".
LIBS_TERMCAP=@LIBS_TERMCAP@
## terminfo.o if TERMINFO, else tparam.o.
TERMCAP_OBJ=@TERMCAP_OBJ@

LIBXMU=@LIBXMU@

LIBXSM=@LIBXSM@

LIBXTR6=@LIBXTR6@

## $(LIBXMU) -lXt $(LIBXTR6) -lXext if USE_X_TOOLKIT, else $(LIBXSM).
## Only used if HAVE_X_WINDOWS.
LIBXT_OTHER=@LIBXT_OTHER@

## If !HAVE_X11 || USE_GTK, empty.
## Else if USE_X_TOOLKIT really-lwlib, else really-oldxmenu.
OLDXMENU_TARGET=@OLDXMENU_TARGET@

## If !HAVE_X11 || USE_GTK, empty.
## Else if USE_X_TOOLKIT, $(lwlibdir)/liblw.a.
## Else $(oldXMenudir)/libXMenu11.a.
## (Actually, rather than being empty, it is set to "nothing".
## It is never actually used for anything in this case.
## This is done because there is a rule with target $(OLDXMENU) below,
## and I think it might be a syntax error with some makes to have
## an empty target, even if the associated rule is never run.
## http://lists.gnu.org/archive/html/help-make/2010-05/msg00058.html
## The alternative would be to put that rule in a makefile fragment.)
OLDXMENU=@OLDXMENU@

## If HAVE_X11 && !USE_GTK, $(OLDXMENU) ../src/$(OLDXMENU); else empty.
## We use stamp-xmenu with these two deps to both ensure that lwlib
## gets remade based on its dependencies in its own makefile,
## and remake temacs if lwlib gets changed by this.
OLDXMENU_DEPS=@OLDXMENU_DEPS@

## If !HAVE_X11 && HAVE_X_WINDOWS, -lXMenu (this case no longer possible).
## Else if !HAVE_X11 || USE_GTK, empty.
## Else $(OLDXMENU).
LIBXMENU=@LIBXMENU@

XMENU_OBJ=@XMENU_OBJ@
XOBJ=@XOBJ@

TOOLKIT_LIBW=@TOOLKIT_LIBW@

## Only used if HAVE_X11, in LIBX_OTHER.
LIBXT=$(TOOLKIT_LIBW) $(LIBXT_OTHER)

## If HAVE_X11, $(LIBXT) $(LIBX_EXTRA), else empty.
LIBX_OTHER=@LIBX_OTHER@

## LIBXMENU is nil if !HAVE_X_WINDOWS.
## LD_SWITCH_X_SITE should not be used if not using X, but nothing
## sets it at present, and if something ever does, it should be
## configure, which should set it to nil in non-X builds.
LIBX_BASE=$(LIBXMENU) $(LD_SWITCH_X_SITE)

LIBSOUND= @LIBSOUND@
CFLAGS_SOUND= @CFLAGS_SOUND@

RSVG_LIBS= @RSVG_LIBS@
RSVG_CFLAGS= @RSVG_CFLAGS@

IMAGEMAGICK_LIBS= @IMAGEMAGICK_LIBS@
IMAGEMAGICK_CFLAGS= @IMAGEMAGICK_CFLAGS@

LIBXML2_LIBS = @LIBXML2_LIBS@
LIBXML2_CFLAGS = @LIBXML2_CFLAGS@

## widget.o if USE_X_TOOLKIT, otherwise empty.
WIDGET_OBJ=@WIDGET_OBJ@

## sheap.o if CYGWIN, otherwise empty.
CYGWIN_OBJ=@CYGWIN_OBJ@

## dosfns.o msdos.o w16select.o if MSDOS.
MSDOS_OBJ =
## w16select.o termcap.o if MSDOS && HAVE_X_WINDOWS.
MSDOS_X_OBJ =
MSDOS_SUPPORT_REAL = $(lispsource)/ls-lisp.elc $(lispsource)/disp-table.elc \
 $(lispsource)/dos-fns.elc $(lispsource)/dos-w32.elc $(lispsource)/dos-vars.elc \
 $(lispsource)/term/internal.elc $(lispsource)/term/pc-win.elc
## $MSDOS_SUPPORT_REAL if MSDOS.
MSDOS_SUPPORT =

ns_appdir=@ns_appdir@
ns_appbindir=@ns_appbindir@
ns_appsrc=@ns_appsrc@
NS_OBJ=@NS_OBJ@
NS_OBJC_OBJ=@NS_OBJC_OBJ@
NS_SUPPORT=@NS_SUPPORT@
## Only set if NS_IMPL_GNUSTEP.
GNU_OBJC_CFLAGS=@GNU_OBJC_CFLAGS@

## Empty if !HAVE_X_WINDOWS
## xfont.o ftfont.o xftfont.o ftxfont.o if HAVE_XFT
## xfont.o ftfont.o ftxfont.o if HAVE_FREETYPE
## else xfont.o
FONT_OBJ=@FONT_OBJ@

## Used if HAVE_MOUSE.
REAL_MOUSE_SUPPORT=$(lispsource)/mouse.elc $(lispsource)/select.elc \
  $(lispsource)/scroll-bar.elc
## Used if HAVE_GPM && !HAVE_MOUSE
GPM_MOUSE_SUPPORT=$(lispsource)/mouse.elc
LIBGPM = @LIBGPM@
## Either of the two preceding options, or empty.
MOUSE_SUPPORT=@MOUSE_SUPPORT@

## $(lispsource)/tooltip.elc if HAVE_WINDOW_SYSTEM, else empty.
TOOLTIP_SUPPORT=@TOOLTIP_SUPPORT@

BASE_WINDOW_SUPPORT=$(lispsource)/fringe.elc $(lispsource)/image.elc \
  $(lispsource)/international/fontset.elc $(lispsource)/dnd.elc \
  $(lispsource)/tool-bar.elc $(lispsource)/mwheel.elc

X_WINDOW_SUPPORT=$(lispsource)/x-dnd.elc $(lispsource)/term/common-win.elc \
  $(lispsource)/term/x-win.elc $(lispsource)/dynamic-setting.elc

## If HAVE_X_WINDOWS, both the above
## else if HAVE_WINDOW_SYSTEM (ie, HAVE_NS) just the former; else empty.
WINDOW_SUPPORT=@WINDOW_SUPPORT@

## -lresolv, or empty.
LIBRESOLV = @LIBRESOLV@

LIBSELINUX_LIBS = @LIBSELINUX_LIBS@

LIBGNUTLS_LIBS = @LIBGNUTLS_LIBS@
LIBGNUTLS_CFLAGS = @LIBGNUTLS_CFLAGS@

INTERVALS_H = dispextern.h intervals.h composite.h

GETLOADAVG_LIBS = @GETLOADAVG_LIBS@

RUN_TEMACS = `/bin/pwd`/temacs

UNEXEC_OBJ = @UNEXEC_OBJ@

CANNOT_DUMP=@CANNOT_DUMP@

DEPDIR=deps
## -MMD -MF $(DEPDIR)/$*.d if AUTO_DEPEND; else empty.
DEPFLAGS=@DEPFLAGS@
## test -d $(DEPDIR) || mkdir $(DEPDIR) (if AUTO_DEPEND); else ':'.
MKDEPDIR=@MKDEPDIR@

## DO NOT use -R.  There is a special hack described in lastfile.c
## which is used instead.  Some initialized data areas are modified
## at initial startup, then labeled as part of the text area when
## Emacs is dumped for the first time, and never changed again.
##
## -Demacs is needed to make some files produce the correct version
## for use in Emacs.
##
## -DHAVE_CONFIG_H is needed for some other files to take advantage of
## the information in `config.h'.
##
## C_SWITCH_X_SITE must come before C_SWITCH_X_SYSTEM
## since it may have -I options that should override those.
##
## FIXME? MYCPPFLAGS only referenced in etc/DEBUG.
ALL_CFLAGS=-Demacs -DHAVE_CONFIG_H $(MYCPPFLAGS) -I. -I$(srcdir) \
  -I$(lib) -I$(srcdir)/../lib \
  $(C_SWITCH_MACHINE) $(C_SWITCH_SYSTEM) $(C_SWITCH_X_SITE) \
  $(C_SWITCH_X_SYSTEM) $(CFLAGS_SOUND) $(RSVG_CFLAGS) $(IMAGEMAGICK_CFLAGS) \
  $(LIBXML2_CFLAGS) $(DBUS_CFLAGS) \
  $(GCONF_CFLAGS) $(FREETYPE_CFLAGS) $(FONTCONFIG_CFLAGS) \
  $(LIBOTF_CFLAGS) $(M17N_FLT_CFLAGS) $(DEPFLAGS) $(PROFILING_CFLAGS) \
  $(LIBGNUTLS_CFLAGS) \
  $(C_WARNINGS_SWITCH) $(CFLAGS)
ALL_OBJC_CFLAGS=$(ALL_CFLAGS) $(GNU_OBJC_CFLAGS)

.SUFFIXES: .m
.c.o:
	@$(MKDEPDIR)
	$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $<
.m.o:
	@$(MKDEPDIR)
	$(CC) -c $(CPPFLAGS) $(ALL_OBJC_CFLAGS) $<


## lastfile must follow all files whose initialized data areas should
## be dumped as pure by dump-emacs.
base_obj = dispnew.o frame.o scroll.o xdisp.o menu.o $(XMENU_OBJ) window.o \
	charset.o coding.o category.o ccl.o character.o chartab.o bidi.o \
	cm.o term.o terminal.o xfaces.o $(XOBJ) $(GTK_OBJ) $(DBUS_OBJ) \
	emacs.o keyboard.o macros.o keymap.o sysdep.o \
	buffer.o filelock.o insdel.o marker.o \
	minibuf.o fileio.o dired.o filemode.o \
	cmds.o casetab.o casefiddle.o indent.o search.o regex.o undo.o \
	alloc.o data.o doc.o editfns.o callint.o \
	eval.o floatfns.o fns.o font.o print.o lread.o \
	syntax.o $(UNEXEC_OBJ) bytecode.o \
	process.o gnutls.o callproc.o \
	region-cache.o sound.o atimer.o \
	doprnt.o intervals.o textprop.o composite.o md5.o xml.o \
	$(MSDOS_OBJ) $(MSDOS_X_OBJ) $(NS_OBJ) $(CYGWIN_OBJ) $(FONT_OBJ)
obj = $(base_obj) $(NS_OBJC_OBJ)

## Object files used on some machine or other.
## These go in the DOC file on all machines in case they are needed.
SOME_MACHINE_OBJECTS = dosfns.o msdos.o \
  xterm.o xfns.o xmenu.o xselect.o xrdb.o xsmfns.o fringe.o image.o \
  fontset.o dbusbind.o \
  nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o nsfont.o \
  w32.o w32console.o w32fns.o w32heap.o w32inevt.o \
  w32menu.o w32proc.o w32reg.o w32select.o w32term.o w32xfns.o $(FONT_OBJ)

## gmalloc.o if !SYSTEM_MALLOC && !DOUG_LEA_MALLOC, else empty.
GMALLOC_OBJ=@GMALLOC_OBJ@

## vm-limit.o if !SYSTEM_MALLOC, else empty.
VMLIMIT_OBJ=@VMLIMIT_OBJ@

## ralloc.o if !SYSTEM_MALLOC && REL_ALLOC, else empty.
RALLOC_OBJ=@RALLOC_OBJ@

## Empty on Cygwin, lastfile.o elsewhere.
PRE_ALLOC_OBJ=@PRE_ALLOC_OBJ@
## lastfile.o on Cygwin, empty elsewhere.
POST_ALLOC_OBJ=@POST_ALLOC_OBJ@

## List of object files that make-docfile should not be told about.
otherobj= $(TERMCAP_OBJ) $(PRE_ALLOC_OBJ) $(GMALLOC_OBJ) $(RALLOC_OBJ) \
  $(POST_ALLOC_OBJ) $(VMLIMIT_OBJ) $(WIDGET_OBJ) $(LIBOBJS)

## This is the platform-specific list of Lisp files loaded into the
## dumped Emacs.  It is arranged like this because it is easier to generate
## it semi-mechanically from loadup.el this way.
##
## Note that this list should not include lisp files which might not
## be present, like site-load.el and site-init.el; this makefile
## expects them all to be either present or buildable.
##
## Files which are loaded unconditionally (i.e., on all platforms) should
## also be in shortlisp.  Files which are loaded conditionally (i.e., only
## on some platforms) should instead be in SOME_MACHINE_LISP.
##
## Place loaddefs.el first, so it gets generated first, since it is on
## the critical path (relevant in parallel compilations).
lisp= \
	$(lispsource)/loaddefs.el \
	$(lispsource)/abbrev.elc \
	$(lispsource)/buff-menu.elc \
	$(lispsource)/button.elc \
	$(lispsource)/emacs-lisp/byte-run.elc \
	$(lispsource)/composite.elc \
	$(lispsource)/cus-face.elc \
	$(lispsource)/cus-start.elc \
	$(lispsource)/custom.elc \
	$(lispsource)/emacs-lisp/backquote.elc \
	$(lispsource)/emacs-lisp/lisp-mode.elc \
	$(lispsource)/emacs-lisp/lisp.elc \
	$(lispsource)/env.elc \
	$(lispsource)/faces.elc \
	$(lispsource)/files.elc \
	$(lispsource)/format.elc \
	$(lispsource)/facemenu.elc \
	$(MOUSE_SUPPORT) \
	$(lispsource)/emacs-lisp/float-sup.elc \
	$(lispsource)/frame.elc \
	$(lispsource)/help.elc \
	$(lispsource)/indent.elc \
	$(lispsource)/isearch.elc \
	$(lispsource)/rfn-eshadow.elc \
	$(lispsource)/loadup.el \
	$(lispsource)/bindings.elc \
	$(lispsource)/emacs-lisp/map-ynp.elc \
	$(lispsource)/menu-bar.elc \
	$(lispsource)/international/mule.elc \
	$(lispsource)/international/mule-conf.elc \
	$(lispsource)/international/mule-cmds.elc \
	$(lispsource)/international/characters.elc \
	$(lispsource)/international/charprop.el \
	$(lispsource)/case-table.elc \
	$(lispsource)/language/chinese.elc \
	$(lispsource)/language/cyrillic.elc \
	$(lispsource)/language/indian.elc \
	$(lispsource)/language/sinhala.el \
	$(lispsource)/language/english.el \
	$(lispsource)/language/ethiopic.elc \
	$(lispsource)/language/european.elc \
	$(lispsource)/language/czech.el \
	$(lispsource)/language/slovak.el \
	$(lispsource)/language/romanian.el \
	$(lispsource)/language/greek.el \
	$(lispsource)/language/hebrew.elc \
	$(lispsource)/language/japanese.el \
	$(lispsource)/language/korean.el \
	$(lispsource)/language/lao.el \
	$(lispsource)/language/cham.el \
	$(lispsource)/language/tai-viet.el \
	$(lispsource)/language/thai.el \
	$(lispsource)/language/tibetan.elc \
	$(lispsource)/language/vietnamese.elc \
	$(lispsource)/language/misc-lang.el \
	$(lispsource)/language/utf-8-lang.el \
	$(lispsource)/language/georgian.el \
	$(lispsource)/language/khmer.el \
	$(lispsource)/language/burmese.el \
	$(lispsource)/paths.el \
	$(lispsource)/register.elc \
	$(lispsource)/replace.elc \
	$(lispsource)/simple.elc \
	$(lispsource)/minibuffer.elc \
	$(lispsource)/startup.elc \
	$(lispsource)/subr.elc \
	$(lispsource)/term/tty-colors.elc \
	$(lispsource)/font-core.elc \
	$(lispsource)/emacs-lisp/syntax.elc \
	$(lispsource)/font-lock.elc \
	$(lispsource)/jit-lock.elc \
	$(lispsource)/textmodes/fill.elc \
	$(lispsource)/textmodes/page.elc \
	$(lispsource)/textmodes/paragraphs.elc \
	$(lispsource)/textmodes/text-mode.elc \
	$(lispsource)/emacs-lisp/timer.elc \
	$(lispsource)/jka-cmpr-hook.elc \
	$(lispsource)/vc/vc-hooks.elc \
	$(lispsource)/vc/ediff-hook.elc \
	$(lispsource)/epa-hook.elc \
	$(TOOLTIP_SUPPORT) \
	$(MSDOS_SUPPORT) \
	$(WINDOW_SUPPORT) \
	$(NS_SUPPORT) \
	$(lispsource)/widget.elc \
	$(lispsource)/window.elc \
	$(lispsource)/version.el

## List of relative names for those files from $lisp that are loaded
## unconditionally (i.e. on all platforms).  Files from $lisp that
## are only loaded on some platforms should instead be placed in
## SOME_MACHINE_LISP.  The only reason this variable exists is to prevent
## the make-docfile command-line getting too long for some systems.
shortlisp= \
	../lisp/loaddefs.el \
	../lisp/abbrev.elc \
	../lisp/buff-menu.elc \
	../lisp/button.elc \
	../lisp/emacs-lisp/byte-run.elc \
	../lisp/composite.elc \
	../lisp/cus-face.elc \
	../lisp/cus-start.elc \
	../lisp/custom.elc \
	../lisp/emacs-lisp/backquote.elc \
	../lisp/emacs-lisp/lisp-mode.elc \
	../lisp/emacs-lisp/lisp.elc \
	../lisp/facemenu.elc \
	../lisp/faces.elc \
	../lisp/files.elc \
	../lisp/emacs-lisp/float-sup.elc \
	../lisp/format.elc \
	../lisp/frame.elc \
	../lisp/help.elc \
	../lisp/indent.elc \
	../lisp/isearch.elc \
	../lisp/rfn-eshadow.elc \
	../lisp/loadup.el \
	../lisp/bindings.elc \
	../lisp/emacs-lisp/map-ynp.elc \
	../lisp/env.elc \
	../lisp/international/mule.elc \
	../lisp/international/mule-conf.elc \
	../lisp/international/mule-cmds.elc \
	../lisp/international/characters.elc \
	../lisp/case-table.elc \
	../lisp/language/chinese.elc \
	../lisp/language/cyrillic.elc \
	../lisp/language/indian.elc \
	../lisp/language/sinhala.el \
	../lisp/language/english.el \
	../lisp/language/ethiopic.elc \
	../lisp/language/european.elc \
	../lisp/language/czech.el \
	../lisp/language/slovak.el \
	../lisp/language/romanian.el \
	../lisp/language/greek.el \
	../lisp/language/hebrew.elc \
	../lisp/language/japanese.el \
	../lisp/language/korean.el \
	../lisp/language/lao.el \
	../lisp/language/cham.el \
	../lisp/language/tai-viet.el \
	../lisp/language/thai.el \
	../lisp/language/tibetan.elc \
	../lisp/language/vietnamese.elc \
	../lisp/language/misc-lang.el \
	../lisp/language/utf-8-lang.el \
	../lisp/language/georgian.el \
	../lisp/language/khmer.el \
	../lisp/language/burmese.el \
	../lisp/menu-bar.elc \
	../lisp/paths.el \
	../lisp/register.elc \
	../lisp/replace.elc \
	../lisp/simple.elc \
	../lisp/minibuffer.elc \
	../lisp/startup.elc \
	../lisp/subr.elc \
	../lisp/term/tty-colors.elc \
	../lisp/font-core.elc \
	../lisp/emacs-lisp/syntax.elc \
	../lisp/font-lock.elc \
	../lisp/jit-lock.elc \
	../lisp/textmodes/fill.elc \
	../lisp/textmodes/page.elc \
	../lisp/textmodes/paragraphs.elc \
	../lisp/textmodes/text-mode.elc \
	../lisp/emacs-lisp/timer.elc \
	../lisp/vc/vc-hooks.elc \
	../lisp/vc/ediff-hook.elc \
	../lisp/jka-cmpr-hook.elc \
	../lisp/epa-hook.elc \
	../lisp/widget.elc \
	../lisp/window.elc \
	../lisp/version.el

## Like $shortlisp, but includes only those files from $lisp that are loaded
## conditionally (i.e., only on some platforms).
## Confusingly, term/internal is not in loadup, but is unconditionally
## loaded by pc-win, which is.
SOME_MACHINE_LISP = ../lisp/mouse.elc \
  ../lisp/select.elc ../lisp/scroll-bar.elc \
  ../lisp/ls-lisp.elc ../lisp/dos-fns.elc \
  ../lisp/w32-fns.elc ../lisp/dos-w32.elc \
  ../lisp/disp-table.elc ../lisp/dos-vars.elc ../lisp/w32-vars.elc \
  ../lisp/tooltip.elc ../lisp/image.elc \
  ../lisp/fringe.elc ../lisp/dnd.elc \
  ../lisp/mwheel.elc ../lisp/tool-bar.elc \
  ../lisp/x-dnd.elc ../lisp/dynamic-setting.elc \
  ../lisp/international/fontset.elc \
  ../lisp/term/common-win.elc \
  ../lisp/term/x-win.elc \
  ../lisp/term/pc-win.elc ../lisp/term/internal.elc \
  ../lisp/term/ns-win.elc ../lisp/term/w32-win.elc

## Construct full set of libraries to be linked.
## Note that SunOS needs -lm to come before -lc; otherwise, you get
## duplicated symbols.  If the standard libraries were compiled
## with GCC, we might need LIB_GCC again after them.
LIBES = $(LIBS) $(LIBX_BASE) $(LIBX_OTHER) $(LIBSOUND) \
   $(RSVG_LIBS) $(IMAGEMAGICK_LIBS) $(DBUS_LIBS) \
   $(LIBXML2_LIBS) $(LIBGPM) $(LIBRESOLV) $(LIBS_SYSTEM) \
   $(LIBS_TERMCAP) $(GETLOADAVG_LIBS) $(GCONF_LIBS) $(LIBSELINUX_LIBS) \
   $(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(LIBOTF_LIBS) $(M17N_FLT_LIBS) \
   $(LIBGNUTLS_LIBS) \
   $(LIB_GCC) $(LIB_MATH) $(LIB_STANDARD) $(LIB_GCC)

all: emacs$(EXEEXT) $(OTHER_FILES)

## Does anyone ever pay attention to the load-path-shadows output here?
## The dumped Emacs is as functional and more efficient than
## bootstrap-emacs, so we replace the latter with the former.
emacs$(EXEEXT): temacs$(EXEEXT) $(etc)/DOC $(lisp)
	if test "$(CANNOT_DUMP)" = "yes"; then \
	  ln -f temacs$(EXEEXT) emacs$(EXEEXT); \
	  EMACSLOADPATH=$(lispsource) ./emacs -batch \
	    -f list-load-path-shadows || true; \
	else \
	  LC_ALL=C $(RUN_TEMACS) -batch -l loadup dump || exit 1; \
	  ln -f emacs$(EXEEXT) bootstrap-emacs$(EXEEXT); \
	  ./emacs -batch -f list-load-path-shadows || true; \
	fi

## We run make-docfile twice because the command line may get too long
## on some systems.
## $(SOME_MACHINE_OBJECTS) comes before $(obj) because some files may
## or may not be included in $(obj), but they are always included in
## $(SOME_MACHINE_OBJECTS).  Since a file is processed when it is mentioned
## for the first time, this prevents any variation between configurations
## in the contents of the DOC file.
## Likewise for $(SOME_MACHINE_LISP).
## Most of this Makefile refers to Lisp files via $(lispsource), so
## we also use $(lisp) rather than $(shortlisp) for the dependency since
## the Makefile uses string equality to decide when we talk about identical
## files.  Apparently we pass $(shortlisp) rather than $(lisp) to make-docfile
## only in order to reduce the command line length.  --Stef
$(etc)/DOC: $(libsrc)/make-docfile$(EXEEXT) $(obj) $(lisp) $(SOME_MACHINE_LISP)
	-rm -f $(etc)/DOC
	$(libsrc)/make-docfile -d $(srcdir) $(SOME_MACHINE_OBJECTS) $(obj) > $(etc)/DOC
	$(libsrc)/make-docfile -a $(etc)/DOC -d $(srcdir) $(SOME_MACHINE_LISP) $(shortlisp)

$(libsrc)/make-docfile$(EXEEXT):
	cd $(libsrc); $(MAKE) $(MFLAGS) make-docfile$(EXEEXT)

buildobj.h: Makefile
	echo "#define BUILDOBJ \"$(obj) $(otherobj) " "\"" > buildobj.h

globals.h: gl-stamp; @true

GLOBAL_SOURCES = $(base_obj:.o=.c) $(NS_OBJC_OBJ:.o=.m)

gl-stamp: $(libsrc)/make-docfile$(EXEEXT) $(GLOBAL_SOURCES)
	@rm -f gl-tmp
	$(libsrc)/make-docfile -d $(srcdir) -g $(SOME_MACHINE_OBJECTS) $(obj) > gl-tmp
	$(srcdir)/../move-if-change gl-tmp globals.h
	echo timestamp > $@

$(obj) $(otherobj): globals.h

$(lib)/libgnu.a: $(config_h)
	cd $(lib) && $(MAKE) libgnu.a

temacs$(EXEEXT): $(START_FILES) stamp-oldxmenu $(obj) $(otherobj) $(lib)/libgnu.a
	$(CC) $(LD_FIRSTFLAG) $(ALL_CFLAGS) $(TEMACS_LDFLAGS) $(TEMACS_LDFLAGS2) \
	  -o temacs $(START_FILES) $(obj) $(otherobj) $(lib)/libgnu.a $(LIBES)

## The following oldxmenu-related rules are only (possibly) used if
## HAVE_X11 && !USE_GTK, but there is no harm in always defining them
## (provided we take a little care that OLDXMENU is never empty).
really-lwlib:
	cd $(lwlibdir); $(MAKE) $(MFLAGS) \
    CC='$(CC)' CFLAGS='$(CFLAGS)' MAKE='$(MAKE)'
	@true  # make -t should not create really-lwlib.
.PHONY: really-lwlib

really-oldXMenu:
	cd $(oldXMenudir); $(MAKE) $(MFLAGS) \
    CC='$(CC)' CFLAGS='$(CFLAGS)' MAKE='$(MAKE)'
	@true  # make -t should not create really-oldXMenu.
.PHONY: really-oldXMenu

## We do not really need this when OLDXMENU_DEPS is empty, but as
## things stand we need something to satisfy the temacs dependency.
stamp-oldxmenu: $(OLDXMENU_DEPS)
	touch stamp-oldxmenu

## Supply an ordering for parallel make.
../src/$(OLDXMENU): $(OLDXMENU)

$(OLDXMENU): $(OLDXMENU_TARGET)

../config.status:: epaths.in
	@echo "The file epaths.h needs to be set up from epaths.in."
	@echo "Please run the `configure' script again."
	exit 1

../config.status:: config.in
	@echo "The file config.h needs to be set up from config.in."
	@echo "Please run the `configure' script again."
	exit 1

doc.o: buildobj.h


## If HAVE_NS, some ns-specific rules (for OTHER_FILES) are inserted here.
@ns_frag@


mostlyclean:
	rm -f temacs$(EXEEXT) core *.core \#* *.o libXMenu11.a liblw.a
	rm -f ../etc/DOC
	rm -f bootstrap-emacs$(EXEEXT) emacs-$(version)$(EXEEXT)
	rm -f buildobj.h
	rm -f globals.h gl-stamp
clean: mostlyclean
	rm -f emacs-*.*.*$(EXEEXT) emacs$(EXEEXT)
	-rm -rf $(DEPDIR)
	test "X$(ns_appdir)" = "X" || rm -rf $(ns_appdir)

## bootstrap-clean is used to clean up just before a bootstrap.
## It should remove all files generated during a compilation/bootstrap,
## but not things like config.status or TAGS.
bootstrap-clean: clean
	rm -f epaths.h config.h config.stamp stamp-oldxmenu ../etc/DOC-*
	if test -f ./.gdbinit; then \
	  mv ./.gdbinit ./.gdbinit.save; \
	  if test -f "$(srcdir)/.gdbinit"; then rm -f ./.gdbinit.save; \
	  else mv ./.gdbinit.save ./.gdbinit; fi; \
	fi
## This is used in making a distribution.
## Do not use it on development directories!
distclean: bootstrap-clean
	rm -f Makefile
maintainer-clean: distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	rm -f TAGS
versionclean:
	-rm -f emacs$(EXEEXT) emacs-*.*.*$(EXEEXT) ../etc/DOC*
extraclean: distclean
	-rm -f *~ \#* m/?*~ s/?*~

## Arrange to make a tags table TAGS-LISP for ../lisp,
## plus TAGS for the C files, which includes ../lisp/TAGS by reference.

ctagsfiles1 = [xyzXYZ]*.[hcm]
ctagsfiles2 = [a-wA-W]*.[hcm]

TAGS: $(srcdir)/$(ctagsfiles1) $(srcdir)/$(ctagsfiles2)
	../lib-src/etags --include=TAGS-LISP --include=$(lwlibdir)/TAGS \
	  --regex='/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/' \
	  $(srcdir)/$(ctagsfiles1) $(srcdir)/$(ctagsfiles2)
frc:
TAGS-LISP: frc
	$(MAKE) -f $(lispdir)/Makefile TAGS-LISP ETAGS=../lib-src/etags

$(lwlibdir)/TAGS:
	(cd $(lwlibdir); $(MAKE) -f $(lwlibdir)/Makefile tags ETAGS=../lib-src/etags)

tags: TAGS TAGS-LISP $(lwlibdir)/TAGS
.PHONY: tags


### Bootstrapping.

## Bootstrapping right is difficult because of the circular dependencies.
## Furthermore, we have to deal with the fact that many compilation targets
## such as loaddefs.el or *.elc can typically be produced by any old
## Emacs executable, so we would like to avoid rebuilding them whenever
## we build a new Emacs executable.
## To solve the circularity, we use 2 different Emacs executables,
## "emacs" is the main target and "bootstrap-emacs" is the one used
## to build the *.elc and loaddefs.el files.
## To solve the freshness issue, we used to use a third file "witness-emacs"
## which was used to witness the fact that there is a bootstrap-emacs
## executable, and then have dependencies on witness-emacs rather than
## bootstrap-emacs, but that lead to problems in parallel builds (because
## witness-emacs needed to be free from dependencies (to avoid rebuilding
## it), so it was compiled in parallel, leading typically to having 2
## processes dumping bootstrap-emacs at the same time).
## So instead, we replace the witness-emacs dependencies by conditional
## bootstrap-dependencies (via $(BOOTSTRAPEMACS)).  Of course, since we do
## not want to rely on GNU Make features, we have to rely on an external
## script to do the conditional part of the dependency
## (i.e. see the $(SUBDIR) rule ../Makefile.in).

.SUFFIXES: .elc .el

## These suffix rules do not allow additional dependencies, sadly, so
## instead of adding a $(BOOTSTRAPEMACS) dependency here, we add it
## separately below.
## With GNU Make, we would just say "%.el : %.elc $(BOOTSTRAPEMACS)"
.el.elc:
	@cd ../lisp; $(MAKE) $(MFLAGS) compile-onefile \
	                     THEFILE=$< EMACS=$(bootstrap_exe)

## Since the .el.elc rule cannot specify an extra dependency, we do it here.
$(lisp) $(SOME_MACHINE_LISP): $(BOOTSTRAPEMACS)

## VCSWITNESS points to the file that holds info about the current checkout.
## We use it as a heuristic to decide when to rebuild loaddefs.el.
$(lispsource)/loaddefs.el: $(BOOTSTRAPEMACS) $(VCSWITNESS)
	cd ../lisp; $(MAKE) $(MFLAGS) autoloads EMACS=$(bootstrap_exe)

## Dump an Emacs executable named bootstrap-emacs containing the
## files from loadup.el in source form.
bootstrap-emacs$(EXEEXT): temacs$(EXEEXT)
	cd ../lisp; $(MAKE) $(MFLAGS) update-subdirs
	if test "$(CANNOT_DUMP)" = "yes"; then \
	  ln -f temacs$(EXEEXT) bootstrap-emacs$(EXEEXT); \
	else \
	  $(RUN_TEMACS) --batch --load loadup bootstrap || exit 1; \
	  mv -f emacs$(EXEEXT) bootstrap-emacs$(EXEEXT); \
	fi
	@: Compile some files earlier to speed up further compilation.
	cd ../lisp; $(MAKE) $(MFLAGS) compile-first EMACS=$(bootstrap_exe)

## Insert either autodeps.mk (if AUTO_DEPEND), else deps.mk.
@deps_frag@


### Makefile.in ends here
