--- a/doc/lispref/functions.texi
+++ b/doc/lispref/functions.texi
@@ -116,7 +116,9 @@
 
 @defun functionp object
 This function returns @code{t} if @var{object} is any kind of
-function, i.e. can be passed to @code{funcall}.
+function, or a special form, or, recursively, a symbol whose function
+definition is a function or special form.  (This does not include
+macros.)
 @end defun
 
 Unlike @code{functionp}, the next three functions do @emph{not}
--- a/etc/NEWS
+++ b/etc/NEWS
@@ -654,9 +654,6 @@
 
 * Incompatible Lisp Changes in Emacs 23.1
 
-** `functionp' returns nil for special forms.
-I.e. it only returns t for objects that can be passed `funcall'.
-
 +++
 ** The multibyteness of process filters is determined by the coding-system
 used for decoding.  The functions `process-filter-multibyte-p' and
--- a/lisp/ChangeLog
+++ b/lisp/ChangeLog
@@ -48,10 +48,6 @@
 
 	* files.el (abort-if-file-too-large): Fix typo in docstring.
 
-2008-04-05  Stefan Monnier  <monnier@iro.umontreal.ca>
-
-	* subr.el (functionp): Return nil for special forms.
-
 2008-04-05  Glenn Morris  <rgm@gnu.org>
 
 	* emacs-lisp/autoload.el (autoload-ensure-default-file):
--- a/lisp/subr.el
+++ b/lisp/subr.el
@@ -231,17 +231,17 @@
        (eq (car object) 'frame-configuration)))
 
 (defun functionp (object)
-  "Non-nil if OBJECT is a function."
+  "Non-nil if OBJECT is any kind of function or a special form.
+Also non-nil if OBJECT is a symbol and its function definition is
+\(recursively) a function or special form.  This does not include
+macros."
   (or (and (symbolp object) (fboundp object)
 	   (condition-case nil
 	       (setq object (indirect-function object))
 	     (error nil))
 	   (eq (car-safe object) 'autoload)
 	   (not (car-safe (cdr-safe (cdr-safe (cdr-safe (cdr-safe object)))))))
-      (and (subrp object)
-           ;; Filter out special forms.
-           (not (eq 'unevalled (cdr (subr-arity object)))))
-      (byte-code-function-p object)
+      (subrp object) (byte-code-function-p object)
       (eq (car-safe object) 'lambda)))
 
 ;;;; List functions.
